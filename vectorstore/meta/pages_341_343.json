{
  "doc_id": "pages_341_343",
  "text": "6.1 2D and 3D feature-based alignment\n319\nthen used to compute an initial estimate for p. The residuals of the full set of correspondences\nare then computed as\nri = ˜x′\ni(xi; p) −ˆx′\ni,\n(6.28)\nwhere ˜x′\ni are the estimated (mapped) locations and ˆx′\ni are the sensed (detected) feature point\nlocations.\nThe RANSAC technique then counts the number of inliers that are within ϵ of their pre-\ndicted location, i.e., whose ∥ri∥≤ϵ. (The ϵ value is application dependent but is often\naround 1–3 pixels.) Least median of squares ﬁnds the median value of the ∥ri∥2 values. The\nrandom selection process is repeated S times and the sample set with the largest number of\ninliers (or with the smallest median residual) is kept as the ﬁnal solution. Either the initial\nparameter guess p or the full set of computed inliers is then passed on to the next data ﬁtting\nstage.\nWhen the number of measurements is quite large, it may be preferable to only score a\nsubset of the measurements in an initial round that selects the most plausible hypotheses for\nadditional scoring and selection. This modiﬁcation of RANSAC, which can signiﬁcantly\nspeed up its performance, is called Preemptive RANSAC (Nist´er 2003). In another variant\non RANSAC called PROSAC (PROgressive SAmple Consensus), random samples are ini-\ntially added from the most “conﬁdent” matches, thereby speeding up the process of ﬁnding a\n(statistically) likely good set of inliers (Chum and Matas 2005).\nTo ensure that the random sampling has a good chance of ﬁnding a true set of inliers, a\nsufﬁcient number of trials S must be tried. Let p be the probability that any given correspon-\ndence is valid and P be the total probability of success after S trials. The likelihood in one\ntrial that all k random samples are inliers is pk. Therefore, the likelihood that S such trials\nwill all fail is\n1 −P = (1 −pk)S\n(6.29)\nand the required minimum number of trials is\nS = log(1 −P)\nlog(1 −pk).\n(6.30)\nStewart (1999) gives examples of the required number of trials S to attain a 99% proba-\nbility of success. As you can see from Table 6.2, the number of trials grows quickly with the\nnumber of sample points used. This provides a strong incentive to use the minimum number\nof sample points k possible for any given trial, which is how RANSAC is normally used in\npractice.\nUncertainty modeling\nIn addition to robustly computing a good alignment, some applications require the compu-\ntation of uncertainty (see Appendix B.6). For linear problems, this estimate can be obtained\n320\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nk\np\nS\n3\n0.5\n35\n6\n0.6\n97\n6\n0.5\n293\nTable 6.2 Number of trials S to attain a 99% probability of success (Stewart 1999).\nby inverting the Hessian matrix (6.9) and multiplying it by the feature position noise (if these\nhave not already been used to weight the individual measurements, as in Equations (6.10)\nand 6.11)). In statistics, the Hessian, which is the inverse covariance, is sometimes called the\n(Fisher) information matrix (Appendix B.1.1).\nWhen the problem involves non-linear least squares, the inverse of the Hessian matrix\nprovides the Cramer–Rao lower bound on the covariance matrix, i.e., it provides the minimum\namount of covariance in a given solution, which can actually have a wider spread (“longer\ntails”) if the energy ﬂattens out away from the local minimum where the optimal solution is\nfound.\n6.1.5 3D alignment\nInstead of aligning 2D sets of image features, many computer vision applications require the\nalignment of 3D points. In the case where the 3D transformations are linear in the motion\nparameters, e.g., for translation, similarity, and afﬁne, regular least squares (6.5) can be used.\nThe case of rigid (Euclidean) motion,\nER3D =\nX\ni\n∥x′\ni −Rxi −t∥2,\n(6.31)\nwhich arises more frequently and is often called the absolute orientation problem (Horn\n1987), requires slightly different techniques. If only scalar weightings are being used (as\nopposed to full 3D per-point anisotropic covariance estimates), the weighted centroids of the\ntwo point clouds c and c′ can be used to estimate the translation t = c′ −Rc.8 We are then\nleft with the problem of estimating the rotation between two sets of points {ˆxi = xi −c}\nand {ˆx′\ni = x′\ni −c′} that are both centered at the origin.\nOne commonly used technique is called the orthogonal Procrustes algorithm (Golub and\nVan Loan 1996, p. 601) and involves computing the singular value decomposition (SVD) of\n8 When full covariances are used, they are transformed by the rotation and so a closed-form solution for transla-\ntion is not possible.\n6.2 Pose estimation\n321\nthe 3 × 3 correlation matrix\nC =\nX\ni\nˆx′ˆxT = UΣV T .\n(6.32)\nThe rotation matrix is then obtained as R = UV T . (Verify this for yourself when ˆx′ = Rˆx.)\nAnother technique is the absolute orientation algorithm (Horn 1987) for estimating the\nunit quaternion corresponding to the rotation matrix R, which involves forming a 4×4 matrix\nfrom the entries in C and then ﬁnding the eigenvector associated with its largest positive\neigenvalue.\nLorusso, Eggert, and Fisher (1995) experimentally compare these two techniques to two\nadditional techniques proposed in the literature, but ﬁnd that the difference in accuracy is\nnegligible (well below the effects of measurement noise).\nIn situations where these closed-form algorithms are not applicable, e.g., when full 3D\ncovariances are being used or when the 3D alignment is part of some larger optimization, the\nincremental rotation update introduced in Section 2.1.4 (2.35–2.36), which is parameterized\nby an instantaneous rotation vector ω, can be used (See Section 9.1.3 for an application to\nimage stitching.)\nIn some situations, e.g., when merging range data maps, the correspondence between\ndata points is not known a priori. In this case, iterative algorithms that start by matching\nnearby points and then update the most likely correspondence can be used (Besl and McKay\n1992; Zhang 1994; Szeliski and Lavall´ee 1996; Gold, Rangarajan, Lu et al. 1998; David,\nDeMenthon, Duraiswami et al. 2004; Li and Hartley 2007; Enqvist, Josephson, and Kahl\n2009). These techniques are discussed in more detail in Section 12.2.1.\n6.2 Pose estimation\nA particular instance of feature-based alignment, which occurs very often, is estimating an\nobject’s 3D pose from a set of 2D point projections. This pose estimation problem is also\nknown as extrinsic calibration, as opposed to the intrinsic calibration of internal camera pa-\nrameters such as focal length, which we discuss in Section 6.3. The problem of recovering\npose from three correspondences, which is the minimal amount of information necessary,\nis known as the perspective-3-point-problem (P3P), with extensions to larger numbers of\npoints collectively known as PnP (Haralick, Lee, Ottenberg et al. 1994; Quan and Lan 1999;\nMoreno-Noguer, Lepetit, and Fua 2007).\nIn this section, we look at some of the techniques that have been developed to solve such\nproblems, starting with the direct linear transform (DLT), which recovers a 3×4 camera ma-\ntrix, followed by other “linear” algorithms, and then looking at statistically optimal iterative\nalgorithms.",
  "image_path": "page_342.jpg",
  "pages": [
    341,
    342,
    343
  ]
}