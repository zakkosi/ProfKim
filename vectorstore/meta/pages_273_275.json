{
  "doc_id": "pages_273_275",
  "text": "4.3 Lines\n251\nθi\nri\nθ\n(xi,yi)\n0\n360\n0\nrmax\nr\n-rmax\nx\ny\n(a)\n(b)\nFigure 4.41 Original Hough transform: (a) each point votes for a complete family of poten-\ntial lines ri(θ) = xi cos θ + yi sin θ; (b) each pencil of lines sweeps out a sinusoid in (r, θ);\ntheir intersection provides the desired line equation.\nby Ramer (1972) and Douglas and Peucker (1973), who recursively subdivide the curve at\nthe point furthest away from the line joining the two endpoints (or the current coarse polyline\napproximation), as shown in Figure 4.40. Hershberger and Snoeyink (1992) provide a more\nefﬁcient implementation and also cite some of the other related work in this area.\nOnce the line simpliﬁcation has been computed, it can be used to approximate the orig-\ninal curve. If a smoother representation or visualization is desired, either approximating or\ninterpolating splines or curves can be used (Sections 3.5.1 and 5.1.1) (Szeliski and Ito 1986;\nBartels, Beatty, and Barsky 1987; Farin 1996), as shown in Figure 4.40c.\n4.3.2 Hough transforms\nWhile curve approximation with polylines can often lead to successful line extraction, lines\nin the real world are sometimes broken up into disconnected components or made up of many\ncollinear line segments. In many cases, it is desirable to group such collinear segments into\nextended lines. At a further processing stage (described in Section 4.3.3), we can then group\nsuch lines into collections with common vanishing points.\nThe Hough transform, named after its original inventor (Hough 1962), is a well-known\ntechnique for having edges “vote” for plausible line locations (Duda and Hart 1972; Ballard\n1981; Illingworth and Kittler 1988). In its original formulation (Figure 4.41), each edge point\nvotes for all possible lines passing through it, and lines corresponding to high accumulator or\nbin values are examined for potential line ﬁts.9 Unless the points on a line are truly punctate,\na better approach (in my experience) is to use the local orientation information at each edgel\nto vote for a single accumulator cell (Figure 4.42), as described below. A hybrid strategy,\n9 The Hough transform can also be generalized to look for other geometric features such as circles (Ballard\n1981), but we do not cover such extensions in this book.\n252\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nθi\nri\nθ\n(xi,yi)\n0\n360\n0\nrmax\nr\n-rmax\nx\ny\n(a)\n(b)\nFigure 4.42 Oriented Hough transform: (a) an edgel re-parameterized in polar (r, θ) coor-\ndinates, with ˆni = (cos θi, sin θi) and ri = ˆni · xi; (b) (r, θ) accumulator array, showing the\nvotes for the three edgels marked in red, green, and blue.\ny\nx\nd\nθ\nn\nl\n^\nFigure 4.43 2D line equation expressed in terms of the normal ˆn and distance to the origin\nd.\nwhere each edgel votes for a number of possible orientation or location pairs centered around\nthe estimate orientation, may be desirable in some cases.\nBefore we can vote for line hypotheses, we must ﬁrst choose a suitable representation.\nFigure 4.43 (copied from Figure 2.2a) shows the normal-distance (ˆn, d) parameterization for\na line. Since lines are made up of edge segments, we adopt the convention that the line normal\nˆn points in the same direction (i.e., has the same sign) as the image gradient J(x) = ∇I(x)\n(4.19). To obtain a minimal two-parameter representation for lines, we convert the normal\nvector into an angle\nθ = tan−1 ny/nx,\n(4.26)\nas shown in Figure 4.43. The range of possible (θ, d) values is [−180◦, 180◦] × [−\n√\n2,\n√\n2],\nassuming that we are using normalized pixel coordinates (2.61) that lie in [−1, 1]. The number\nof bins to use along each axis depends on the accuracy of the position and orientation estimate\navailable at each edgel and the expected line density, and is best set experimentally with some\ntest runs on sample imagery.\nGiven the line parameterization, the Hough transform proceeds as shown in Algorithm 4.2.\n4.3 Lines\n253\nprocedure Hough({(x, y, θ)}):\n1. Clear the accumulator array.\n2. For each detected edgel at location (x, y) and orientation θ = tan−1 ny/nx,\ncompute the value of\nd = x nx + y ny\nand increment the accumulator corresponding to (θ, d).\n3. Find the peaks in the accumulator corresponding to lines.\n4. Optionally re-ﬁt the lines to the constituent edgels.\nAlgorithm 4.2 Outline of a Hough transform algorithm based on oriented edge segments.\nNote that the original formulation of the Hough transform, which assumed no knowledge of\nthe edgel orientation θ, has an additional loop inside Step 2 that iterates over all possible\nvalues of θ and increments a whole series of accumulators.\nThere are a lot of details in getting the Hough transform to work well, but these are\nbest worked out by writing an implementation and testing it out on sample data. Exercise\n4.12 describes some of these steps in more detail, including using edge segment lengths or\nstrengths during the voting process, keeping a list of constituent edgels in the accumulator\narray for easier post-processing, and optionally combining edges of different “polarity” into\nthe same line segments.\nAn alternative to the 2D polar (θ, d) representation for lines is to use the full 3D m =\n(ˆn, d) line equation, projected onto the unit sphere. While the sphere can be parameterized\nusing spherical coordinates (2.8),\nˆm = (cos θ cos φ, sin θ cos φ, sin φ),\n(4.27)\nthis does not uniformly sample the sphere and still requires the use of trigonometry.\nAn alternative representation can be obtained by using a cube map, i.e., projecting m onto\nthe face of a unit cube (Figure 4.44a). To compute the cube map coordinate of a 3D vector\nm, ﬁrst ﬁnd the largest (absolute value) component of m, i.e., m = ± max(|nx|, |ny|, |d|),\nand use this to select one of the six cube faces. Divide the remaining two coordinates by m\nand use these as indices into the cube face. While this avoids the use of trigonometry, it does\nrequire some decision logic.\nOne advantage of using the cube map, ﬁrst pointed out by Tuytelaars, Van Gool, and\nProesmans (1997), is that all of the lines passing through a point correspond to line segments",
  "image_path": "page_274.jpg",
  "pages": [
    273,
    274,
    275
  ]
}