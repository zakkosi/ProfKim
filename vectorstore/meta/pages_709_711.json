{
  "doc_id": "pages_709_711",
  "text": "14.3 Instance recognition\n687\n(a)\n(b)\n(c)\n(d)\nFigure 14.27\n3D object recognition with afﬁne regions (Rothganger, Lazebnik, Schmid et\nal. 2006) c⃝2006 Springer: (a) sample input image; (b) ﬁve of the recognized (reprojected)\nobjects along with their bounding boxes; (c) a few of the local afﬁne regions; (d) local afﬁne\nregion (patch) reprojected into a canonical (square) frame, along with its geometric afﬁne\ntransformations.\nnik, Schmid et al. (2006). In their system, the afﬁne region detector of Mikolajczyk and\nSchmid (2004) is used to rectify local image patches (Figure 14.27d), from which both a\nSIFT descriptor and a 10 × 10 UV color histogram are computed and used for matching\nand recognition. Corresponding patches in different views of the same object, along with\ntheir local afﬁne deformations, are used to compute a 3D afﬁne model for the object using\nan extension of the factorization algorithm of Section 7.3, which can then be upgraded to a\nEuclidean reconstruction (Tomasi and Kanade 1992).\nAt recognition time, local Euclidean neighborhood constraints are used to ﬁlter potential\nmatches, in a manner analogous to the afﬁne geometric constraints used by Lowe (2004) and\nObdrˇz´alek and Matas (2006). Figure 14.27 shows the results of recognizing ﬁve objects in a\ncluttered scene using this approach.\nWhile feature-based approaches are normally used to detect and localize known objects in\nscenes, it is also possible to get pixel-level segmentations of the scene based on such matches.\nFerrari, Tuytelaars, and Van Gool (2006b) describe such a system for simultaneously recog-\nnizing objects and segmenting scenes, while Kannala, Rahtu, Brandt et al. (2008) extend this\napproach to non-rigid deformations. Section 14.4.3 re-visits this topic of joint recognition\nand segmentation in the context of generic class (category) recognition.\n14.3.2 Large databases\nAs the number of objects in the database starts to grow large (say, millions of objects or video\nframes being searched), the time it takes to match a new image against each database image\ncan become prohibitive. Instead of comparing the images one at a time, techniques are needed\nto quickly narrow down the search to a few likely images, which can then be compared using\na more detailed and conservative veriﬁcation stage.\n688\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\nFigure 14.28\nVisual words obtained from elliptical normalized afﬁne regions (Sivic and\nZisserman 2009) c⃝2009 IEEE. (a) Afﬁne covariant regions are extracted from each frame\nand clustered into visual words using k-means clustering on SIFT descriptors with a learned\nMahalanobis distance. (b) The central patch in each grid shows the query and the surrounding\npatches show the nearest neighbors.\nThe problem of quickly ﬁnding partial matches between documents is one of the cen-\ntral problems in information retrieval (IR) (Baeza-Yates and Ribeiro-Neto 1999; Manning,\nRaghavan, and Sch¨utze 2008). The basic approach in fast document retrieval algorithms is to\npre-compute an inverted index between individual words and the documents (or Web pages\nor news stories) where they occur. More precisely, the frequency of occurrence of particular\nwords in a document is used to quickly ﬁnd documents that match a particular query.\nSivic and Zisserman (2009) were the ﬁrst to adapt IR techniques to visual search. In their\nVideo Google system, afﬁne invariant features are ﬁrst detected in all the video frames they\nare indexing using both shape adapted regions around Harris feature points (Schaffalitzky\nand Zisserman 2002; Mikolajczyk and Schmid 2004) and maximally stable extremal regions\n(Matas, Chum, Urban et al. 2004), (Section 4.1.1), as shown in Figure 14.28a. Next, 128-\ndimensional SIFT descriptors are computed from each normalized region (i.e., the patches\nshown in Figure 14.28b). Then, an average covariance matrix for these descriptors is es-\ntimated by accumulating statistics for features tracked from frame to frame. The feature\ndescriptor covariance Σ is then used to deﬁne a Mahalanobis distance between feature de-\nscriptors,\nd(x0, x1) = ∥x0 −x1∥Σ\n−1 =\nq\n(x0 −x1)T Σ−1(x0 −x1).\n(14.32)\nIn practice, feature descriptors are whitened by pre-multiplying them by Σ−1/2 so that Eu-\nclidean distances can be used.17\nIn order to apply fast information retrieval techniques to images, the high-dimensional\nfeature descriptors that occur in each image must ﬁrst be mapped into discrete visual words.\n17 Note that the computation of feature covariances from matched feature points is much more sensible than simply\nperforming a PCA on the descriptor space (Winder and Brown 2007). This corresponds roughly to the within-class\nscatter matrix (14.17) we studied in Section 14.2.1.\n14.3 Instance recognition\n689\n(a)\n(b)\nFigure 14.29 Matching based on visual words (Sivic and Zisserman 2009) c⃝2009 IEEE.\n(a) Features in the query region on the left are matched to corresponding features in a highly\nranked video frame. (b) Results after removing the stop words and ﬁltering the results using\nspatial consistency.\nSivic and Zisserman (2003) perform this mapping using k-means clustering, while some of\nnewer methods discussed below (Nist´er and Stew´enius 2006; Philbin, Chum, Isard et al.\n2007) use alternative techniques, such as vocabulary trees or randomized forests. To keep the\nclustering time manageable, only a few hundred video frames are used to learn the cluster\ncenters, which still involves estimating several thousand clusters from about 300,000 descrip-\ntors. At visual query time, each feature in a new query region (e.g., Figure 14.28a, which is\na cropped region from a larger video frame) is mapped to its corresponding visual word. To\nkeep very common patterns from contaminating the results, a stop list of the most common\nvisual words is created and such words are dropped from further consideration.\nOnce a query image or region has been mapped into its constituent visual words, likely\nmatching images or video frames must then be retrieved from the database. Information\nretrieval systems do this by matching word distributions (term frequencies) nid/nd between\nthe query and target documents, where nid is how many times word i occurs in document d,\nand nd is the total number of words in document d. In order to downweight words that occur\nfrequently and to focus the search on rarer (and hence, more informative) terms, an inverse\ndocument frequency weighting log N/Ni is applied, where Ni is the number of documents\ncontaining word i, and N is the total number of documents in the database. The combination\nof these two factors results in the term frequency-inverse document frequency (tf-idf) measure,\nti = nid\nnd\nlog N\nNi\n.\n(14.33)\nAt match time, each document (or query region) is represented by its tf-idf vector,\nt = (t1, . . . , ti, . . . tm).\n(14.34)\nThe similarity between two documents is measured by the dot product between their corre-\nsponding normalized vectors ˆt = t/∥t∥, which means that their dissimilarity is proportional\nto their Euclidean distance. In their journal paper, Sivic and Zisserman (2009) compare this",
  "image_path": "page_710.jpg",
  "pages": [
    709,
    710,
    711
  ]
}