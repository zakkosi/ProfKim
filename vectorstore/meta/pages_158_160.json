{
  "doc_id": "pages_158_160",
  "text": "136\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n• Real images: The Fourier transform of a real-valued signal is symmetric around the\norigin. This fact can be used to save space and to double the speed of image FFTs\nby packing alternating scanlines into the real and imaginary parts of the signal being\ntransformed.\n• Parseval’s Theorem: The energy (sum of squared values) of a signal is the same as\nthe energy of its Fourier transform.\nAll of these properties are relatively straightforward to prove (see Exercise 3.15) and they will\ncome in handy later in the book, e.g., when designing optimum Wiener ﬁlters (Section 3.4.3)\nor performing fast image correlations (Section 8.1.2).\n3.4.1 Fourier transform pairs\nNow that we have these properties in place, let us look at the Fourier transform pairs of some\ncommonly occurring ﬁlters and signals, as listed in Table 3.2. In more detail, these pairs are\nas follows:\n• Impulse: The impulse response has a constant (all frequency) transform.\n• Shifted impulse: The shifted impulse has unit magnitude and linear phase.\n• Box ﬁlter: The box (moving average) ﬁlter\nbox(x) =\n(\n1\nif |x| ≤1\n0\nelse\n(3.55)\nhas a sinc Fourier transform,\nsinc(ω) = sin ω\nω\n,\n(3.56)\nwhich has an inﬁnite number of side lobes. Conversely, the sinc ﬁlter is an ideal low-\npass ﬁlter. For a non-unit box, the width of the box a and the spacing of the zero\ncrossings in the sinc 1/a are inversely proportional.\n• Tent: The piecewise linear tent function,\ntent(x) = max(0, 1 −|x|),\n(3.57)\nhas a sinc2 Fourier transform.\n• Gaussian: The (unit area) Gaussian of width σ,\nG(x; σ) =\n1\n√\n2πσ e−x2\n2σ2 ,\n(3.58)\nhas a (unit height) Gaussian of width σ−1 as its Fourier transform.\n3.4 Fourier transforms\n137\nName\nSignal\nTransform\nimpulse\n-0.5\n0.0\n0.5\n1.0\n-1.0000\n-0.5000\n0.0000\n0.5000\n1.0000\nδ(x)\n⇔\n1\n-0.5\n0.0\n0.5\n1.0\n-0.5000\n0.0000\n0.5000\nshifted\nimpulse\n-0.5\n0.0\n0.5\n1.0\n-1.0000\n-0.5000\n0.0000\n0.5000\n1.0000\nδ(x −u)\n⇔\ne−jωu\n-0.5\n0.0\n0.5\n1.0\n-0.5000\n0.0000\n0.5000\nbox ﬁlter\n-0.5\n0.0\n0.5\n1.0\n-1.0000\n-0.5000\n0.0000\n0.5000\n1.0000\nbox(x/a)\n⇔\nasinc(aω)\n-0.5\n0.0\n0.5\n1.0\n-0.5000\n0.0000\n0.5000\ntent\n-0.5\n0.0\n0.5\n1.0\n-1.0000\n-0.5000\n0.0000\n0.5000\n1.0000\ntent(x/a)\n⇔\nasinc2(aω)\n-0.5\n0.0\n0.5\n1.0\n-0.5000\n0.0000\n0.5000\nGaussian\n-0.5\n0.0\n0.5\n1.0\n-1.0000\n-0.5000\n0.0000\n0.5000\n1.0000\nG(x; σ)\n⇔\n√\n2π\nσ G(ω; σ−1)\n-0.5\n0.0\n0.5\n1.0\n-0.5000\n0.0000\n0.5000\nLaplacian\nof Gaussian\n-0.5\n0.0\n0.5\n1.0\n-1.0000\n-0.5000\n0.0000\n0.5000\n1.0000\n( x2\nσ4 −\n1\nσ2 )G(x; σ)\n⇔\n−\n√\n2π\nσ ω2G(ω; σ−1)\n-0.5\n0.0\n0.5\n1.0\n-0.5000\n0.0000\n0.5000\nGabor\n-0.5\n0.0\n0.5\n1.0\n-1.0000\n-0.5000\n0.0000\n0.5000\n1.0000\ncos(ω0x)G(x; σ)\n⇔\n√\n2π\nσ G(ω ± ω0; σ−1)\n-0.5\n0.0\n0.5\n1.0\n-0.5000\n0.0000\n0.5000\nunsharp\nmask\n-0.5\n0.0\n0.5\n1.0\n1.5\n-1.0000\n-0.5000\n0.0000\n0.5000\n1.0000\n(1 + γ)δ(x)\n−γG(x; σ)\n⇔\n(1 + γ)−\n√\n2πγ\nσ\nG(ω; σ−1)\n-0.5\n0.0\n0.5\n1.0\n1.5\n-0.5000\n0.0000\n0.5000\nwindowed\nsinc\n-0.5\n0.0\n0.5\n1.0\n-1.0000\n-0.5000\n0.0000\n0.5000\n1.0000\nrcos(x/(aW))\nsinc(x/a)\n⇔\n(see Figure 3.29)\n-0.5\n0.0\n0.5\n1.0\n-0.5000\n0.0000\n0.5000\nTable 3.2 Some useful (continuous) Fourier transform pairs: The dashed line in the Fourier\ntransform of the shifted impulse indicates its (linear) phase. All other transforms have zero\nphase (they are real-valued). Note that the ﬁgures are not necessarily drawn to scale but\nare drawn to illustrate the general shape and characteristics of the ﬁlter or its response. In\nparticular, the Laplacian of Gaussian is drawn inverted because it resembles more a “Mexican\nhat”, as it is sometimes called.\n138\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n• Laplacian of Gaussian: The second derivative of a Gaussian of width σ,\nLoG(x; σ) = (x2\nσ4 −1\nσ2 )G(x; σ)\n(3.59)\nhas a band-pass response of\n−\n√\n2π\nσ\nω2G(ω; σ−1)\n(3.60)\nas its Fourier transform.\n• Gabor: The even Gabor function, which is the product of a cosine of frequency ω0 and\na Gaussian of width σ, has as its transform the sum of the two Gaussians of width σ−1\ncentered at ω = ±ω0. The odd Gabor function, which uses a sine, is the difference\nof two such Gaussians. Gabor functions are often used for oriented and band-pass\nﬁltering, since they can be more frequency selective than Gaussian derivatives.\n• Unsharp mask: The unsharp mask introduced in (3.22) has as its transform a unit\nresponse with a slight boost at higher frequencies.\n• Windowed sinc: The windowed (masked) sinc function shown in Table 3.2 has a re-\nsponse function that approximates an ideal low-pass ﬁlter better and better as additional\nside lobes are added (W is increased). Figure 3.29 shows the shapes of these such ﬁl-\nters along with their Fourier transforms. For these examples, we use a one-lobe raised\ncosine,\nrcos(x) = 1\n2(1 + cos πx)box(x),\n(3.61)\nalso known as the Hann window, as the windowing function. Wolberg (1990) and\nOppenheim, Schafer, and Buck (1999) discuss additional windowing functions, which\ninclude the Lanczos window, the positive ﬁrst lobe of a sinc function.\nWe can also compute the Fourier transforms for the small discrete kernels shown in Fig-\nure 3.14 (see Table 3.3). Notice how the moving average ﬁlters do not uniformly dampen\nhigher frequencies and hence can lead to ringing artifacts. The binomial ﬁlter (Gomes and\nVelho 1997) used as the “Gaussian” in Burt and Adelson’s (1983a) Laplacian pyramid (see\nSection 3.5), does a decent job of separating the high and low frequencies, but still leaves\na fair amount of high-frequency detail, which can lead to aliasing after downsampling. The\nSobel edge detector at ﬁrst linearly accentuates frequencies, but then decays at higher fre-\nquencies, and hence has trouble detecting ﬁne-scale edges, e.g., adjacent black and white\ncolumns. We look at additional examples of small kernel Fourier transforms in Section 3.5.2,\nwhere we study better kernels for pre-ﬁltering before decimation (size reduction).",
  "image_path": "page_159.jpg",
  "pages": [
    158,
    159,
    160
  ]
}