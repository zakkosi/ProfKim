{
  "doc_id": "pages_329_331",
  "text": "5.7 Exercises\n307\n1. Decide whether to use a large number of contour points or a smaller number interpo-\nlated with a B-spline.\n2. Deﬁne your internal smoothness energy function and decide what image-based attrac-\ntive forces to use.\n3. At each iteration, set up the banded linear system of equations (quadratic energy func-\ntion) and solve it using banded Cholesky factorization (Appendix A.4).\nEx 5.3: Intelligent scissors\nImplement the intelligent scissors (live-wire) interactive seg-\nmentation algorithm (Mortensen and Barrett 1995) and design a graphical user interface\n(GUI) to let you draw such curves over an image and use them for segmentation.\nEx 5.4: Region segmentation\nImplement one of the region segmentation algorithms de-\nscribed in this chapter. Some popular segmentation algorithms include:\n• k-means (Section 5.3.1);\n• mixtures of Gaussians (Section 5.3.1);\n• mean shift (Section 5.3.2) and Exercise 5.5;\n• normalized cuts (Section 5.4);\n• similarity graph-based segmentation (Section 5.2.4);\n• binary Markov random ﬁelds solved using graph cuts (Section 5.5).\nApply your region segmentation to a video sequence and use it to track moving regions\nfrom frame to frame.\nAlternatively, test out your segmentation algorithm on the Berkeley segmentation database\n(Martin, Fowlkes, Tal et al. 2001).\nEx 5.5: Mean shift\nDevelop a mean-shift segmentation algorithm for color images (Co-\nmaniciu and Meer 2002).\n1. Convert your image to L*a*b* space, or keep the original RGB colors, and augment\nthem with the pixel (x, y) locations.\n2. For every pixel (L, a, b, x, y), compute the weighted mean of its neighbors using either\na unit ball (Epanechnikov kernel) or ﬁnite-radius Gaussian, or some other kernel of\nyour choosing. Weight the color and spatial scales differently, e.g., using values of\n(hs, hr, M) = (16, 19, 40) as shown in Figure 5.18.\n308\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n3. Replace the current value with this weighted mean and iterate until either the motion is\nbelow a threshold or a ﬁnite number of steps has been taken.\n4. Cluster all ﬁnal values (modes) that are within a threshold, i.e., ﬁnd the connected\ncomponents. Since each pixel is associated with a ﬁnal mean-shift (mode) value, this\nresults in an image segmentation, i.e., each pixel is labeled with its ﬁnal component.\n5. (Optional) Use a random subset of the pixels as starting points and ﬁnd which com-\nponent each unlabeled pixel belongs to, either by ﬁnding its nearest neighbor or by\niterating the mean shift until it ﬁnds a neighboring track of mean-shift values. Describe\nthe data structures you use to make this efﬁcient.\n6. (Optional) Mean shift divides the kernel density function estimate by the local weight-\ning to obtain a step size that is guaranteed to converge but may be slow. Use an alter-\nnative step size estimation algorithm from the optimization literature to see if you can\nmake the algorithm converge faster.\nChapter 6\nFeature-based alignment\n6.1\n2D and 3D feature-based alignment\n. . . . . . . . . . . . . . . . . . . . . . 311\n6.1.1\n2D alignment using least squares . . . . . . . . . . . . . . . . . . . . 312\n6.1.2\nApplication: Panography . . . . . . . . . . . . . . . . . . . . . . . . 314\n6.1.3\nIterative algorithms . . . . . . . . . . . . . . . . . . . . . . . . . . . 315\n6.1.4\nRobust least squares and RANSAC\n. . . . . . . . . . . . . . . . . . 318\n6.1.5\n3D alignment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 320\n6.2\nPose estimation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321\n6.2.1\nLinear algorithms . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322\n6.2.2\nIterative algorithms . . . . . . . . . . . . . . . . . . . . . . . . . . . 324\n6.2.3\nApplication: Augmented reality . . . . . . . . . . . . . . . . . . . . 326\n6.3\nGeometric intrinsic calibration . . . . . . . . . . . . . . . . . . . . . . . . . 327\n6.3.1\nCalibration patterns . . . . . . . . . . . . . . . . . . . . . . . . . . . 327\n6.3.2\nVanishing points\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . 329\n6.3.3\nApplication: Single view metrology . . . . . . . . . . . . . . . . . . 331\n6.3.4\nRotational motion\n. . . . . . . . . . . . . . . . . . . . . . . . . . . 332\n6.3.5\nRadial distortion\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . 334\n6.4\nAdditional reading\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335\n6.5\nExercises\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 336",
  "image_path": "page_330.jpg",
  "pages": [
    329,
    330,
    331
  ]
}