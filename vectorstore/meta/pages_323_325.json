{
  "doc_id": "pages_323_325",
  "text": "5.5 Graph cuts and energy-based methods\n301\nwritten (c.f. Equations (3.100) and (3.108–3.113)) as\nE(f) =\nX\ni,j\nEr(i, j) + Eb(i, j),\n(5.50)\nwhere the region term\nEr(i, j) = ES(I(i, j); R(f(i, j)))\n(5.51)\nis the negative log likelihood that pixel intensity (or color) I(i, j) is consistent with the statis-\ntics of region R(f(i, j)) and the boundary term\nEb(i, j) = sx(i, j)δ(f(i, j) −f(i + 1, j)) + sy(i, j)δ(f(i, j) −f(i, j + 1))\n(5.52)\nmeasures the inconsistency between N4 neighbors modulated by local horizontal and vertical\nsmoothness terms sx(i, j) and sy(i, j).\nRegion statistics can be something as simple as the mean gray level or color (Leclerc\n1989), in which case\nES(I; µk) = ∥I −µk∥2.\n(5.53)\nAlternatively, they can be more complex, such as region intensity histograms (Boykov and\nJolly 2001) or color Gaussian mixture models (Rother, Kolmogorov, and Blake 2004). For\nsmoothness (boundary) terms, it is common to make the strength of the smoothness sx(i, j)\ninversely proportional to the local edge strength (Boykov, Veksler, and Zabih 2001).\nOriginally, energy-based segmentation problems were optimized using iterative gradient\ndescent techniques, which were slow and prone to getting trapped in local minima. Boykov\nand Jolly (2001) were the ﬁrst to apply the binary MRF optimization algorithm developed by\nGreig, Porteous, and Seheult (1989) to binary object segmentation.\nIn this approach, the user ﬁrst delineates pixels in the background and foreground regions\nusing a few strokes of an image brush (Figure 3.61). These pixels then become the seeds that\ntie nodes in the S–T graph to the source and sink labels S and T (Figure 5.23a). Seed pixels\ncan also be used to estimate foreground and background region statistics (intensity or color\nhistograms).\nThe capacities of the other edges in the graph are derived from the region and boundary\nenergy terms, i.e., pixels that are more compatible with the foreground or background region\nget stronger connections to the respective source or sink; adjacent pixels with greater smooth-\nness also get stronger links. Once the minimum-cut/maximum-ﬂow problem has been solved\nusing a polynomial time algorithm (Goldberg and Tarjan 1988; Boykov and Kolmogorov\n2004), pixels on either side of the computed cut are labeled according to the source or sink to\nwhich they remain connected (Figure 5.23b). While graph cuts is just one of several known\ntechniques for MRF energy minimization (Appendix B.5.4), it is still the one most commonly\nused for solving binary MRF problems.\n302\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n  Object\nterminal\n  terminal\nBackground \np\nq\nr\nw\nv\nS\nT\nBackground \n  Object\n  terminal\nterminal\np\nq\nr\nw\nv\nS\nT\ncut\n(a)\n(b)\nFigure 5.23 Graph cuts for region segmentation (Boykov and Jolly 2001) c⃝2001 IEEE: (a)\nthe energy function is encoded as a maximum ﬂow problem; (b) the minimum cut determines\nthe region boundary.\n(a)\n(b)\n(c)\nFigure 5.24\nGrabCut image segmentation (Rother, Kolmogorov, and Blake 2004) c⃝2004\nACM: (a) the user draws a bounding box in red; (b) the algorithm guesses color distributions\nfor the object and background and performs a binary segmentation; (c) the process is repeated\nwith better region statistics.\nThe basic binary segmentation algorithm of Boykov and Jolly (2001) has been extended\nin a number of directions. The GrabCut system of Rother, Kolmogorov, and Blake (2004)\niteratively re-estimates the region statistics, which are modeled as a mixtures of Gaussians in\ncolor space. This allows their system to operate given minimal user input, such as a single\nbounding box (Figure 5.24a)—the background color model is initialized from a strip of pixels\naround the box outline. (The foreground color model is initialized from the interior pixels,\nbut quickly converges to a better estimate of the object.) The user can also place additional\nstrokes to reﬁne the segmentation as the solution progresses. In more recent work, Cui, Yang,\nWen et al. (2008) use color and edge models derived from previous segmentations of similar\nobjects to improve the local models used in GrabCut.\nAnother major extension to the original binary segmentation formulation is the addition of\n5.5 Graph cuts and energy-based methods\n303\nFigure 5.25\nSegmentation with a directed graph cut (Boykov and Funka-Lea 2006) c⃝2006\nSpringer: (a) directed graph; (b) image with seed points; (c) the undirected graph incorrectly\ncontinues the boundary along the bright object; (d) the directed graph correctly segments the\nlight gray region from its darker surround.\ndirected edges, which allows boundary regions to be oriented, e.g., to prefer light to dark tran-\nsitions or vice versa (Kolmogorov and Boykov 2005). Figure 5.25 shows an example where\nthe directed graph cut correctly segments the light gray liver from its dark gray surround. The\nsame approach can be used to measure the ﬂux exiting a region, i.e., the signed gradient pro-\njected normal to the region boundary. Combining oriented graphs with larger neighborhoods\nenables approximating continuous problems such as those traditionally solved using level sets\nin the globally optimal graph cut framework (Boykov and Kolmogorov 2003; Kolmogorov\nand Boykov 2005).\nEven more recent developments in graph cut-based segmentation techniques include the\naddition of connectivity priors to force the foreground to be in a single piece (Vicente, Kol-\nmogorov, and Rother 2008) and shape priors to use knowledge about an object’s shape during\nthe segmentation process (Lempitsky and Boykov 2007; Lempitsky, Blake, and Rother 2008).\nWhile optimizing the binary MRF energy (5.50) requires the use of combinatorial op-\ntimization techniques, such as maximum ﬂow, an approximate solution can be obtained by\nconverting the binary energy terms into quadratic energy terms deﬁned over a continuous\n[0, 1] random ﬁeld, which then becomes a classical membrane-based regularization problem\n(3.100–3.102). The resulting quadratic energy function can then be solved using standard\nlinear system solvers (3.102–3.103), although if speed is an issue, you should use multigrid\nor one of its variants (Appendix A.5).\nOnce the continuous solution has been computed, it\ncan be thresholded at 0.5 to yield a binary segmentation.\nThe [0, 1] continuous optimization problem can also be interpreted as computing the prob-",
  "image_path": "page_324.jpg",
  "pages": [
    323,
    324,
    325
  ]
}