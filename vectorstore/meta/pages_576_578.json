{
  "doc_id": "pages_576_578",
  "text": "554\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n2003; Tappen and Freeman 2003). Appendix B.5 and a recent survey paper on MRF inference\n(Szeliski, Zabih, Scharstein et al. 2008) discuss and compare such techniques in more detail.\nWhile global optimization techniques currently produce the best stereo matching results,\nthere are some alternative approaches worth studying.\nCooperative algorithms.\nCooperative algorithms, inspired by computational models of hu-\nman stereo vision, were among the earliest methods proposed for disparity computation (Dev\n1974; Marr and Poggio 1976; Marroquin 1983; Szeliski and Hinton 1985; Zitnick and Kanade\n2000). Such algorithms iteratively update disparity estimates using non-linear operations that\nresult in an overall behavior similar to global optimization algorithms. In fact, for some of\nthese algorithms, it is possible to explicitly state a global function that is being minimized\n(Scharstein and Szeliski 1998).\nCoarse-to-ﬁne and incremental warping.\nMost of today’s best algorithms ﬁrst enumer-\nate all possible matches at all possible disparities and then select the best set of matches in\nsome way. Faster approaches can sometimes be obtained using methods inspired by classic\n(inﬁnitesimal) optical ﬂow computation. Here, images are successively warped and disparity\nestimates incrementally updated until a satisfactory registration is achieved. These techniques\nare most often implemented within a coarse-to-ﬁne hierarchical reﬁnement framework (Quam\n1984; Bergen, Anandan, Hanna et al. 1992; Barron, Fleet, and Beauchemin 1994; Szeliski\nand Coughlan 1997).\n11.5.1 Dynamic programming\nA different class of global optimization algorithm is based on dynamic programming. While\nthe 2D optimization of Equation (11.8) can be shown to be NP-hard for common classes\nof smoothness functions (Veksler 1999), dynamic programming can ﬁnd the global mini-\nmum for independent scanlines in polynomial time. Dynamic programming was ﬁrst used\nfor stereo vision in sparse, edge-based methods (Baker and Binford 1981; Ohta and Kanade\n1985). More recent approaches have focused on the dense (intensity-based) scanline match-\ning problem (Belhumeur 1996; Geiger, Ladendorf, and Yuille 1992; Cox, Hingorani, Rao et\nal. 1996; Bobick and Intille 1999; Birchﬁeld and Tomasi 1999). These approaches work by\ncomputing the minimum-cost path through the matrix of all pairwise matching costs between\ntwo corresponding scanlines, i.e., through a horizontal slice of the DSI. Partial occlusion is\nhandled explicitly by assigning a group of pixels in one image to a single pixel in the other\nimage. Figure 11.11 schematically shows how DP works, while Figure 11.5f shows a real\nDSI slice over which the DP is applied.\n11.5 Global optimization\n555\nc\nd\ne\nf\ng\nk\na\nLeft scanline\ni\nRight scanline\na\nc\nf\ng\nj\nk\nh\nb\nM\nL\nR\nR\nR\nM\nL\nL\nM\nM\nM\nk\nd\n1\n2\n3\n2\n8\n10\nm\n1\n2\n3\n4\n0\nLeft\nn\n1\n2\n3\n4\nRight\nCyclopean\nDisparity\n6\n4\n(a)\n(b)\nFigure 11.11 Stereo matching using dynamic programming, as illustrated by (a) Scharstein\nand Szeliski (2002) c⃝2002 Springer and (b) Kolmogorov, Criminisi, Blake et al. (2006). c⃝\n2006 IEEE. For each pair of corresponding scanlines, a minimizing path through the matrix\nof all pairwise matching costs (DSI) is selected. Lowercase letters (a–k) symbolize the inten-\nsities along each scanline. Uppercase letters represent the selected path through the matrix.\nMatches are indicated by M, while partially occluded points (which have a ﬁxed cost) are\nindicated by L or R, corresponding to points only visible in the left or right images, respec-\ntively. Usually, only a limited disparity range is considered (0–4 in the ﬁgure, indicated by\nthe non-shaded squares). The representation in (a) allows for diagonal moves while the rep-\nresentation in (b) does not. Note that these diagrams, which use the Cyclopean representation\nof depth, i.e., depth relative to a camera between the two input cameras, show an “unskewed”\nx-d slice through the DSI.\nTo implement dynamic programming for a scanline y, each entry (state) in a 2D cost\nmatrix D(m, n) is computed by combining its DSI value\nC′(m, n) = C(m + n, m −n, y)\n(11.12)\nwith one of its predecessor cost values.\nUsing the representation shown in Figure 11.11a,\nwhich allows for “diagonal” moves, the aggregated match costs can be recursively computed\nas\nD(m, n, M)\n=\nmin(D(m−1, n−1, M), D(m−1, n, L), D(m−1, n−1, R)) + C′(m, n)\nD(m, n, L)\n=\nmin(D(m−1, n−1, M), D(m−1, n, L)) + O\n(11.13)\nD(m, n, R)\n=\nmin(D(m, n−1, M), D(m, n−1, R)) + O,\nwhere O is a per-pixel occlusion cost. The aggregation rules corresponding to Figure 11.11b\nare given by Kolmogorov, Criminisi, Blake et al. (2006), who also use a two-state foreground–\nbackground model for bi-layer segmentation.\n556\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nProblems with dynamic programming stereo include the selection of the right cost for\noccluded pixels and the difﬁculty of enforcing inter-scanline consistency, although several\nmethods propose ways of addressing the latter (Ohta and Kanade 1985; Belhumeur 1996;\nCox, Hingorani, Rao et al. 1996; Bobick and Intille 1999; Birchﬁeld and Tomasi 1999;\nKolmogorov, Criminisi, Blake et al. 2006). Another problem is that the dynamic program-\nming approach requires enforcing the monotonicity or ordering constraint (Yuille and Poggio\n1984). This constraint requires that the relative ordering of pixels on a scanline remain the\nsame between the two views, which may not be the case in scenes containing narrow fore-\nground objects.\nAn alternative to traditional dynamic programming, introduced by Scharstein and Szeliski\n(2002), is to neglect the vertical smoothness constraints in (11.10) and simply optimize in-\ndependent scanlines in the global energy function (11.8), which can easily be done using a\nrecursive algorithm,\nD(x, y, d) = C(x, y, d) + min\nd′ {D(x −1, y, d′) + ρd(d −d′)} .\n(11.14)\nThe advantage of this scanline optimization algorithm is that it computes the same represen-\ntation and minimizes a reduced version of the same energy function as the full 2D energy\nfunction (11.8). Unfortunately, it still suffers from the same streaking artifacts as dynamic\nprogramming.\nA much better approach is to evaluate the cumulative cost function (11.14) from multiple\ndirections, e.g, from the eight cardinal directions, N, E, W, S, NE, SE, SW, NW (Hirschm¨uller\n2008). The resulting semi-global optimization performs quite well and is extremely efﬁcient\nto implement.\nEven though dynamic programming and scanline optimization algorithms do not gen-\nerally produce the most accurate stereo reconstructions, when combined with sophisticated\naggregation strategies, they can produce very fast and high-quality results.\n11.5.2 Segmentation-based techniques\nWhile most stereo matching algorithms perform their computations on a per-pixel basis, some\nof the more recent techniques ﬁrst segment the images into regions and then try to label each\nregion with a disparity.\nFor example, Tao, Sawhney, and Kumar (2001) segment the reference image, estimate\nper-pixel disparities using a local technique, and then do local plane ﬁts inside each segment\nbefore applying smoothness constraints between neighboring segments. Zitnick, Kang, Uyt-\ntendaele et al. (2004) and Zitnick and Kang (2007) use over-segmentation to mitigate initial\nbad segmentations. After a set of initial cost values for each segment has been stored into\na disparity space distribution (DSD), iterative relaxation (or loopy belief propagation, in the",
  "image_path": "page_577.jpg",
  "pages": [
    576,
    577,
    578
  ]
}