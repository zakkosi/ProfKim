{
  "doc_id": "pages_308_310",
  "text": "286\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n5.2.2 Region splitting (divisive clustering)\nSplitting the image into successively ﬁner regions is one of the oldest techniques in computer\nvision. Ohlander, Price, and Reddy (1978) present such a technique, which ﬁrst computes a\nhistogram for the whole image and then ﬁnds a threshold that best separates the large peaks\nin the histogram. This process is repeated until regions are either fairly uniform or below a\ncertain size.\nMore recent splitting algorithms often optimize some metric of intra-region similarity and\ninter-region dissimilarity. These are covered in Sections 5.4 and 5.5.\n5.2.3 Region merging (agglomerative clustering)\nRegion merging techniques also date back to the beginnings of computer vision. Brice and\nFennema (1970) use a dual grid for representing boundaries between pixels and merge re-\ngions based on their relative boundary lengths and the strength of the visible edges at these\nboundaries.\nIn data clustering, algorithms can link clusters together based on the distance between\ntheir closest points (single-link clustering), their farthest points (complete-link clustering), or\nsomething in between (Jain, Topchy, Law et al. 2004). Kamvar, Klein, and Manning (2002)\nprovide a probabilistic interpretation of these algorithms and show how additional models\ncan be incorporated within this framework.\nA very simple version of pixel-based merging combines adjacent regions whose average\ncolor difference is below a threshold or whose regions are too small. Segmenting the image\ninto such superpixels (Mori, Ren, Efros et al. 2004), which are not semantically meaningful,\ncan be a useful pre-processing stage to make higher-level algorithms such as stereo matching\n(Zitnick, Kang, Uyttendaele et al. 2004; Taguchi, Wilburn, and Zitnick 2008), optic ﬂow\n(Zitnick, Jojic, and Kang 2005; Brox, Bregler, and Malik 2009), and recognition (Mori, Ren,\nEfros et al. 2004; Mori 2005; Gu, Lim, Arbelaez et al. 2009; Lim, Arbel´aez, Gu et al. 2009)\nboth faster and more robust.\n5.2.4 Graph-based segmentation\nWhile many merging algorithms simply apply a ﬁxed rule that groups pixels and regions\ntogether, Felzenszwalb and Huttenlocher (2004b) present a merging algorithm that uses rel-\native dissimilarities between regions to determine which ones should be merged; it produces\nan algorithm that provably optimizes a global grouping metric. They start with a pixel-to-\npixel dissimilarity measure w(e) that measures, for example, intensity differences between\nN8 neighbors. (Alternatively, they can use the joint feature space distances (5.42) introduced\nby Comaniciu and Meer (2002), which we discuss in Section 5.3.2.)\n5.2 Split and merge\n287\n(a)\n(b)\n(c)\nFigure 5.14\nGraph-based merging segmentation (Felzenszwalb and Huttenlocher 2004b)\nc⃝2004 Springer: (a) input grayscale image that is successfully segmented into three regions\neven though the variation inside the smaller rectangle is larger than the variation across the\nmiddle edge; (b) input grayscale image; (c) resulting segmentation using an N8 pixel neigh-\nborhood.\nFor any region R, its internal difference is deﬁned as the largest edge weight in the re-\ngion’s minimum spanning tree,\nInt(R) =\nmin\ne∈MST (R) w(e).\n(5.20)\nFor any two adjacent regions with at least one edge connecting their vertices, the difference\nbetween these regions is deﬁned as the minimum weight edge connecting the two regions,\nDif (R1, R2) =\nmin\ne=(v1,v2)|v1∈R1,v2∈R2 w(e).\n(5.21)\nTheir algorithm merges any two adjacent regions whose difference is smaller than the mini-\nmum internal difference of these two regions,\nMInt(R1, R2) = min(Int(R1) + τ(R1), Int(R2) + τ(R2)),\n(5.22)\nwhere τ(R) is a heuristic region penalty that Felzenszwalb and Huttenlocher (2004b) set to\nk/|R|, but which can be set to any application-speciﬁc measure of region goodness.\nBy merging regions in decreasing order of the edges separating them (which can be efﬁ-\nciently evaluated using a variant of Kruskal’s minimum spanning tree algorithm), they prov-\nably produce segmentations that are neither too ﬁne (there exist regions that could have been\nmerged) nor too coarse (there are regions that could be split without being mergeable). For\nﬁxed-size pixel neighborhoods, the running time for this algorithm is O(N log N), where N\nis the number of image pixels, which makes it one of the fastest segmentation algorithms\n(Paris and Durand 2007). Figure 5.14 shows two examples of images segmented using their\ntechnique.\n288\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\n(d)\nFigure 5.15\nCoarse to ﬁne node aggregation in segmentation by weighted aggregation\n(SWA) (Sharon, Galun, Sharon et al. 2006) c⃝2006 Macmillan Publishers Ltd [Nature]: (a)\noriginal gray-level pixel grid; (b) inter-pixel couplings, where thicker lines indicate stronger\ncouplings; (c) after one level of coarsening, where each original pixel is strongly coupled to\none of the coarse-level nodes; (d) after two levels of coarsening.\n5.2.5 Probabilistic aggregation\nAlpert, Galun, Basri et al. (2007) develop a probabilistic merging algorithm based on two\ncues, namely gray-level similarity and texture similarity. The gray-level similarity between\nregions Ri and Rj is based on the minimal external difference from other neighboring regions,\nσ+\nlocal = min(∆+\ni , ∆+\nj ),\n(5.23)\nwhere ∆+\ni = mink |∆ik| and ∆ik is the difference in average intensities between regions Ri\nand Rk. This is compared to the average intensity difference,\nσ−\nlocal =\n∆−\ni + ∆−\nj\n2\n,\n(5.24)\nwhere ∆−\ni = P\nk(τik∆ik)/ P\nk(τik) and τik is the boundary length between regions Ri and\nRk. The texture similarity is deﬁned using relative differences between histogram bins of\nsimple oriented Sobel ﬁlter responses. The pairwise statistics σ+\nlocal and σ−\nlocal are used to\ncompute the likelihoods pij that two regions should be merged. (See the paper by Alpert,\nGalun, Basri et al. (2007) for more details.)\nMerging proceeds in a hierarchical fashion inspired by algebraic multigrid techniques\n(Brandt 1986; Briggs, Henson, and McCormick 2000) and previously used by Alpert, Galun,\nBasri et al. (2007) in their segmentation by weighted aggregation (SWA) algorithm (Sharon,\nGalun, Sharon et al. 2006), which we discuss in Section 5.4. A subset of the nodes C ⊂V\nthat are (collectively) strongly coupled to all of the original nodes (regions) are used to deﬁne\nthe problem at a coarser scale (Figure 5.15), where strong coupling is deﬁned as\nP\nj∈C pij\nP\nj∈V pij\n> φ,\n(5.25)",
  "image_path": "page_309.jpg",
  "pages": [
    308,
    309,
    310
  ]
}