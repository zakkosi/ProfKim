{
  "doc_id": "pages_061_063",
  "text": "2.1 Geometric primitives and transformations\n39\nTransformation\nMatrix\n# DoF\nPreserves\nIcon\ntranslation\nh\nI\nt\ni\n3×4\n3\norientation\nrigid (Euclidean)\nh\nR\nt\ni\n3×4\n6\nlengths\n\u001a\n\u001a\n\u001a\u001a\nS\nS S\nS\nsimilarity\nh\nsR\nt\ni\n3×4\n7\nangles\n\u001a\n\u001a\nS S\nafﬁne\nh\nA\ni\n3×4\n12\nparallelism\n\u0002\u0002\n\u0002\u0002\nprojective\nh\n˜\nH\ni\n4×4\n15\nstraight lines\n``\n  \nTable 2.2 Hierarchy of 3D coordinate transformations. Each transformation also preserves\nthe properties listed in the rows below it, i.e., similarity preserves not only angles but also\nparallelism and straight lines. The 3 × 4 matrices are extended with a fourth [0T 1] row to\nform a full 4 × 4 matrix for homogeneous coordinate transformations. The mnemonic icons\nare drawn in 2D but are meant to suggest transformations occurring in a full 3D cube.\nBilinear interpolant.\nThis eight-parameter transform (Wolberg 1990),\nx′\n=\na0 + a1x + a2y + a6xy\ny′\n=\na3 + a4x + a5y + a7xy,\ncan be used to interpolate the deformation due to the motion of the four corner points of\na square. (In fact, it can interpolate the motion of any four non-collinear points.) While\nthe deformation is linear in the motion parameters, it does not generally preserve straight\nlines (only lines parallel to the square axes). However, it is often quite useful, e.g., in the\ninterpolation of sparse grids using splines (Section 8.3).\n2.1.3 3D transformations\nThe set of three-dimensional coordinate transformations is very similar to that available for\n2D transformations and is summarized in Table 2.2. As in 2D, these transformations form a\nnested set of groups. Hartley and Zisserman (2004, Section 2.4) give a more detailed descrip-\ntion of this hierarchy.\nTranslation.\n3D translations can be written as x′ = x + t or\nx′ =\nh\nI\nt\ni\n¯x\n(2.23)\n40\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nwhere I is the (3 × 3) identity matrix and 0 is the zero vector.\nRotation + translation.\nAlso known as 3D rigid body motion or the 3D Euclidean trans-\nformation, it can be written as x′ = Rx + t or\nx′ =\nh\nR\nt\ni\n¯x\n(2.24)\nwhere R is a 3 × 3 orthonormal rotation matrix with RRT = I and |R| = 1. Note that\nsometimes it is more convenient to describe a rigid motion using\nx′ = R(x −c) = Rx −Rc,\n(2.25)\nwhere c is the center of rotation (often the camera center).\nCompactly parameterizing a 3D rotation is a non-trivial task, which we describe in more\ndetail below.\nScaled rotation.\nThe 3D similarity transform can be expressed as x′ = sRx + t where s\nis an arbitrary scale factor. It can also be written as\nx′ =\nh\nsR\nt\ni\n¯x.\n(2.26)\nThis transformation preserves angles between lines and planes.\nAfﬁne.\nThe afﬁne transform is written as x′ = A¯x, where A is an arbitrary 3 × 4 matrix,\ni.e.,\nx′ =\n\n\na00\na01\na02\na03\na10\na11\na12\na13\na20\na21\na22\na23\n\n¯x.\n(2.27)\nParallel lines and planes remain parallel under afﬁne transformations.\nProjective.\nThis transformation, variously known as a 3D perspective transform, homogra-\nphy, or collineation, operates on homogeneous coordinates,\n˜x′ = ˜\nH ˜x,\n(2.28)\nwhere ˜\nH is an arbitrary 4 × 4 homogeneous matrix. As in 2D, the resulting homogeneous\ncoordinate ˜x′ must be normalized in order to obtain an inhomogeneous result x. Perspective\ntransformations preserve straight lines (i.e., they remain straight after the transformation).\n2.1 Geometric primitives and transformations\n41\nv\nv┴\nn^\nv×\nv║\nv××\nu┴\nu\nθ\nFigure 2.5 Rotation around an axis ˆn by an angle θ.\n2.1.4 3D rotations\nThe biggest difference between 2D and 3D coordinate transformations is that the parameter-\nization of the 3D rotation matrix R is not as straightforward but several possibilities exist.\nEuler angles\nA rotation matrix can be formed as the product of three rotations around three cardinal axes,\ne.g., x, y, and z, or x, y, and x. This is generally a bad idea, as the result depends on the\norder in which the transforms are applied. What is worse, it is not always possible to move\nsmoothly in the parameter space, i.e., sometimes one or more of the Euler angles change\ndramatically in response to a small change in rotation.1 For these reasons, we do not even\ngive the formula for Euler angles in this book—interested readers can look in other textbooks\nor technical reports (Faugeras 1993; Diebel 2006). Note that, in some applications, if the\nrotations are known to be a set of uni-axial transforms, they can always be represented using\nan explicit set of rigid transformations.\nAxis/angle (exponential twist)\nA rotation can be represented by a rotation axis ˆn and an angle θ, or equivalently by a 3D\nvector ω = θˆn. Figure 2.5 shows how we can compute the equivalent rotation. First, we\nproject the vector v onto the axis ˆn to obtain\nv∥= ˆn(ˆn · v) = (ˆnˆnT )v,\n(2.29)\nwhich is the component of v that is not affected by the rotation. Next, we compute the\nperpendicular residual of v from ˆn,\nv⊥= v −v∥= (I −ˆnˆnT )v.\n(2.30)\n1 In robotics, this is sometimes referred to as gimbal lock.",
  "image_path": "page_062.jpg",
  "pages": [
    61,
    62,
    63
  ]
}