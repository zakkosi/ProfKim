{
  "doc_id": "pages_154_156",
  "text": "132\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nthat avoid the creation of a potentially large re-coloring (equivalence) table. Well-debugged\nconnected component algorithms are also available in most image processing libraries.\nOnce a binary or multi-valued image has been segmented into its connected components,\nit is often useful to compute the area statistics for each individual region R. Such statistics\ninclude:\n• the area (number of pixels);\n• the perimeter (number of boundary pixels);\n• the centroid (average x and y values);\n• the second moments,\nM =\nX\n(x,y)∈R\n\"\nx −x\ny −y\n# h\nx −x\ny −y\ni\n,\n(3.46)\nfrom which the major and minor axis orientation and lengths can be computed using\neigenvalue analysis.7\nThese statistics can then be used for further processing, e.g., for sorting the regions by the area\nsize (to consider the largest regions ﬁrst) or for preliminary matching of regions in different\nimages.\n3.4 Fourier transforms\nIn Section 3.2, we mentioned that Fourier analysis could be used to analyze the frequency\ncharacteristics of various ﬁlters. In this section, we explain both how Fourier analysis lets us\ndetermine these characteristics (or equivalently, the frequency content of an image) and how\nusing the Fast Fourier Transform (FFT) lets us perform large-kernel convolutions in time that\nis independent of the kernel’s size. More comprehensive introductions to Fourier transforms\nare provided by Bracewell (1986); Glassner (1995); Oppenheim and Schafer (1996); Oppen-\nheim, Schafer, and Buck (1999).\nHow can we analyze what a given ﬁlter does to high, medium, and low frequencies? The\nanswer is to simply pass a sinusoid of known frequency through the ﬁlter and to observe by\nhow much it is attenuated. Let\ns(x) = sin(2πfx + φi) = sin(ωx + φi)\n(3.47)\n7 Moments can also be computed using Green’s theorem applied to the boundary pixels (Yang and Albregtsen\n1996).\n3.4 Fourier transforms\n133\ns(x)\no(x)\nh(x)\ns\no\nx\nx\nA\nφ\nFigure 3.24\nThe Fourier Transform as the response of a ﬁlter h(x) to an input sinusoid\ns(x) = ejωx yielding an output sinusoid o(x) = h(x) ∗s(x) = Aejωx+φ.\nbe the input sinusoid whose frequency is f, angular frequency is ω = 2πf, and phase is φi.\nNote that in this section, we use the variables x and y to denote the spatial coordinates of an\nimage, rather than i and j as in the previous sections. This is both because the letters i and j\nare used for the imaginary number (the usage depends on whether you are reading complex\nvariables or electrical engineering literature) and because it is clearer how to distinguish the\nhorizontal (x) and vertical (y) components in frequency space. In this section, we use the\nletter j for the imaginary number, since that is the form more commonly found in the signal\nprocessing literature (Bracewell 1986; Oppenheim and Schafer 1996; Oppenheim, Schafer,\nand Buck 1999).\nIf we convolve the sinusoidal signal s(x) with a ﬁlter whose impulse response is h(x),\nwe get another sinusoid of the same frequency but different magnitude A and phase φo,\no(x) = h(x) ∗s(x) = A sin(ωx + φo),\n(3.48)\nas shown in Figure 3.24. To see that this is the case, remember that a convolution can be\nexpressed as a weighted summation of shifted input signals (3.14) and that the summation of\na bunch of shifted sinusoids of the same frequency is just a single sinusoid at that frequency.8\nThe new magnitude A is called the gain or magnitude of the ﬁlter, while the phase difference\n∆φ = φo −φi is called the shift or phase.\nIn fact, a more compact notation is to use the complex-valued sinusoid\ns(x) = ejωx = cos ωx + j sin ωx.\n(3.49)\nIn that case, we can simply write,\no(x) = h(x) ∗s(x) = Aejωx+φ.\n(3.50)\n8 If h is a general (non-linear) transform, additional harmonic frequencies are introduced. This was traditionally\nthe bane of audiophiles, who insisted on equipment with no harmonic distortion. Now that digital audio has intro-\nduced pure distortion-free sound, some audiophiles are buying retro tube ampliﬁers or digital signal processors that\nsimulate such distortions because of their “warmer sound”.\n134\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nThe Fourier transform is simply a tabulation of the magnitude and phase response at each\nfrequency,\nH(ω) = F {h(x)} = Aejφ,\n(3.51)\ni.e., it is the response to a complex sinusoid of frequency ω passed through the ﬁlter h(x).\nThe Fourier transform pair is also often written as\nh(x) F\n↔H(ω).\n(3.52)\nUnfortunately, (3.51) does not give an actual formula for computing the Fourier transform.\nInstead, it gives a recipe, i.e., convolve the ﬁlter with a sinusoid, observe the magnitude and\nphase shift, repeat. Fortunately, closed form equations for the Fourier transform exist both in\nthe continuous domain,\nH(ω) =\nZ ∞\n−∞\nh(x)e−jωxdx,\n(3.53)\nand in the discrete domain,\nH(k) = 1\nN\nN−1\nX\nx=0\nh(x)e−j 2πkx\nN ,\n(3.54)\nwhere N is the length of the signal or region of analysis. These formulas apply both to ﬁlters,\nsuch as h(x), and to signals or images, such as s(x) or g(x).\nThe discrete form of the Fourier transform (3.54) is known as the Discrete Fourier Trans-\nform (DFT). Note that while (3.54) can be evaluated for any value of k, it only makes sense\nfor values in the range k ∈[−N\n2 , N\n2 ]. This is because larger values of k alias with lower\nfrequencies and hence provide no additional information, as explained in the discussion on\naliasing in Section 2.3.1.\nAt face value, the DFT takes O(N 2) operations (multiply-adds) to evaluate. Fortunately,\nthere exists a faster algorithm called the Fast Fourier Transform (FFT), which requires only\nO(N log2 N) operations (Bracewell 1986; Oppenheim, Schafer, and Buck 1999). We do not\nexplain the details of the algorithm here, except to say that it involves a series of log2 N\nstages, where each stage performs small 2×2 transforms (matrix multiplications with known\ncoefﬁcients) followed by some semi-global permutations. (You will often see the term but-\nterﬂy applied to these stages because of the pictorial shape of the signal processing graphs\ninvolved.) Implementations for the FFT can be found in most numerical and signal processing\nlibraries.\nNow that we have deﬁned the Fourier transform, what are some of its properties and how\ncan they be used? Table 3.1 lists a number of useful properties, which we describe in a little\nmore detail below:",
  "image_path": "page_155.jpg",
  "pages": [
    154,
    155,
    156
  ]
}