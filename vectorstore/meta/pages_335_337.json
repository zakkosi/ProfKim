{
  "doc_id": "pages_335_337",
  "text": "6.1 2D and 3D feature-based alignment\n313\nMany of the motion models presented in Section 2.1.2 and Table 2.1, i.e., translation,\nsimilarity, and afﬁne, have a linear relationship between the amount of motion ∆x = x′ −x\nand the unknown parameters p,\n∆x = x′ −x = J(x)p,\n(6.4)\nwhere J = ∂f/∂p is the Jacobian of the transformation f with respect to the motion param-\neters p (see Table 6.1). In this case, a simple linear regression (linear least squares problem)\ncan be formulated as\nELLS\n=\nX\ni\n∥J(xi)p −∆xi∥2\n(6.5)\n=\npT\n\"X\ni\nJT (xi)J(xi)\n#\np −2pT\n\"X\ni\nJT (xi)∆xi\n#\n+\nX\ni\n∥∆xi∥2 (6.6)\n=\npT Ap −2pT b + c.\n(6.7)\nThe minimum can be found by solving the symmetric positive deﬁnite (SPD) system of nor-\nmal equations2\nAp = b,\n(6.8)\nwhere\nA =\nX\ni\nJT (xi)J(xi)\n(6.9)\nis called the Hessian and b = P\ni JT (xi)∆xi. For the case of pure translation, the result-\ning equations have a particularly simple form, i.e., the translation is the average translation\nbetween corresponding points or, equivalently, the translation of the point centroids.\nUncertainty weighting.\nThe above least squares formulation assumes that all feature points\nare matched with the same accuracy. This is often not the case, since certain points may fall\ninto more textured regions than others. If we associate a scalar variance estimate σ2\ni with\neach correspondence, we can minimize the weighted least squares problem instead,3\nEWLS =\nX\ni\nσ−2\ni\n∥ri∥2.\n(6.10)\nAs shown in Section 8.1.3, a covariance estimate for patch-based matching can be obtained\nby multiplying the inverse of the patch Hessian Ai (8.55) with the per-pixel noise covariance\n2 For poorly conditioned problems, it is better to use QR decomposition on the set of linear equations J(xi)p =\n∆xi instead of the normal equations (Bj¨orck 1996; Golub and Van Loan 1996). However, such conditions rarely\narise in image registration.\n3 Problems where each measurement can have a different variance or certainty are called heteroscedastic models.\n314\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nFigure 6.3\nA simple panograph consisting of three images automatically aligned with a\ntranslational model and then averaged together.\nσ2\nn (8.44). Weighting each squared residual by its inverse covariance Σ−1\ni\n= σ−2\nn Ai (which\nis called the information matrix), we obtain\nECWLS =\nX\ni\n∥ri∥2\nΣ−1\ni\n=\nX\ni\nrT\ni Σ−1\ni ri =\nX\ni\nσ−2\nn rT\ni Airi.\n(6.11)\n6.1.2 Application: Panography\nOne of the simplest (and most fun) applications of image alignment is a special form of image\nstitching called panography. In a panograph, images are translated and optionally rotated and\nscaled before being blended with simple averaging (Figure 6.3). This process mimics the\nphotographic collages created by artist David Hockney, although his compositions use an\nopaque overlay model, being created out of regular photographs.\nIn most of the examples seen on the Web, the images are aligned by hand for best artistic\neffect.4 However, it is also possible to use feature matching and alignment techniques to\nperform the registration automatically (Nomura, Zhang, and Nayar 2007; Zelnik-Manor and\nPerona 2007).\nConsider a simple translational model. We want all the corresponding features in different\nimages to line up as best as possible. Let tj be the location of the jth image coordinate frame\nin the global composite frame and xij be the location of the ith matched feature in the jth\nimage. In order to align the images, we wish to minimize the least squares error\nEPLS =\nX\nij\n∥(tj + xij) −xi∥2,\n(6.12)\n4 http://www.ﬂickr.com/groups/panography/.\n6.1 2D and 3D feature-based alignment\n315\nwhere xi is the consensus (average) position of feature i in the global coordinate frame.\n(An alternative approach is to register each pair of overlapping images separately and then\ncompute a consensus location for each frame—see Exercise 6.2.)\nThe above least squares problem is indeterminate (you can add a constant offset to all the\nframe and point locations tj and xi). To ﬁx this, either pick one frame as being at the origin\nor add a constraint to make the average frame offsets be 0.\nThe formulas for adding rotation and scale transformations are straightforward and are\nleft as an exercise (Exercise 6.2). See if you can create some collages that you would be\nhappy to share with others on the Web.\n6.1.3 Iterative algorithms\nWhile linear least squares is the simplest method for estimating parameters, most problems in\ncomputer vision do not have a simple linear relationship between the measurements and the\nunknowns. In this case, the resulting problem is called non-linear least squares or non-linear\nregression.\nConsider, for example, the problem of estimating a rigid Euclidean 2D transformation\n(translation plus rotation) between two sets of points. If we parameterize this transformation\nby the translation amount (tx, ty) and the rotation angle θ, as in Table 2.1, the Jacobian of\nthis transformation, given in Table 6.1, depends on the current value of θ. Notice how in\nTable 6.1, we have re-parameterized the motion matrices so that they are always the identity\nat the origin p = 0, which makes it easier to initialize the motion parameters.\nTo minimize the non-linear least squares problem, we iteratively ﬁnd an update ∆p to the\ncurrent parameter estimate p by minimizing\nENLS(∆p)\n=\nX\ni\n∥f(xi; p + ∆p) −x′\ni∥2\n(6.13)\n≈\nX\ni\n∥J(xi; p)∆p −ri∥2\n(6.14)\n=\n∆pT\n\"X\ni\nJT J\n#\n∆p −2∆pT\n\"X\ni\nJT ri\n#\n+\nX\ni\n∥ri∥2\n(6.15)\n=\n∆pT A∆p −2∆pT b + c,\n(6.16)\nwhere the “Hessian”5 A is the same as Equation (6.9) and the right hand side vector\nb =\nX\ni\nJT (xi)ri\n(6.17)\n5 The “Hessian” A is not the true Hessian (second derivative) of the non-linear least squares problem (6.13).\nInstead, it is the approximate Hessian, which neglects second (and higher) order derivatives of f(xi; p + ∆p).",
  "image_path": "page_336.jpg",
  "pages": [
    335,
    336,
    337
  ]
}