{
  "doc_id": "pages_435_437",
  "text": "8.4 Optical ﬂow\n413\nginning to appear and tend to be among the better-performing methods on the recently re-\nleased optical ﬂow database (Baker, Black, Lewis et al. 2007).13\nExamples of such techniques include the one developed by Glocker, Paragios, Komodakis\net al. (2008), who use a coarse-to-ﬁne strategy with per-pixel 2D uncertainty estimates, which\nare then used to guide the reﬁnement and search at the next ﬁner level. Instead of using gra-\ndient descent to reﬁne the ﬂow estimates, a combinatorial search over discrete displacement\nlabels (which is able to ﬁnd better energy minima) is performed using their Fast-PD algorithm\n(Komodakis, Tziritas, and Paragios 2008).\nLempitsky, Roth, and Rother. (2008) use fusion moves (Lempitsky, Rother, and Blake\n2007) over proposals generated from basic ﬂow algorithms (Horn and Schunck 1981; Lucas\nand Kanade 1981) to ﬁnd good solutions. The basic idea behind fusion moves is to replace\nportions of the current best estimate with hypotheses generated by more basic techniques\n(or their shifted versions) and to alternate them with local gradient descent for better energy\nminimization.\nThe ﬁeld of accurate motion estimation continues to evolve at a rapid pace, with signif-\nicant advances in performance occurring every year. The optical ﬂow evaluation Web site\n(http://vision.middlebury.edu/ﬂow/) is a good source of pointers to high-performing recently\ndeveloped algorithms (Figure 8.12).\n8.4.1 Multi-frame motion estimation\nSo far, we have looked at motion estimation as a two-frame problem, where the goal is to\ncompute a motion ﬁeld that aligns pixels from one image with those in another. In practice,\nmotion estimation is usually applied to video, where a whole sequence of frames is available\nto perform this task.\nOne classic approach to multi-frame motion is to ﬁlter the spatio-temporal volume using\noriented or steerable ﬁlters (Heeger 1988), in a manner analogous to oriented edge detec-\ntion (Section 3.2.3). Figure 8.13 shows two frames from the commonly used ﬂower garden\nsequence, as well as a horizontal slice through the spatio-temporal volume, i.e., the 3D vol-\nume created by stacking all of the video frames together. Because the pixel motion is mostly\nhorizontal, the slopes of individual (textured) pixel tracks, which correspond to their horizon-\ntal velocities, can clearly be seen. Spatio-temporal ﬁltering uses a 3D volume around each\npixel to determine the best orientation in space–time, which corresponds directly to a pixel’s\nvelocity.\nUnfortunately, in order to obtain reasonably accurate velocity estimates everywhere in\nan image, spatio-temporal ﬁlters have moderately large extents, which severely degrades the\nquality of their estimates near motion discontinuities. (This same problem is endemic in\n13 http://vision.middlebury.edu/ﬂow/.\n414\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\nFigure 8.13\nSlice through a spatio-temporal volume (Szeliski 1999) c⃝1999 IEEE: (a–b)\ntwo frames from the ﬂower garden sequence; (c) a horizontal slice through the complete\nspatio-temporal volume, with the arrows indicating locations of potential key frames where\nﬂow is estimated. Note that the colors for the ﬂower garden sequence are incorrect; the correct\ncolors (yellow ﬂowers) are shown in Figure 8.15.\n2D window-based motion estimators.) An alternative to full spatio-temporal ﬁltering is to\nestimate more local spatio-temporal derivatives and use them inside a global optimization\nframework to ﬁll in textureless regions (Bruhn, Weickert, and Schn¨orr 2005; Govindu 2006).\nAnother alternative is to simultaneously estimate multiple motion estimates, while also\noptionally reasoning about occlusion relationships (Szeliski 1999). Figure 8.13c shows schemat-\nically one potential approach to this problem. The horizontal arrows show the locations of\nkeyframes s where motion is estimated, while other slices indicate video frames t whose\ncolors are matched with those predicted by interpolating between the keyframes. Motion es-\ntimation can be cast as a global energy minimization problem that simultaneously minimizes\nbrightness compatibility and ﬂow compatibility terms between keyframes and other frames,\nin addition to using robust smoothness terms.\nThe multi-view framework is potentially even more appropriate for rigid scene motion\n(multi-view stereo) (Section 11.6), where the unknowns at each pixel are disparities and\nocclusion relationships can be determined directly from pixel depths (Szeliski 1999; Kol-\nmogorov and Zabih 2002). However, it may also be applicable to general motion, with the\naddition of models for object accelerations and occlusion relationships.\n8.4.2 Application: Video denoising\nVideo denoising is the process of removing noise and other artifacts such as scratches from\nﬁlm and video (Kokaram 2004). Unlike single image denoising, where the only information\navailable is in the current picture, video denoisers can average or borrow information from\nadjacent frames. However, in order to do this without introducing blur or jitter (irregular\nmotion), they need accurate per-pixel motion estimates.\nExercise 8.7 lists some of the steps required, which include the ability to determine if the\n8.5 Layered motion\n415\ncurrent motion estimate is accurate enough to permit averaging with other frames. Gai and\nKang (2009) describe their recently developed restoration process, which involves a series of\nadditional steps to deal with the special characteristics of vintage ﬁlm.\n8.4.3 Application: De-interlacing\nAnother commonly used application of per-pixel motion estimation is video de-interlacing,\nwhich is the process of converting a video taken with alternating ﬁelds of even and odd\nlines to a non-interlaced signal that contains both ﬁelds in each frame (de Haan and Bellers\n1998). Two simple de-interlacing techniques are bob, which copies the line above or below\nthe missing line from the same ﬁeld, and weave, which copies the corresponding line from\nthe ﬁeld before or after. The names come from the visual artifacts generated by these two\nsimple techniques: bob introduces an up-and-down bobbing motion along strong horizontal\nlines; weave can lead to a “zippering” effect along horizontally translating edges. Replacing\nthese copy operators with averages can help but does not completely remove these artifacts.\nA wide variety of improved techniques have been developed for this process, which is\noften embedded in specialized DSP chips found inside video digitization boards in computers\n(since broadcast video is often interlaced, while computer monitors are not). A large class\nof these techniques estimates local per-pixel motions and interpolates the missing data from\nthe information available in spatially and temporally adjacent ﬁelds. Dai, Baker, and Kang\n(2009) review this literature and propose their own algorithm, which selects among seven\ndifferent interpolation functions at each pixel using an MRF framework.\n8.5 Layered motion\nIn many situation, visual motion is caused by the movement of a small number of objects\nat different depths in the scene. In such situations, the pixel motions can be described more\nsuccinctly (and estimated more reliably) if pixels are grouped into appropriate objects or\nlayers (Wang and Adelson 1994).\nFigure 8.14 shows this approach schematically. The motion in this sequence is caused by\nthe translational motion of the checkered background and the rotation of the foreground hand.\nThe complete motion sequence can be reconstructed from the appearance of the foreground\nand background elements, which can be represented as alpha-matted images (sprites or video\nobjects) and the parametric motion corresponding to each layer. Displacing and compositing\nthese layers in back to front order (Section 3.1.3) recreates the original video sequence.\nLayered motion representations not only lead to compact representations (Wang and\nAdelson 1994; Lee, ge Chen, lung Bruce Lin et al. 1997), but they also exploit the infor-\nmation available in multiple video frames, as well as accurately modeling the appearance of",
  "image_path": "page_436.jpg",
  "pages": [
    435,
    436,
    437
  ]
}