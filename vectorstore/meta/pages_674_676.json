{
  "doc_id": "pages_674_676",
  "text": "652\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n4. Render and composite all of the resulting layers, with optional alpha matting to handle\nthe edges of layers and sprites.\nEx 13.7: Light ﬁeld transformations\nDerive the equations relating regular images to 4D\nlight ﬁeld coordinates.\n1. Determine the mapping between the far plane (u, v) coordinates and a virtual camera’s\n(x, y) coordinates.\n(a) Start by parameterizing a 3D point on the uv plane in terms of its (u, v) coordi-\nnates.\n(b) Project the resulting 3D point to the camera pixels (x, y, 1) using the usual 3 × 4\ncamera matrix P (2.63).\n(c) Derive the 2D homography relating (u, v) and (x, y) coordinates.\n2. Write down a similar transformation for (s, t) to (x, y) coordinates.\n3. Prove that if the virtual camera is actually on the (s, t) plane, the (s, t) value depends\nonly on the camera’s optical center and is independent of (x, y).\n4. Prove that an image taken by a regular orthographic or perspective camera, i.e., one that\nhas a linear projective relationship between 3D points and (x, y) pixels (2.63), samples\nthe (s, t, u, v) light ﬁeld along a two-dimensional hyperplane.\nEx 13.8: Light ﬁeld and Lumigraph rendering\nImplement a light ﬁeld or Lumigraph ren-\ndering system:\n1. Download one of the light ﬁeld data sets from http://lightﬁeld.stanford.edu/.\n2. Write an algorithm to synthesize a new view from this light ﬁeld, using quadri-linear\ninterpolation of (s, t, u, v) ray samples.\n3. Try varying the focal plane corresponding to your desired view (Isaksen, McMillan,\nand Gortler 2000) and see if the resulting image looks sharper.\n4. Determine a 3D proxy for the objects in your scene. You can do this by running multi-\nview stereo over one of your light ﬁelds to obtain a depth map per image.\n5. Implement the Lumigraph rendering algorithm, which modiﬁes the sampling of rays\naccording to the 3D location of each surface element.\n6. Collect a set of images yourself and determine their pose using structure from motion.\n13.7 Exercises\n653\n7. Implement the unstructured Lumigraph rendering algorithm from Buehler, Bosse, McMil-\nlan et al. (2001).\nEx 13.9: Surface light ﬁelds\nConstruct a surface light ﬁeld (Wood, Azuma, Aldinger et al.\n2000) and see how well you can compress it.\n1. Acquire an interesting light ﬁeld of a specular scene or object, or download one from\nhttp://lightﬁeld.stanford.edu/.\n2. Build a 3D model of the object using a multi-view stereo algorithm that is robust to\noutliers due to specularities.\n3. Estimate the Lumisphere for each surface point on the object.\n4. Estimate its diffuse components. Is the median the best way to do this? Why not use\nthe minimum color value? What happens if there is Lambertian shading on the diffuse\ncomponent?\n5. Model and compress the remaining portion of the Lumisphere using one of the tech-\nniques suggested by Wood, Azuma, Aldinger et al. (2000) or invent one of your own.\n6. Study how well your compression algorithm works and what artifacts it produces.\n7. (Optional) Develop a system to edit and manipulate your surface light ﬁeld.\nEx 13.10: Handheld concentric mosaics\nDevelop a system to navigate a handheld con-\ncentric mosaic.\n1. Stand in the middle of a room with a camcorder held at arm’s length in front of you and\nspin in a circle.\n2. Use a structure from motion system to determine the camera pose and sparse 3D struc-\nture for each input frame.\n3. (Optional) Re-bin your image pixels into a more regular concentric mosaic structure.\n4. At view time, determine from the new camera’s view (which should be near the plane\nof your original capture) which source pixels to display. You can simplify your com-\nputations to determine a source column (and scaling) for each output column.\n5. (Optional) Use your sparse 3D structure, interpolated to a dense depth map, to improve\nyour rendering (Zheng, Kang, Cohen et al. 2007).\n654\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nEx 13.11: Video textures\nCapture some videos of natural phenomena, such as a water\nfountain, ﬁre, or smiling face, and loop the video seamlessly into an inﬁnite length video\n(Sch¨odl, Szeliski, Salesin et al. 2000).\n1. Compare all the frames in the original clip using an L2 (sum of square difference)\nmetric. (This assumes the videos were shot on a tripod or have already been stabilized.)\n2. Filter the comparison table temporally to accentuate temporal sub-sequences that match\nwell together.\n3. Convert your similarity table into a jump probability table through some exponential\ndistribution. Be sure to modify transitions near the end so you do not get “stuck” in the\nlast frame.\n4. Starting with the ﬁrst frame, use your transition table to decide whether to jump for-\nward, backward, or continue to the next frame.\n5. (Optional) Add any of the other extensions to the original video textures idea, such\nas multiple moving regions, interactive control, or graph cut spatio-temporal texture\nseaming.",
  "image_path": "page_675.jpg",
  "pages": [
    674,
    675,
    676
  ]
}