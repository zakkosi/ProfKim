{
  "doc_id": "pages_144_146",
  "text": "122\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nHaffner et al. 1998). In principle, summed area tables could also be used to compute the sums\nin the sum of squared differences (SSD) stereo and motion algorithms (Section 11.4). In\npractice, separable moving average ﬁlters are usually preferred (Kanade, Yoshida, Oda et al.\n1996), unless many different window shapes and sizes are being considered (Veksler 2003).\nRecursive ﬁltering\nThe incremental formula (3.31) for the summed area is an example of a recursive ﬁlter, i.e.,\none whose values depends on previous ﬁlter outputs. In the signal processing literature, such\nﬁlters are known as inﬁnite impulse response (IIR), since the output of the ﬁlter to an impulse\n(single non-zero value) goes on forever. For example, for a summed area table, an impulse\ngenerates an inﬁnite rectangle of 1s below and to the right of the impulse. The ﬁlters we have\npreviously studied in this chapter, which involve the image with a ﬁnite extent kernel, are\nknown as ﬁnite impulse response (FIR).\nTwo-dimensional IIR ﬁlters and recursive formulas are sometimes used to compute quan-\ntities that involve large area interactions, such as two-dimensional distance functions (Sec-\ntion 3.3.3) and connected components (Section 3.3.4).\nMore commonly, however, IIR ﬁlters are used inside one-dimensional separable ﬁltering\nstages to compute large-extent smoothing kernels, such as efﬁcient approximations to Gaus-\nsians and edge ﬁlters (Deriche 1990; Nielsen, Florack, and Deriche 1997).\nPyramid-based\nalgorithms (Section 3.5) can also be used to perform such large-area smoothing computations.\n3.3 More neighborhood operators\nAs we have just seen, linear ﬁlters can perform a wide variety of image transformations.\nHowever non-linear ﬁlters, such as edge-preserving median or bilateral ﬁlters, can sometimes\nperform even better. Other examples of neighborhood operators include morphological oper-\nators that operate on binary images, as well as semi-global operators that compute distance\ntransforms and ﬁnd connected components in binary images (Figure 3.11f–h).\n3.3.1 Non-linear ﬁltering\nThe ﬁlters we have looked at so far have all been linear, i.e., their response to a sum of two\nsignals is the same as the sum of the individual responses. This is equivalent to saying that\neach output pixel is a weighted summation of some number of input pixels (3.19). Linear\nﬁlters are easier to compose and are amenable to frequency response analysis (Section 3.4).\nIn many cases, however, better performance can be obtained by using a non-linear com-\nbination of neighboring pixels. Consider for example the image in Figure 3.18e, where the\n3.3 More neighborhood operators\n123\n(a)\n(b)\n(c)\n(d)\n(e)\n(f)\n(g)\n(h)\nFigure 3.18 Median and bilateral ﬁltering: (a) original image with Gaussian noise; (b) Gaus-\nsian ﬁltered; (c) median ﬁltered; (d) bilaterally ﬁltered; (e) original image with shot noise; (f)\nGaussian ﬁltered; (g) median ﬁltered; (h) bilaterally ﬁltered. Note that the bilateral ﬁlter fails\nto remove the shot noise because the noisy pixels are too different from their neighbors.\n.\n2\n1\n0\n1\n2\n1\n2\n1\n2\n4\n1\n2\n1\n2\n4\n2\n0.1 0.3 0.4 0.3 0.1\n0.0 0.0 0.0 0.0 0.2\n2\n1\n3\n5\n8\n2\n1\n3\n5\n8\n1\n0.3 0.6 0.8 0.6 0.3\n0.0 0.0 0.0 0.4 0.8\n1\n3\n7\n6\n9\n1\n3\n7\n6\n9\n0\n0.4 0.8 1.0 0.8 0.4\n0.0 0.0 1.0 0.8 0.4\n3\n4\n8\n6\n7\n3\n4\n8\n6\n7\n1\n0.3 0.6 0.8 0.6 0.3\n0.0 0.2 0.8 0.8 1.0\n4\n5\n7\n8\n9\n4\n5\n7\n8\n9\n2\n0.1 0.3 0.4 0.3 0.1\n0.2 0.4 1.0 0.8 0.4\n(a) median =\n4\n(b) α-mean= 4.6\n(c) domain filter\n(d) range filter\nFigure 3.19 Median and bilateral ﬁltering: (a) median pixel (green); (b) selected α-trimmed\nmean pixels; (c) domain ﬁlter (numbers along edge are pixel distances); (d) range ﬁlter.\n124\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nnoise, rather than being Gaussian, is shot noise, i.e., it occasionally has very large values. In\nthis case, regular blurring with a Gaussian ﬁlter fails to remove the noisy pixels and instead\nturns them into softer (but still visible) spots (Figure 3.18f).\nMedian ﬁltering\nA better ﬁlter to use in this case is the median ﬁlter, which selects the median value from each\npixel’s neighborhood (Figure 3.19a). Median values can be computed in expected linear time\nusing a randomized select algorithm (Cormen 2001) and incremental variants have also been\ndeveloped by Tomasi and Manduchi (1998) and Bovik (2000, Section 3.2). Since the shot\nnoise value usually lies well outside the true values in the neighborhood, the median ﬁlter is\nable to ﬁlter away such bad pixels (Figure 3.18c).\nOne downside of the median ﬁlter, in addition to its moderate computational cost, is that\nsince it selects only one input pixel value to replace each output pixel, it is not as efﬁcient at\naveraging away regular Gaussian noise (Huber 1981; Hampel, Ronchetti, Rousseeuw et al.\n1986; Stewart 1999). A better choice may be the α-trimmed mean (Lee and Redner 1990)\n(Crane 1997, p. 109), which averages together all of the pixels except for the α fraction that\nare the smallest and the largest (Figure 3.19b).\nAnother possibility is to compute a weighted median, in which each pixel is used a num-\nber of times depending on its distance from the center. This turns out to be equivalent to\nminimizing the weighted objective function\nX\nk,l\nw(k, l)|f(i + k, j + l) −g(i, j)|p,\n(3.33)\nwhere g(i, j) is the desired output value and p = 1 for the weighted median. The value p = 2\nis the usual weighted mean, which is equivalent to correlation (3.12) after normalizing by the\nsum of the weights (Bovik 2000, Section 3.2) (Haralick and Shapiro 1992, Section 7.2.6).\nThe weighted mean also has deep connections to other methods in robust statistics (see Ap-\npendix B.3), such as inﬂuence functions (Huber 1981; Hampel, Ronchetti, Rousseeuw et al.\n1986).\nNon-linear smoothing has another, perhaps even more important property, especially\nsince shot noise is rare in today’s cameras. Such ﬁltering is more edge preserving, i.e., it\nhas less tendency to soften edges while ﬁltering away high-frequency noise.\nConsider the noisy image in Figure 3.18a. In order to remove most of the noise, the\nGaussian ﬁlter is forced to smooth away high-frequency detail, which is most noticeable near\nstrong edges. Median ﬁltering does better but, as mentioned before, does not do as good\na job at smoothing away from discontinuities. See (Tomasi and Manduchi 1998) for some\nadditional references to edge-preserving smoothing techniques.",
  "image_path": "page_145.jpg",
  "pages": [
    144,
    145,
    146
  ]
}