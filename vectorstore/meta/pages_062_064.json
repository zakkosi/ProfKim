{
  "doc_id": "pages_062_064",
  "text": "40\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nwhere I is the (3 × 3) identity matrix and 0 is the zero vector.\nRotation + translation.\nAlso known as 3D rigid body motion or the 3D Euclidean trans-\nformation, it can be written as x′ = Rx + t or\nx′ =\nh\nR\nt\ni\n¯x\n(2.24)\nwhere R is a 3 × 3 orthonormal rotation matrix with RRT = I and |R| = 1. Note that\nsometimes it is more convenient to describe a rigid motion using\nx′ = R(x −c) = Rx −Rc,\n(2.25)\nwhere c is the center of rotation (often the camera center).\nCompactly parameterizing a 3D rotation is a non-trivial task, which we describe in more\ndetail below.\nScaled rotation.\nThe 3D similarity transform can be expressed as x′ = sRx + t where s\nis an arbitrary scale factor. It can also be written as\nx′ =\nh\nsR\nt\ni\n¯x.\n(2.26)\nThis transformation preserves angles between lines and planes.\nAfﬁne.\nThe afﬁne transform is written as x′ = A¯x, where A is an arbitrary 3 × 4 matrix,\ni.e.,\nx′ =\n\n\na00\na01\na02\na03\na10\na11\na12\na13\na20\na21\na22\na23\n\n¯x.\n(2.27)\nParallel lines and planes remain parallel under afﬁne transformations.\nProjective.\nThis transformation, variously known as a 3D perspective transform, homogra-\nphy, or collineation, operates on homogeneous coordinates,\n˜x′ = ˜\nH ˜x,\n(2.28)\nwhere ˜\nH is an arbitrary 4 × 4 homogeneous matrix. As in 2D, the resulting homogeneous\ncoordinate ˜x′ must be normalized in order to obtain an inhomogeneous result x. Perspective\ntransformations preserve straight lines (i.e., they remain straight after the transformation).\n2.1 Geometric primitives and transformations\n41\nv\nv┴\nn^\nv×\nv║\nv××\nu┴\nu\nθ\nFigure 2.5 Rotation around an axis ˆn by an angle θ.\n2.1.4 3D rotations\nThe biggest difference between 2D and 3D coordinate transformations is that the parameter-\nization of the 3D rotation matrix R is not as straightforward but several possibilities exist.\nEuler angles\nA rotation matrix can be formed as the product of three rotations around three cardinal axes,\ne.g., x, y, and z, or x, y, and x. This is generally a bad idea, as the result depends on the\norder in which the transforms are applied. What is worse, it is not always possible to move\nsmoothly in the parameter space, i.e., sometimes one or more of the Euler angles change\ndramatically in response to a small change in rotation.1 For these reasons, we do not even\ngive the formula for Euler angles in this book—interested readers can look in other textbooks\nor technical reports (Faugeras 1993; Diebel 2006). Note that, in some applications, if the\nrotations are known to be a set of uni-axial transforms, they can always be represented using\nan explicit set of rigid transformations.\nAxis/angle (exponential twist)\nA rotation can be represented by a rotation axis ˆn and an angle θ, or equivalently by a 3D\nvector ω = θˆn. Figure 2.5 shows how we can compute the equivalent rotation. First, we\nproject the vector v onto the axis ˆn to obtain\nv∥= ˆn(ˆn · v) = (ˆnˆnT )v,\n(2.29)\nwhich is the component of v that is not affected by the rotation. Next, we compute the\nperpendicular residual of v from ˆn,\nv⊥= v −v∥= (I −ˆnˆnT )v.\n(2.30)\n1 In robotics, this is sometimes referred to as gimbal lock.\n42\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nWe can rotate this vector by 90◦using the cross product,\nv× = ˆn × v = [ˆn]×v,\n(2.31)\nwhere [ˆn]× is the matrix form of the cross product operator with the vector ˆn = (ˆnx, ˆny, ˆnz),\n[ˆn]× =\n\n\n0\n−ˆnz\nˆny\nˆnz\n0\n−ˆnx\n−ˆny\nˆnx\n0\n\n.\n(2.32)\nNote that rotating this vector by another 90◦is equivalent to taking the cross product again,\nv×× = ˆn × v× = [ˆn]2\n×v = −v⊥,\nand hence\nv∥= v −v⊥= v + v×× = (I + [ˆn]2\n×)v.\nWe can now compute the in-plane component of the rotated vector u as\nu⊥= cos θv⊥+ sin θv× = (sin θ[ˆn]× −cos θ[ˆn]2\n×)v.\nPutting all these terms together, we obtain the ﬁnal rotated vector as\nu = u⊥+ v∥= (I + sin θ[ˆn]× + (1 −cos θ)[ˆn]2\n×)v.\n(2.33)\nWe can therefore write the rotation matrix corresponding to a rotation by θ around an axis ˆn\nas\nR(ˆn, θ) = I + sin θ[ˆn]× + (1 −cos θ)[ˆn]2\n×,\n(2.34)\nwhich is known as Rodriguez’s formula (Ayache 1989).\nThe product of the axis ˆn and angle θ, ω = θˆn = (ωx, ωy, ωz), is a minimal represen-\ntation for a 3D rotation. Rotations through common angles such as multiples of 90◦can be\nrepresented exactly (and converted to exact matrices) if θ is stored in degrees. Unfortunately,\nthis representation is not unique, since we can always add a multiple of 360◦(2π radians) to\nθ and get the same rotation matrix. As well, (ˆn, θ) and (−ˆn, −θ) represent the same rotation.\nHowever, for small rotations (e.g., corrections to rotations), this is an excellent choice.\nIn particular, for small (inﬁnitesimal or instantaneous) rotations and θ expressed in radians,\nRodriguez’s formula simpliﬁes to\nR(ω) ≈I + sin θ[ˆn]× ≈I + [θˆn]× =\n\n\n1\n−ωz\nωy\nωz\n1\n−ωx\n−ωy\nωx\n1\n\n,\n(2.35)",
  "image_path": "page_063.jpg",
  "pages": [
    62,
    63,
    64
  ]
}