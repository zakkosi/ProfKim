{
  "doc_id": "pages_178_180",
  "text": "156\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nH\nL\n↓2\n↓2\nL1\nQ\nF\nI\n↑2\n↑2\nLH0\nHH0\nHL0\nLH0\nHH0\nHL0\nL1\n(a)\nHh\n↓2h\nL1\nLH0\nHH0\nHL0\nHv\n↓2v\nLv\n↓2v\nLh\n↓2h\nHv\n↓2v\nLv\n↓2v\nL1\nLH0\nHH0\nHL0\nQ\nQ\nQ\nFh\n↑2h\nFv\n↑2v\nIv\n↑2v\nIh\n↑2h\nFv\n↑2v\nIv\n↑2v\n(b)\nFigure 3.37 Two-dimensional wavelet decomposition: (a) high-level diagram showing the\nlow-pass and high-pass transforms as single boxes; (b) separable implementation, which in-\nvolves ﬁrst performing the wavelet transform horizontally and then vertically. The I and F\nboxes are the interpolation and ﬁltering boxes required to re-synthesize the image from its\nwavelet components.\nthat all have ﬁnite impulse responses? This topic has been the main subject of study in the\nwavelet community for over two decades. The answer depends largely on the intended ap-\nplication, e.g., whether the wavelets are being used for compression, image analysis (feature\nﬁnding), or denoising. Simoncelli and Adelson (1990b) show (in Table 4.1) some good odd-\nlength quadrature mirror ﬁlter (QMF) coefﬁcients that seem to work well in practice.\nSince the design of wavelet ﬁlters is such a tricky art, is there perhaps a better way? In-\ndeed, a simpler procedure is to split the signal into its even and odd components and then\nperform trivially reversible ﬁltering operations on each sequence to produce what are called\nlifted wavelets (Figures 3.38 and 3.39). Sweldens (1996) gives a wonderfully understandable\nintroduction to the lifting scheme for second-generation wavelets, followed by a comprehen-\nsive review (Sweldens 1997).\nAs Figure 3.38 demonstrates, rather than ﬁrst ﬁltering the whole input sequence (image)\n3.5 Pyramids and wavelets\n157\nH\nL\n↓2e\n↓2o\nL1\nQ\nF\nI\n↑2e\n↑2o\nH0\nL1\nH0\n(a)\nQ\n↓2o\n↓2e\nL\nC\nL1\nH0\nL1\nH0\n↑2o\n↑2e\nL\nC\n–\n–\n(b)\nFigure 3.38 One-dimensional wavelet transform: (a) usual high-pass + low-pass ﬁlters fol-\nlowed by odd (↓2o) and even (↓2e) downsampling; (b) lifted version, which ﬁrst selects the\nodd and even subsequences and then applies a low-pass prediction stage L and a high-pass\ncorrection stage C in an easily reversible manner.\nwith high-pass and low-pass ﬁlters and then keeping the odd and even sub-sequences, the\nlifting scheme ﬁrst splits the sequence into its even and odd sub-components. Filtering the\neven sequence with a low-pass ﬁlter L and subtracting the result from the even sequence\nis trivially reversible: simply perform the same ﬁltering and then add the result back in.\nFurthermore, this operation can be performed in place, resulting in signiﬁcant space savings.\nThe same applies to ﬁltering the even sequence with the correction ﬁlter C, which is used to\nensure that the even sequence is low-pass. A series of such lifting steps can be used to create\nmore complex ﬁlter responses with low computational cost and guaranteed reversibility.\nThis process can perhaps be more easily understood by considering the signal processing\ndiagram in Figure 3.39. During analysis, the average of the even values is subtracted from the\nodd value to obtain a high-pass wavelet coefﬁcient. However, the even samples still contain\nan aliased sample of the low-frequency signal. To compensate for this, a small amount of the\nhigh-pass wavelet is added back to the even sequence so that it is properly low-pass ﬁltered.\n(It is easy to show that the effective low-pass ﬁlter is [−1/8, 1/4, 3/4, 1/4, −1/8], which is in-\n158\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n-½\n-½\n-½\n-½\n¼\n¼\n¼\n¼\nL0\nH0\nL1\nH1\nL2\n½\n½\n-¼\n-¼\n-¼\n-¼\nL0\nH0\nL1\nH1\nL2\n½\n½\n(a)\n(b)\nFigure 3.39 Lifted transform shown as a signal processing diagram: (a) The analysis stage\nﬁrst predicts the odd value from its even neighbors, stores the difference wavelet, and then\ncompensates the coarser even value by adding in a fraction of the wavelet. (b) The synthesis\nstage simply reverses the ﬂow of computation and the signs of some of the ﬁlters and op-\nerations. The light blue lines show what happens if we use four taps for the prediction and\ncorrection instead of just two.\ndeed a low-pass ﬁlter.) During synthesis, the same operations are reversed with a judicious\nchange in sign.\nOf course, we need not restrict ourselves to two-tap ﬁlters. Figure 3.39 shows as light\nblue arrows additional ﬁlter coefﬁcients that could optionally be added to the lifting scheme\nwithout affecting its reversibility. In fact, the low-pass and high-pass ﬁltering operations can\nbe interchanged, e.g., we could use a ﬁve-tap cubic low-pass ﬁlter on the odd sequence (plus\ncenter value) ﬁrst, followed by a four-tap cubic low-pass predictor to estimate the wavelet,\nalthough I have not seen this scheme written down.\nLifted wavelets are called second-generation wavelets because they can easily adapt to\nnon-regular sampling topologies, e.g., those that arise in computer graphics applications such\nas multi-resolution surface manipulation (Schr¨oder and Sweldens 1995). It also turns out that\nlifted weighted wavelets, i.e., wavelets whose coefﬁcients adapt to the underlying problem\nbeing solved (Fattal 2009), can be extremely effective for low-level image manipulation tasks\nand also for preconditioning the kinds of sparse linear systems that arise in the optimization-\nbased approaches to vision algorithms that we discuss in Section 3.7 (Szeliski 2006b).\nAn alternative to the widely used “separable” approach to wavelet construction, which de-\ncomposes each level into horizontal, vertical, and “cross” sub-bands, is to use a representation\nthat is more rotationally symmetric and orientationally selective and also avoids the aliasing\ninherent in sampling signals below their Nyquist frequency.17 Simoncelli, Freeman, Adelson\net al. (1992) introduce such a representation, which they call a pyramidal radial frequency\n17 Such aliasing can often be seen as the signal content moving between bands as the original signal is slowly\nshifted.",
  "image_path": "page_179.jpg",
  "pages": [
    178,
    179,
    180
  ]
}