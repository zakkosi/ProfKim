{
  "doc_id": "pages_290_292",
  "text": "268\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\n(d)\n(e)\n(f)\nFigure 5.1\nSome popular image segmentation techniques: (a) active contours (Isard and\nBlake 1998) c⃝1998 Springer; (b) level sets (Cremers, Rousson, and Deriche 2007) c⃝\n2007 Springer; (c) graph-based merging (Felzenszwalb and Huttenlocher 2004b) c⃝2004\nSpringer; (d) mean shift (Comaniciu and Meer 2002) c⃝2002 IEEE; (e) texture and interven-\ning contour-based normalized cuts (Malik, Belongie, Leung et al. 2001) c⃝2001 Springer;\n(f) binary MRF solved using graph cuts (Boykov and Funka-Lea 2006) c⃝2006 Springer.\n5 Segmentation\n269\nImage segmentation is the task of ﬁnding groups of pixels that “go together”. In statistics, this\nproblem is known as cluster analysis and is a widely studied area with hundreds of different\nalgorithms (Jain and Dubes 1988; Kaufman and Rousseeuw 1990; Jain, Duin, and Mao 2000;\nJain, Topchy, Law et al. 2004).\nIn computer vision, image segmentation is one of the oldest and most widely studied prob-\nlems (Brice and Fennema 1970; Pavlidis 1977; Riseman and Arbib 1977; Ohlander, Price,\nand Reddy 1978; Rosenfeld and Davis 1979; Haralick and Shapiro 1985). Early techniques\ntend to use region splitting or merging (Brice and Fennema 1970; Horowitz and Pavlidis 1976;\nOhlander, Price, and Reddy 1978; Pavlidis and Liow 1990), which correspond to divisive and\nagglomerative algorithms in the clustering literature (Jain, Topchy, Law et al. 2004). More\nrecent algorithms often optimize some global criterion, such as intra-region consistency and\ninter-region boundary lengths or dissimilarity (Leclerc 1989; Mumford and Shah 1989; Shi\nand Malik 2000; Comaniciu and Meer 2002; Felzenszwalb and Huttenlocher 2004b; Cremers,\nRousson, and Deriche 2007).\nWe have already seen examples of image segmentation in Sections 3.3.2 and 3.7.2. In\nthis chapter, we review some additional techniques that have been developed for image seg-\nmentation. These include algorithms based on active contours (Section 5.1) and level sets\n(Section 5.1.4), region splitting and merging (Section 5.2), mean shift (mode ﬁnding) (Sec-\ntion 5.3), normalized cuts (splitting based on pixel similarity metrics) (Section 5.4), and bi-\nnary Markov random ﬁelds solved using graph cuts (Section 5.5). Figure 5.1 shows some\nexamples of these techniques applied to different images.\nSince the literature on image segmentation is so vast, a good way to get a handle on some\nof the better performing algorithms is to look at experimental comparisons on human-labeled\ndatabases (Arbel´aez, Maire, Fowlkes et al. 2010). The best known of these is the Berkeley\nSegmentation Dataset and Benchmark1 (Martin, Fowlkes, Tal et al. 2001), which consists\nof 1000 images from a Corel image dataset that were hand-labeled by 30 human subjects.\nMany of the more recent image segmentation algorithms report comparative results on this\ndatabase. For example, Unnikrishnan, Pantofaru, and Hebert (2007) propose new metrics\nfor comparing such algorithms. Estrada and Jepson (2009) compare four well-known seg-\nmentation algorithms on the Berkeley data set and conclude that while their own SE-MinCut\nalgorithm (Estrada, Jepson, and Chennubhotla 2004) algorithm outperforms the others by a\nsmall margin, there still exists a wide gap between automated and human segmentation per-\nformance.2 A new database of foreground and background segmentations, used by Alpert,\nGalun, Basri et al. (2007), is also available.3\n1 http://www.eecs.berkeley.edu/Research/Projects/CS/vision/grouping/segbench/\n2 An interesting observation about their ROC plots is that automated techniques cluster tightly along similar\ncurves, but human performance is all over the map.\n3 http://www.wisdom.weizmann.ac.il/∼vision/Seg Evaluation DB/index.html\n270\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n5.1 Active contours\nWhile lines, vanishing points, and rectangles are commonplace in the man-made world,\ncurves corresponding to object boundaries are even more common, especially in the natural\nenvironment. In this section, we describe three related approaches to locating such boundary\ncurves in images.\nThe ﬁrst, originally called snakes by its inventors (Kass, Witkin, and Terzopoulos 1988)\n(Section 5.1.1), is an energy-minimizing, two-dimensional spline curve that evolves (moves)\ntowards image features such as strong edges. The second, intelligent scissors (Mortensen\nand Barrett 1995) (Section 5.1.3), allow the user to sketch in real time a curve that clings to\nobject boundaries. Finally, level set techniques (Section 5.1.4) evolve the curve as the zero-\nset of a characteristic function, which allows them to easily change topology and incorporate\nregion-based statistics.\nAll three of these are examples of active contours (Blake and Isard 1998; Mortensen\n1999), since these boundary detectors iteratively move towards their ﬁnal solution under the\ncombination of image and optional user-guidance forces.\n5.1.1 Snakes\nSnakes are a two-dimensional generalization of the 1D energy-minimizing splines ﬁrst intro-\nduced in Section 3.7.1,\nEint =\nZ\nα(s)∥f s(s)∥2 + β(s)∥f ss(s)∥2 ds,\n(5.1)\nwhere s is the arc-length along the curve f(s) = (x(s), y(s)) and α(s) and β(s) are ﬁrst-\nand second-order continuity weighting functions analogous to the s(x, y) and c(x, y) terms\nintroduced in (3.100–3.101). We can discretize this energy by sampling the initial curve\nposition evenly along its length (Figure 4.35) to obtain\nEint\n=\nX\ni\nα(i)∥f(i + 1) −f(i)∥2/h2\n(5.2)\n+ β(i)∥f(i + 1) −2f(i) + f(i −1)∥2/h4,\nwhere h is the step size, which can be neglected if we resample the curve along its arc-length\nafter each iteration.\nIn addition to this internal spline energy, a snake simultaneously minimizes external\nimage-based and constraint-based potentials. The image-based potentials are the sum of sev-\neral terms\nEimage = wlineEline + wedgeEedge + wtermEterm,\n(5.3)",
  "image_path": "page_291.jpg",
  "pages": [
    290,
    291,
    292
  ]
}