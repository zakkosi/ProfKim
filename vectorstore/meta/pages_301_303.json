{
  "doc_id": "pages_301_303",
  "text": "5.1 Active contours\n279\n(a)\n(b)\n(c)\nFigure 5.8\nHead tracking using CONDENSATION (Isard and Blake 1998)\nc⃝1998\nSpringer: (a) sample set representation of head estimate distribution; (b) multiple measure-\nments at each control vertex location; (c) multi-hypothesis tracking over time.\nParticle ﬁltering techniques represent a probability distribution using a collection of weighted\npoint samples (Figure 5.7a) (Andrieu, de Freitas, Doucet et al. 2003; Bishop 2006; Koller\nand Friedman 2009). To update the locations of the samples according to the linear dy-\nnamics (deterministic drift), the centers of the samples are updated according to (5.18) and\nmultiple samples are generated for each point (Figure 5.7b). These are then perturbed to\naccount for the stochastic diffusion, i.e., their locations are moved by random vectors taken\nfrom the distribution of w.6 Finally, the weights of these samples are multiplied by the mea-\nsurement probability density, i.e., we take each sample and measure its likelihood given the\ncurrent (new) measurements. Because the point samples represent and propagate conditional\nestimates of the multi-modal density, Isard and Blake (1998) dubbed their algorithm CONdi-\ntional DENSity propagATION or CONDENSATION.\nFigure 5.8a shows what a factored sample of a head tracker might look like, drawing\na red B-spline contour for each of (a subset of) the particles being tracked. Figure 5.8b\nshows why the measurement density itself is often multi-modal: the locations of the edges\nperpendicular to the spline curve can have multiple local maxima due to background clutter.\nFinally, Figure 5.8c shows the temporal evolution of the conditional density (x coordinate of\nthe head and shoulder tracker centroid) as it tracks several people over time.\nhypothesis tracking (Bar-Shalom and Fortmann 1988; Cham and Rehg 1999).\n6 Note that because of the structure of these steps, non-linear dynamics and non-Gaussian noise can be used.\n280\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\nFigure 5.9\nIntelligent scissors: (a) as the mouse traces the white path, the scissors follow\nthe orange path along the object boundary (the green curves show intermediate positions)\n(Mortensen and Barrett 1995) c⃝1995 ACM; (b) regular scissors can sometimes jump to a\nstronger (incorrect) boundary; (c) after training to the previous segment, similar edge proﬁles\nare preferred (Mortensen and Barrett 1998) c⃝1995 Elsevier.\n5.1.3 Scissors\nActive contours allow a user to roughly specify a boundary of interest and have the system\nevolve the contour towards a more accurate location as well as track it over time. The results\nof this curve evolution, however, may be unpredictable and may require additional user-based\nhints to achieve the desired result.\nAn alternative approach is to have the system optimize the contour in real time as the\nuser is drawing (Mortensen 1999). The intelligent scissors system developed by Mortensen\nand Barrett (1995) does just that. As the user draws a rough outline (the white curve in\nFigure 5.9a), the system computes and draws a better curve that clings to high-contrast edges\n(the orange curve).\nTo compute the optimal curve path (live-wire), the image is ﬁrst pre-processed to associate\nlow costs with edges (links between neighboring horizontal, vertical, and diagonal, i.e., N8\nneighbors) that are likely to be boundary elements. Their system uses a combination of zero-\ncrossing, gradient magnitudes, and gradient orientations to compute these costs.\nNext, as the user traces a rough curve, the system continuously recomputes the lowest-\ncost path between the starting seed point and the current mouse location using Dijkstra’s al-\ngorithm, a breadth-ﬁrst dynamic programming algorithm that terminates at the current target\nlocation.\nIn order to keep the system from jumping around unpredictably, the system will “freeze”\nthe curve to date (reset the seed point) after a period of inactivity. To prevent the live wire\nfrom jumping onto adjacent higher-contrast contours, the system also “learns” the intensity\n5.1 Active contours\n281\n-1\n+1\nϕ = 0\nϕ∆\ng(I)\nFigure 5.10\nLevel set evolution for a geodesic active contour. The embedding function φ\nis updated based on the curvature of the underlying surface modulated by the edge/speed\nfunction g(I), as well as the gradient of g(I), thereby attracting it to strong edges.\nproﬁle under the current optimized curve, and uses this to preferentially keep the wire moving\nalong the same (or a similar looking) boundary (Figure 5.9b–c).\nSeveral extensions have been proposed to the basic algorithm, which works remarkably\nwell even in its original form. Mortensen and Barrett (1999) use tobogganing, which is a\nsimple form of watershed region segmentation, to pre-segment the image into regions whose\nboundaries become candidates for optimized curve paths. The resulting region boundaries\nare turned into a much smaller graph, where nodes are located wherever three or four regions\nmeet. The Dijkstra algorithm is then run on this reduced graph, resulting in much faster (and\noften more stable) performance. Another extension to intelligent scissors is to use a proba-\nbilistic framework that takes into account the current trajectory of the boundary, resulting in\na system called JetStream (P´erez, Blake, and Gangnet 2001).\nInstead of re-computing an optimal curve at each time instant, a simpler system can be\ndeveloped by simply “snapping” the current mouse position to the nearest likely boundary\npoint (Gleicher 1995). Applications of these boundary extraction techniques to image cutting\nand pasting are presented in Section 10.4.\n5.1.4 Level Sets\nA limitation of active contours based on parametric curves of the form f(s), e.g., snakes, B-\nsnakes, and CONDENSATION, is that it is challenging to change the topology of the curve\nas it evolves. (McInerney and Terzopoulos (1999, 2000) describe one approach to doing\nthis.) Furthermore, if the shape changes dramatically, curve reparameterization may also be\nrequired.\nAn alternative representation for such closed contours is to use a level set, where the zero-\ncrossing(s) of a characteristic (or signed distance (Section 3.3.3)) function deﬁne the curve.",
  "image_path": "page_302.jpg",
  "pages": [
    301,
    302,
    303
  ]
}