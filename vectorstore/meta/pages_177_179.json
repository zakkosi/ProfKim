{
  "doc_id": "pages_177_179",
  "text": "3.5 Pyramids and wavelets\n155\nfine\nmedium\ncoarse\nl = 0\nl = 1\nl = 2\nl = 3\nl = 4\nfine\nmedium\ncoarse\nl = 0\nl = 1\nl = 2\n(a)\n(b)\nFigure 3.36\nMultiresolution pyramids: (a) pyramid with half-octave (quincunx) sampling\n(odd levels are colored gray for clarity). (b) wavelet pyramid—each wavelet level stores 3/4\nof the original pixels (usually the horizontal, vertical, and mixed gradients), so that the total\nnumber of wavelet coefﬁcients and original pixels is the same.\nWainwright et al. 2003).\nSince both image pyramids and wavelets decompose an image into multi-resolution de-\nscriptions that are localized in both space and frequency, how do they differ? The usual\nanswer is that traditional pyramids are overcomplete, i.e., they use more pixels than the orig-\ninal image to represent the decomposition, whereas wavelets provide a tight frame, i.e., they\nkeep the size of the decomposition the same as the image (Figure 3.36b). However, some\nwavelet families are, in fact, overcomplete in order to provide better shiftability or steering in\norientation (Simoncelli, Freeman, Adelson et al. 1992). A better distinction, therefore, might\nbe that wavelets are more orientation selective than regular band-pass pyramids.\nHow are two-dimensional wavelets constructed? Figure 3.37a shows a high-level dia-\ngram of one stage of the (recursive) coarse-to-ﬁne construction (analysis) pipeline alongside\nthe complementary re-construction (synthesis) stage. In this diagram, the high-pass ﬁlter\nfollowed by decimation keeps 3/4 of the original pixels, while 1/4 of the low-frequency coef-\nﬁcients are passed on to the next stage for further analysis. In practice, the ﬁltering is usually\nbroken down into two separable sub-stages, as shown in Figure 3.37b. The resulting three\nwavelet images are sometimes called the high–high (HH), high–low (HL), and low–high\n(LH) images. The high–low and low–high images accentuate the horizontal and vertical\nedges and gradients, while the high–high image contains the less frequently occurring mixed\nderivatives.\nHow are the high-pass H and low-pass L ﬁlters shown in Figure 3.37b chosen and how\ncan the corresponding reconstruction ﬁlters I and F be computed? Can ﬁlters be designed\n156\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nH\nL\n↓2\n↓2\nL1\nQ\nF\nI\n↑2\n↑2\nLH0\nHH0\nHL0\nLH0\nHH0\nHL0\nL1\n(a)\nHh\n↓2h\nL1\nLH0\nHH0\nHL0\nHv\n↓2v\nLv\n↓2v\nLh\n↓2h\nHv\n↓2v\nLv\n↓2v\nL1\nLH0\nHH0\nHL0\nQ\nQ\nQ\nFh\n↑2h\nFv\n↑2v\nIv\n↑2v\nIh\n↑2h\nFv\n↑2v\nIv\n↑2v\n(b)\nFigure 3.37 Two-dimensional wavelet decomposition: (a) high-level diagram showing the\nlow-pass and high-pass transforms as single boxes; (b) separable implementation, which in-\nvolves ﬁrst performing the wavelet transform horizontally and then vertically. The I and F\nboxes are the interpolation and ﬁltering boxes required to re-synthesize the image from its\nwavelet components.\nthat all have ﬁnite impulse responses? This topic has been the main subject of study in the\nwavelet community for over two decades. The answer depends largely on the intended ap-\nplication, e.g., whether the wavelets are being used for compression, image analysis (feature\nﬁnding), or denoising. Simoncelli and Adelson (1990b) show (in Table 4.1) some good odd-\nlength quadrature mirror ﬁlter (QMF) coefﬁcients that seem to work well in practice.\nSince the design of wavelet ﬁlters is such a tricky art, is there perhaps a better way? In-\ndeed, a simpler procedure is to split the signal into its even and odd components and then\nperform trivially reversible ﬁltering operations on each sequence to produce what are called\nlifted wavelets (Figures 3.38 and 3.39). Sweldens (1996) gives a wonderfully understandable\nintroduction to the lifting scheme for second-generation wavelets, followed by a comprehen-\nsive review (Sweldens 1997).\nAs Figure 3.38 demonstrates, rather than ﬁrst ﬁltering the whole input sequence (image)\n3.5 Pyramids and wavelets\n157\nH\nL\n↓2e\n↓2o\nL1\nQ\nF\nI\n↑2e\n↑2o\nH0\nL1\nH0\n(a)\nQ\n↓2o\n↓2e\nL\nC\nL1\nH0\nL1\nH0\n↑2o\n↑2e\nL\nC\n–\n–\n(b)\nFigure 3.38 One-dimensional wavelet transform: (a) usual high-pass + low-pass ﬁlters fol-\nlowed by odd (↓2o) and even (↓2e) downsampling; (b) lifted version, which ﬁrst selects the\nodd and even subsequences and then applies a low-pass prediction stage L and a high-pass\ncorrection stage C in an easily reversible manner.\nwith high-pass and low-pass ﬁlters and then keeping the odd and even sub-sequences, the\nlifting scheme ﬁrst splits the sequence into its even and odd sub-components. Filtering the\neven sequence with a low-pass ﬁlter L and subtracting the result from the even sequence\nis trivially reversible: simply perform the same ﬁltering and then add the result back in.\nFurthermore, this operation can be performed in place, resulting in signiﬁcant space savings.\nThe same applies to ﬁltering the even sequence with the correction ﬁlter C, which is used to\nensure that the even sequence is low-pass. A series of such lifting steps can be used to create\nmore complex ﬁlter responses with low computational cost and guaranteed reversibility.\nThis process can perhaps be more easily understood by considering the signal processing\ndiagram in Figure 3.39. During analysis, the average of the even values is subtracted from the\nodd value to obtain a high-pass wavelet coefﬁcient. However, the even samples still contain\nan aliased sample of the low-frequency signal. To compensate for this, a small amount of the\nhigh-pass wavelet is added back to the even sequence so that it is properly low-pass ﬁltered.\n(It is easy to show that the effective low-pass ﬁlter is [−1/8, 1/4, 3/4, 1/4, −1/8], which is in-",
  "image_path": "page_178.jpg",
  "pages": [
    177,
    178,
    179
  ]
}