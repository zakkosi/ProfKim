{
  "doc_id": "pages_218_220",
  "text": "196\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nEx 3.6: Histogram equalization\nCompute the gray level (luminance) histogram for an im-\nage and equalize it so that the tones look better (and the image is less sensitive to exposure\nsettings). You may want to use the following steps:\n1. Convert the color image to luminance (Section 3.1.2).\n2. Compute the histogram, the cumulative distribution, and the compensation transfer\nfunction (Section 3.1.4).\n3. (Optional) Try to increase the “punch” in the image by ensuring that a certain fraction\nof pixels (say, 5%) are mapped to pure black and white.\n4. (Optional) Limit the local gain f ′(I) in the transfer function. One way to do this is to\nlimit f(I) < γI or f ′(I) < γ while performing the accumulation (3.9), keeping any\nunaccumulated values “in reserve”. (I’ll let you ﬁgure out the exact details.)\n5. Compensate the luminance channel through the lookup table and re-generate the color\nimage using color ratios (2.116).\n6. (Optional) Color values that are clipped in the original image, i.e., have one or more\nsaturated color channels, may appear unnatural when remapped to a non-clipped value.\nExtend your algorithm to handle this case in some useful way.\nEx 3.7: Local histogram equalization\nCompute the gray level (luminance) histograms for\neach patch, but add to vertices based on distance (a spline).\n1. Build on Exercise 3.6 (luminance computation).\n2. Distribute values (counts) to adjacent vertices (bilinear).\n3. Convert to CDF (look-up functions).\n4. (Optional) Use low-pass ﬁltering of CDFs.\n5. Interpolate adjacent CDFs for ﬁnal lookup.\nEx 3.8: Padding for neighborhood operations\nWrite down the formulas for computing\nthe padded pixel values ˜f(i, j) as a function of the original pixel values f(k, l) and the image\nwidth and height (M, N) for each of the padding modes shown in Figure 3.13. For example,\nfor replication (clamping),\n˜f(i, j) = f(k, l),\nk = max(0, min(M −1, i)),\nl = max(0, min(N −1, j)),\n(Hint: you may want to use the min, max, mod, and absolute value operators in addition to\nthe regular arithmetic operators.)\n3.9 Exercises\n197\n• Describe in more detail the advantages and disadvantages of these various modes.\n• (Optional) Check what your graphics card does by drawing a texture-mapped rectangle\nwhere the texture coordinates lie beyond the [0.0, 1.0] range and using different texture\nclamping modes.\nEx 3.9: Separable ﬁlters\nImplement convolution with a separable kernel. The input should\nbe a grayscale or color image along with the horizontal and vertical kernels. Make sure\nyou support the padding mechanisms developed in the previous exercise. You will need this\nfunctionality for some of the later exercises. If you already have access to separable ﬁltering\nin an image processing package you are using (such as IPL), skip this exercise.\n• (Optional) Use Pietro Perona’s (1995) technique to approximate convolution as a sum\nof a number of separable kernels. Let the user specify the number of kernels and report\nback some sensible metric of the approximation ﬁdelity.\nEx 3.10: Discrete Gaussian ﬁlters\nDiscuss the following issues with implementing a dis-\ncrete Gaussian ﬁlter:\n• If you just sample the equation of a continuous Gaussian ﬁlter at discrete locations,\nwill you get the desired properties, e.g., will the coefﬁcients sum up to 0? Similarly, if\nyou sample a derivative of a Gaussian, do the samples sum up to 0 or have vanishing\nhigher-order moments?\n• Would it be preferable to take the original signal, interpolate it with a sinc, blur with a\ncontinuous Gaussian, then pre-ﬁlter with a sinc before re-sampling? Is there a simpler\nway to do this in the frequency domain?\n• Would it make more sense to produce a Gaussian frequency response in the Fourier\ndomain and to then take an inverse FFT to obtain a discrete ﬁlter?\n• How does truncation of the ﬁlter change its frequency response? Does it introduce any\nadditional artifacts?\n• Are the resulting two-dimensional ﬁlters as rotationally invariant as their continuous\nanalogs? Is there some way to improve this? In fact, can any 2D discrete (separable or\nnon-separable) ﬁlter be truly rotationally invariant?\nEx 3.11: Sharpening, blur, and noise removal\nImplement some softening, sharpening, and\nnon-linear diffusion (selective sharpening or noise removal) ﬁlters, such as Gaussian, median,\nand bilateral (Section 3.3.1), as discussed in Section 3.4.4.\nTake blurry or noisy images (shooting in low light is a good way to get both) and try to\nimprove their appearance and legibility.\n198\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nEx 3.12: Steerable ﬁlters\nImplement Freeman and Adelson’s (1991) steerable ﬁlter algo-\nrithm. The input should be a grayscale or color image and the output should be a multi-banded\nimage consisting of G0◦\n1 and G90◦\n1\n. The coefﬁcients for the ﬁlters can be found in the paper\nby Freeman and Adelson (1991).\nTest the various order ﬁlters on a number of images of your choice and see if you can\nreliably ﬁnd corner and intersection features. These ﬁlters will be quite useful later to detect\nelongated structures, such as lines (Section 4.3).\nEx 3.13: Distance transform\nImplement some (raster-scan) algorithms for city block and\nEuclidean distance transforms. Can you do it without peeking at the literature (Danielsson\n1980; Borgefors 1986)? If so, what problems did you come across and resolve?\nLater on, you can use the distance functions you compute to perform feathering during\nimage stitching (Section 9.3.2).\nEx 3.14: Connected components\nImplement one of the connected component algorithms\nfrom Section 3.3.4 or Section 2.3 from Haralick and Shapiro’s book (1992) and discuss its\ncomputational complexity.\n• Threshold or quantize an image to obtain a variety of input labels and then compute the\narea statistics for the regions that you ﬁnd.\n• Use the connected components that you have found to track or match regions in differ-\nent images or video frames.\nEx 3.15: Fourier transform\nProve the properties of the Fourier transform listed in Ta-\nble 3.1 and derive the formulas for the Fourier transforms listed in Tables 3.2 and 3.3. These\nexercises are very useful if you want to become comfortable working with Fourier transforms,\nwhich is a very useful skill when analyzing and designing the behavior and efﬁciency of many\ncomputer vision algorithms.\nEx 3.16: Wiener ﬁltering\nEstimate the frequency spectrum of your personal photo collec-\ntion and use it to perform Wiener ﬁltering on a few images with varying degrees of noise.\n1. Collect a few hundred of your images by re-scaling them to ﬁt within a 512 × 512\nwindow and cropping them.\n2. Take their Fourier transforms, throw away the phase information, and average together\nall of the spectra.\n3. Pick two of your favorite images and add varying amounts of Gaussian noise, σn ∈\n{1, 2, 5, 10, 20} gray levels.",
  "image_path": "page_219.jpg",
  "pages": [
    218,
    219,
    220
  ]
}