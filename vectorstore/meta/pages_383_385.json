{
  "doc_id": "pages_383_385",
  "text": "7.3 Factorization\n361\nIf we knew the correct values of ηj = t−1\nzj and the structure and motion parameters Rj and\npi, we could cross-multiply the left hand side (visible point measurements xji and yji) by the\ndenominator and get corrected values, for which the bilinear projection model (7.40) is exact.\nIn practice, after an initial reconstruction, the values of ηj can be estimated independently\nfor each frame by comparing reconstructed and sensed point positions. (The third row of the\nrotation matrix rzj is always available as the cross-product of the ﬁrst two rows.) Note that\nsince the ηj are determined from the image measurements, the cameras do not have to be\npre-calibrated, i.e., their focal lengths can be recovered from fj = sj/ηj.\nOnce the ηj have been estimated, the feature locations can then be corrected before apply-\ning another round of factorization. Note that because of the initial depth reversal ambiguity,\nboth reconstructions have to be tried while calculating ηj. (The incorrect reconstruction will\nresult in a negative ηj, which is not physically meaningful.) Christy and Horaud (1996) report\nthat their algorithm usually converges in three to ﬁve iterations, with the majority of the time\nspent in the SVD computation.\nAn alternative approach, which does not assume partially calibrated cameras (known op-\ntical center, square pixels, and zero skew) is to perform a fully projective factorization (Sturm\nand Triggs 1996; Triggs 1996). In this case, the inclusion of the third row of the camera\nmatrix in (7.40) is equivalent to multiplying each reconstructed measurement xji = M jpi\nby its inverse (projective) depth ηji = d−1\nji = 1/(P j2pi) or, equivalently, multiplying each\nmeasured position by its projective depth dji,\nˆ\nX =\n\n\nd11˜x11\n· · ·\nd1i˜x1i\n· · ·\nd1N ˜x1N\n...\n...\n...\ndj1˜xj1\n· · ·\ndji˜xji\n· · ·\ndjN ˜xjN\n...\n...\n...\ndM1˜xM1 · · · dMi˜xMi · · · dMN ˜xMN\n\n\n= ˆ\nM ˆS.\n(7.48)\nIn the original paper by Sturm and Triggs (1996), the projective depths dji are obtained from\ntwo-frame reconstructions, while in later work (Triggs 1996; Oliensis and Hartley 2007), they\nare initialized to dji = 1 and updated after each iteration. Oliensis and Hartley (2007) present\nan update formula that is guaranteed to converge to a ﬁxed point. None of these authors\nsuggest actually estimating the third row of P j as part of the projective depth computations.\nIn any case, it is unclear when a fully projective reconstruction would be preferable to a\npartially calibrated one, especially if they are being used to initialize a full bundle adjustment\nof all the parameters.\nOne of the attractions of factorization methods is that they provide a “closed form” (some-\ntimes called a “linear”) method to initialize iterative techniques such as bundle adjustment.\nAn alternative initialization technique is to estimate the homographies corresponding to some\n362\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\n(d)\nFigure 7.6\n3D teacup model reconstructed from a 240-frame video sequence (Tomasi and\nKanade 1992) c⃝1992 Springer: (a) ﬁrst frame of video; (b) last frame of video; (c) side\nview of 3D model; (d) top view of 3D model.\ncommon plane seen by all the cameras (Rother and Carlsson 2002). In a calibrated camera\nsetting, this can correspond to estimating consistent rotations for all of the cameras, for ex-\nample, using matched vanishing points (Antone and Teller 2002). Once these have been\nrecovered, the camera positions can then be obtained by solving a linear system (Antone and\nTeller 2002; Rother and Carlsson 2002; Rother 2003).\n7.3.2 Application: Sparse 3D model extraction\nOnce a multi-view 3D reconstruction of the scene has been estimated, it then becomes possi-\nble to create a texture-mapped 3D model of the object and to look at it from new directions.\nThe ﬁrst step is to create a denser 3D model than the sparse point cloud that structure\nfrom motion produces. One alternative is to run dense multi-view stereo (Sections 11.3–\n11.6). Alternatively, a simpler technique such as 3D triangulation can be used, as shown in\nFigure 7.6, in which 207 reconstructed 3D points are triangulated to produce a surface mesh.\nIn order to create a more realistic model, a texture map can be extracted for each trian-\ngle face. The equations to map points on the surface of a 3D triangle to a 2D image are\nstraightforward: just pass the local 2D coordinates on the triangle through the 3 × 4 camera\nprojection matrix to obtain a 3 × 3 homography (planar perspective projection). When mul-\ntiple source images are available, as is usually the case in multi-view reconstruction, either\nthe closest and most fronto-parallel image can be used or multiple images can be blended in\nto deal with view-dependent foreshortening (Wang, Kang, Szeliski et al. 2001) or to obtain\nsuper-resolved results (Goldluecke and Cremers 2009) Another alternative is to create a sep-\narate texture map from each reference camera and to blend between them during rendering,\nwhich is known as view-dependent texture mapping (Section 13.1.1) (Debevec, Taylor, and\nMalik 1996; Debevec, Yu, and Borshukov 1998).\n7.4 Bundle adjustment\n363\nfC(x)\n= Kx\nfj\nfP(x)\n= p/z\nfR(x)\n= Rjx\nqj\nfT(x)\n= x-cj\ncj\npi\ny(1)\ny(2)\ny(4)\nfRD(x)\n= ...\ny(3)\nκj\nρ(||x-xij||Σ)\neij\nΣij\nxij~\nxij\n^\n^\nFigure 7.7\nA set of chained transforms for projecting a 3D point pi into a 2D measure-\nment xij through a series of transformations f (k), each of which is controlled by its own\nset of parameters. The dashed lines indicate the ﬂow of information as partial derivatives\nare computed during a backward pass. The formula for the radial distortion function is\nf RD(x) = (1 + κ1r2 + κ2r4)x.\n7.4 Bundle adjustment\nAs we have mentioned several times before, the most accurate way to recover structure and\nmotion is to perform robust non-linear minimization of the measurement (re-projection) er-\nrors, which is commonly known in the photogrammetry (and now computer vision) commu-\nnities as bundle adjustment.13 Triggs, McLauchlan, Hartley et al. (1999) provide an excellent\noverview of this topic, including its historical development, pointers to the photogrammetry\nliterature (Slama 1980; Atkinson 1996; Kraus 1997), and subtle issues with gauge ambigu-\nities. The topic is also treated in depth in textbooks and surveys on multi-view geometry\n(Faugeras and Luong 2001; Hartley and Zisserman 2004; Moons, Van Gool, and Vergauwen\n2010).\nWe have already introduced the elements of bundle adjustment in our discussion on iter-\native pose estimation (Section 6.2.2), i.e., Equations (6.42–6.48) and Figure 6.5. The biggest\ndifference between these formulas and full bundle adjustment is that our feature location mea-\nsurements xij now depend not only on the point (track index) i but also on the camera pose\nindex j,\nxij = f(pi, Rj, cj, Kj),\n(7.49)\nand that the 3D point positions pi are also being simultaneously updated. In addition, it is\ncommon to add a stage for radial distortion parameter estimation (2.78),\nf RD(x) = (1 + κ1r2 + κ2r4)x,\n(7.50)\nif the cameras being used have not been pre-calibrated, as shown in Figure 7.7.\n13 The term ”bundle” refers to the bundles of rays connecting camera centers to 3D points and the term ”adjust-\nment” refers to the iterative minimization of re-projection error. Alternative terms for this in the vision community\ninclude optimal motion estimation (Weng, Ahuja, and Huang 1993) and non-linear least squares (Appendix A.3)\n(Taylor, Kriegman, and Anandan 1991; Szeliski and Kang 1994).",
  "image_path": "page_384.jpg",
  "pages": [
    383,
    384,
    385
  ]
}