{
  "doc_id": "pages_271_273",
  "text": "4.2 Edges\n249\n(a)\n(b)\n(c)\n(d)\n(e)\n(f)\nFigure 4.39 Image editing in the contour domain (Elder and Goldberg 2001) c⃝2001 IEEE:\n(a) and (d) original images; (b) and (e) extracted edges (edges to be deleted are marked in\nwhite); (c) and (f) reconstructed edited images.\ntance) transforms and region skeletons (Section 3.3.3) (Tek and Kimia 2003), and can be used\nto recognize objects based on their contour shape (Sebastian and Kimia 2005). More local de-\nscriptors of curve shape such as shape contexts (Belongie, Malik, and Puzicha 2002) can also\nbe used for recognition and are potentially more robust to missing parts due to occlusions.\nThe ﬁeld of contour detection and linking continues to evolve rapidly and now includes\ntechniques for global contour grouping, boundary completion, and junction detection (Maire,\nArbelaez, Fowlkes et al. 2008), as well as grouping contours into likely regions (Arbel´aez,\nMaire, Fowlkes et al. 2010) and wide-baseline correspondence (Meltzer and Soatto 2008).\n4.2.3 Application: Edge editing and enhancement\nWhile edges can serve as components for object recognition or features for matching, they\ncan also be used directly for image editing.\nIn fact, if the edge magnitude and blur estimate are kept along with each edge, a visually\nsimilar image can be reconstructed from this information (Elder 1999). Based on this princi-\nple, Elder and Goldberg (2001) propose a system for “image editing in the contour domain”.\nTheir system allows users to selectively remove edges corresponding to unwanted features\nsuch as specularities, shadows, or distracting visual elements. After reconstructing the image\nfrom the remaining edges, the undesirable visual features have been removed (Figure 4.39).\n250\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\nFigure 4.40 Approximating a curve (shown in black) as a polyline or B-spline: (a) original\ncurve and a polyline approximation shown in red; (b) successive approximation by recursively\nﬁnding points furthest away from the current approximation; (c) smooth interpolating spline,\nshown in dark blue, ﬁt to the polyline vertices.\nAnother potential application is to enhance perceptually salient edges while simplifying\nthe underlying image to produce a cartoon-like or “pen-and-ink” stylized image (DeCarlo and\nSantella 2002). This application is discussed in more detail in Section 10.5.2.\n4.3 Lines\nWhile edges and general curves are suitable for describing the contours of natural objects,\nthe man-made world is full of straight lines. Detecting and matching these lines can be\nuseful in a variety of applications, including architectural modeling, pose estimation in urban\nenvironments, and the analysis of printed document layouts.\nIn this section, we present some techniques for extracting piecewise linear descriptions\nfrom the curves computed in the previous section. We begin with some algorithms for approx-\nimating a curve as a piecewise-linear polyline. We then describe the Hough transform, which\ncan be used to group edgels into line segments even across gaps and occlusions. Finally, we\ndescribe how 3D lines with common vanishing points can be grouped together. These van-\nishing points can be used to calibrate a camera and to determine its orientation relative to a\nrectahedral scene, as described in Section 6.3.2.\n4.3.1 Successive approximation\nAs we saw in Section 4.2.2, describing a curve as a series of 2D locations xi = x(si) provides\na general representation suitable for matching and further processing. In many applications,\nhowever, it is preferable to approximate such a curve with a simpler representation, e.g., as a\npiecewise-linear polyline or as a B-spline curve (Farin 1996), as shown in Figure 4.40.\nMany techniques have been developed over the years to perform this approximation,\nwhich is also known as line simpliﬁcation. One of the oldest, and simplest, is the one proposed\n4.3 Lines\n251\nθi\nri\nθ\n(xi,yi)\n0\n360\n0\nrmax\nr\n-rmax\nx\ny\n(a)\n(b)\nFigure 4.41 Original Hough transform: (a) each point votes for a complete family of poten-\ntial lines ri(θ) = xi cos θ + yi sin θ; (b) each pencil of lines sweeps out a sinusoid in (r, θ);\ntheir intersection provides the desired line equation.\nby Ramer (1972) and Douglas and Peucker (1973), who recursively subdivide the curve at\nthe point furthest away from the line joining the two endpoints (or the current coarse polyline\napproximation), as shown in Figure 4.40. Hershberger and Snoeyink (1992) provide a more\nefﬁcient implementation and also cite some of the other related work in this area.\nOnce the line simpliﬁcation has been computed, it can be used to approximate the orig-\ninal curve. If a smoother representation or visualization is desired, either approximating or\ninterpolating splines or curves can be used (Sections 3.5.1 and 5.1.1) (Szeliski and Ito 1986;\nBartels, Beatty, and Barsky 1987; Farin 1996), as shown in Figure 4.40c.\n4.3.2 Hough transforms\nWhile curve approximation with polylines can often lead to successful line extraction, lines\nin the real world are sometimes broken up into disconnected components or made up of many\ncollinear line segments. In many cases, it is desirable to group such collinear segments into\nextended lines. At a further processing stage (described in Section 4.3.3), we can then group\nsuch lines into collections with common vanishing points.\nThe Hough transform, named after its original inventor (Hough 1962), is a well-known\ntechnique for having edges “vote” for plausible line locations (Duda and Hart 1972; Ballard\n1981; Illingworth and Kittler 1988). In its original formulation (Figure 4.41), each edge point\nvotes for all possible lines passing through it, and lines corresponding to high accumulator or\nbin values are examined for potential line ﬁts.9 Unless the points on a line are truly punctate,\na better approach (in my experience) is to use the local orientation information at each edgel\nto vote for a single accumulator cell (Figure 4.42), as described below. A hybrid strategy,\n9 The Hough transform can also be generalized to look for other geometric features such as circles (Ballard\n1981), but we do not cover such extensions in this book.",
  "image_path": "page_272.jpg",
  "pages": [
    271,
    272,
    273
  ]
}