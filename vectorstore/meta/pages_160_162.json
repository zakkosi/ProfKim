{
  "doc_id": "pages_160_162",
  "text": "138\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n• Laplacian of Gaussian: The second derivative of a Gaussian of width σ,\nLoG(x; σ) = (x2\nσ4 −1\nσ2 )G(x; σ)\n(3.59)\nhas a band-pass response of\n−\n√\n2π\nσ\nω2G(ω; σ−1)\n(3.60)\nas its Fourier transform.\n• Gabor: The even Gabor function, which is the product of a cosine of frequency ω0 and\na Gaussian of width σ, has as its transform the sum of the two Gaussians of width σ−1\ncentered at ω = ±ω0. The odd Gabor function, which uses a sine, is the difference\nof two such Gaussians. Gabor functions are often used for oriented and band-pass\nﬁltering, since they can be more frequency selective than Gaussian derivatives.\n• Unsharp mask: The unsharp mask introduced in (3.22) has as its transform a unit\nresponse with a slight boost at higher frequencies.\n• Windowed sinc: The windowed (masked) sinc function shown in Table 3.2 has a re-\nsponse function that approximates an ideal low-pass ﬁlter better and better as additional\nside lobes are added (W is increased). Figure 3.29 shows the shapes of these such ﬁl-\nters along with their Fourier transforms. For these examples, we use a one-lobe raised\ncosine,\nrcos(x) = 1\n2(1 + cos πx)box(x),\n(3.61)\nalso known as the Hann window, as the windowing function. Wolberg (1990) and\nOppenheim, Schafer, and Buck (1999) discuss additional windowing functions, which\ninclude the Lanczos window, the positive ﬁrst lobe of a sinc function.\nWe can also compute the Fourier transforms for the small discrete kernels shown in Fig-\nure 3.14 (see Table 3.3). Notice how the moving average ﬁlters do not uniformly dampen\nhigher frequencies and hence can lead to ringing artifacts. The binomial ﬁlter (Gomes and\nVelho 1997) used as the “Gaussian” in Burt and Adelson’s (1983a) Laplacian pyramid (see\nSection 3.5), does a decent job of separating the high and low frequencies, but still leaves\na fair amount of high-frequency detail, which can lead to aliasing after downsampling. The\nSobel edge detector at ﬁrst linearly accentuates frequencies, but then decays at higher fre-\nquencies, and hence has trouble detecting ﬁne-scale edges, e.g., adjacent black and white\ncolumns. We look at additional examples of small kernel Fourier transforms in Section 3.5.2,\nwhere we study better kernels for pre-ﬁltering before decimation (size reduction).\n3.4 Fourier transforms\n139\nName\nKernel\nTransform\nPlot\nbox-3\n1\n3\n1\n1\n1\n1\n3(1 + 2 cos ω)\n-0.4\n-0.2\n0.0\n0.2\n0.4\n0.6\n0.8\n1.0\n0\n0.1\n0.2\n0.3\n0.4\n0.5\nbox-5\n1\n5\n1\n1\n1\n1\n1\n1\n5(1 + 2 cos ω + 2 cos 2ω)\n-0.4\n-0.2\n0.0\n0.2\n0.4\n0.6\n0.8\n1.0\n0\n0.1\n0.2\n0.3\n0.4\n0.5\nlinear\n1\n4\n1\n2\n1\n1\n2(1 + cos ω)\n-0.4\n-0.2\n0.0\n0.2\n0.4\n0.6\n0.8\n1.0\n0\n0.1\n0.2\n0.3\n0.4\n0.5\nbinomial\n1\n16\n1\n4\n6\n4\n1\n1\n4(1 + cos ω)2\n-0.4\n-0.2\n0.0\n0.2\n0.4\n0.6\n0.8\n1.0\n0\n0.1\n0.2\n0.3\n0.4\n0.5\nSobel\n1\n2\n−1\n0\n1\nsin ω\n-0.4\n-0.2\n0.0\n0.2\n0.4\n0.6\n0.8\n1.0\n0\n0.1\n0.2\n0.3\n0.4\n0.5\ncorner\n1\n2\n−1\n2\n−1\n1\n2(1 −cos ω)\n-0.4\n-0.2\n0.0\n0.2\n0.4\n0.6\n0.8\n1.0\n0\n0.1\n0.2\n0.3\n0.4\n0.5\nTable 3.3 Fourier transforms of the separable kernels shown in Figure 3.14.\n140\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n3.4.2 Two-dimensional Fourier transforms\nThe formulas and insights we have developed for one-dimensional signals and their trans-\nforms translate directly to two-dimensional images. Here, instead of just specifying a hor-\nizontal or vertical frequency ωx or ωy, we can create an oriented sinusoid of frequency\n(ωx, ωy),\ns(x, y) = sin(ωxx + ωyy).\n(3.62)\nThe corresponding two-dimensional Fourier transforms are then\nH(ωx, ωy) =\nZ ∞\n−∞\nZ ∞\n−∞\nh(x, y)e−j(ωxx+ωyy)dx dy,\n(3.63)\nand in the discrete domain,\nH(kx, ky) =\n1\nMN\nM−1\nX\nx=0\nN−1\nX\ny=0\nh(x, y)e−j2π\nkxx+kyy\nMN\n,\n(3.64)\nwhere M and N are the width and height of the image.\nAll of the Fourier transform properties from Table 3.1 carry over to two dimensions if\nwe replace the scalar variables x, ω, x0 and a with their 2D vector counterparts x = (x, y),\nω = (ωx, ωy), x0 = (x0, y0), and a = (ax, ay), and use vector inner products instead of\nmultiplications.\n3.4.3 Wiener ﬁltering\nWhile the Fourier transform is a useful tool for analyzing the frequency characteristics of a\nﬁlter kernel or image, it can also be used to analyze the frequency spectrum of a whole class\nof images.\nA simple model for images is to assume that they are random noise ﬁelds whose expected\nmagnitude at each frequency is given by this power spectrum Ps(ωx, ωy), i.e.,\n\n[S(ωx, ωy)]2\u000b\n= Ps(ωx, ωy),\n(3.65)\nwhere the angle brackets ⟨·⟩denote the expected (mean) value of a random variable.9 To\ngenerate such an image, we simply create a random Gaussian noise image S(ωx, ωy) where\neach “pixel” is a zero-mean Gaussian10 of variance Ps(ωx, ωy) and then take its inverse FFT.\nThe observation that signal spectra capture a ﬁrst-order description of spatial statistics\nis widely used in signal and image processing. In particular, assuming that an image is a\n9 The notation E[·] is also commonly used.\n10 We set the DC (i.e., constant) component at S(0, 0) to the mean grey level. See Algorithm C.1 in Appendix C.2\nfor code to generate Gaussian noise.",
  "image_path": "page_161.jpg",
  "pages": [
    160,
    161,
    162
  ]
}