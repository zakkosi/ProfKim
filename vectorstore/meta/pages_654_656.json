{
  "doc_id": "pages_654_656",
  "text": "632\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\ndescribe below.\nBecause of the large number of images involved, light ﬁelds and Lumigraphs can be quite\nvoluminous to store and transmit. Fortunately, as you can tell from Figure 13.7b, there is\na tremendous amount of redundancy (coherence) in a light ﬁeld, which can be made even\nmore explicit by ﬁrst computing a 3D model, as in the Lumigraph. A number of techniques\nhave been developed to compress and progressively transmit such representations (Gortler,\nGrzeszczuk, Szeliski et al. 1996; Levoy and Hanrahan 1996; Rademacher and Bishop 1998;\nMagnor and Girod 2000; Wood, Azuma, Aldinger et al. 2000; Shum, Kang, and Chan 2003;\nMagnor, Ramanathan, and Girod 2003; Shum, Chan, and Kang 2007).\n13.3.1 Unstructured Lumigraph\nWhen the images in a Lumigraph are acquired in an unstructured (irregular) manner, it can be\ncounterproductive to resample the resulting light rays into a regularly binned (s, t, u, v) data\nstructure. This is both because resampling always introduces a certain amount of aliasing and\nbecause the resulting gridded light ﬁeld can be populated very sparsely or irregularly.\nThe alternative is to render directly from the acquired images, by ﬁnding for each light ray\nin a virtual camera the closest pixels in the original images. The unstructured Lumigraph ren-\ndering (ULR) system of Buehler, Bosse, McMillan et al. (2001) describes how to select such\npixels by combining a number of ﬁdelity criteria, including epipole consistency (distance of\nrays to a source camera’s center), angular deviation (similar incidence direction on the sur-\nface), resolution (similar sampling density along the surface), continuity (to nearby pixels),\nand consistency (along the ray). These criteria can all be combined to determine a weighting\nfunction between each virtual camera’s pixel and a number of candidate input cameras from\nwhich it can draw colors. To make the algorithm more efﬁcient, the computations are per-\nformed by discretizing the virtual camera’s image plane using a regular grid overlaid with the\npolyhedral object mesh model and the input camera centers of projection and interpolating\nthe weighting functions between vertices.\nThe unstructured Lumigraph generalizes previous work in both image-based rendering\nand light ﬁeld rendering. When the input cameras are gridded, the ULR behaves the same way\nas regular Lumigraph rendering. When fewer cameras are available but the geometry is accu-\nrate, the algorithm behaves similarly to view-dependent texture mapping (Section 13.1.1).\n13.3.2 Surface light ﬁelds\nOf course, using a two-plane parameterization for a light ﬁeld is not the only possible choice.\n(It is the one usually presented ﬁrst since the projection equations and visualizations are the\neasiest to draw and understand.) As we mentioned on the topic of light ﬁeld compression,\n13.3 Light ﬁelds and Lumigraphs\n633\n(a)\n(b)\nFigure 13.9\nSurface light ﬁelds (Wood, Azuma, Aldinger et al. 2000) c⃝2000 ACM: (a)\nexample of a highly specular object with strong inter-reﬂections; (b) the surface light ﬁeld\nstores the light emanating from each surface point in all visible directions as a “Lumisphere”.\nif we know the 3D shape of the object or scene whose light ﬁeld is being modeled, we can\neffectively compress the ﬁeld because nearby rays emanating from nearby surface elements\nhave similar color values.\nIn fact, if the object is totally diffuse, ignoring occlusions, which can be handled using\n3D graphics algorithms or z-buffering, all rays passing through a given surface point will\nhave the same color value. Hence, the light ﬁeld “collapses” to the usual 2D texture-map\ndeﬁned over an object’s surface. Conversely, if the surface is totally specular (e.g., mirrored),\neach surface point reﬂects a miniature copy of the environment surrounding that point. In the\nabsence of inter-reﬂections (e.g., a convex object in a large open space), each surface point\nsimply reﬂects the far-ﬁeld environment map (Section 2.2.1), which again is two-dimensional.\nTherefore, is seems that re-parameterizing the 4D light ﬁeld to lie on the object’s surface can\nbe extremely beneﬁcial.\nThese observations underlie the surface light ﬁeld representation introduced by Wood,\nAzuma, Aldinger et al. (2000). In their system, an accurate 3D model is built of the object\nbeing represented. Then the Lumisphere of all rays emanating from each surface point is\nestimated or captured (Figure 13.9). Nearby Lumispheres will be highly correlated and hence\namenable to both compression and manipulation.\nTo estimate the diffuse component of each Lumisphere, a median ﬁltering over all visible\nexiting directions is ﬁrst performed for each channel. Once this has been subtracted from the\nLumisphere, the remaining values, which should consist mostly of the specular components,\nare reﬂected around the local surface normal (2.89), which turns each Lumisphere into a copy\nof the local environment around that point. Nearby Lumispheres can then be compressed\nusing predictive coding, vector quantization, or principal component analysis.\n634\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nThe decomposition into a diffuse and specular component can also be used to perform\nediting or manipulation operations, such as re-painting the surface, changing the specular\ncomponent of the reﬂection (e.g., by blurring or sharpening the specular Lumispheres), or\neven geometrically deforming the object while preserving detailed surface appearance.\n13.3.3 Application: Concentric mosaics\nA useful and simple version of light ﬁeld rendering is a panoramic image with parallax, i.e., a\nvideo or series of photographs taken from a camera swinging in front of some rotation point.\nSuch panoramas can be captured by placing a camera on a boom on a tripod, or even more\nsimply, by holding a camera at arm’s length while rotating your body around a ﬁxed axis.\nThe resulting set of images can be thought of as a concentric mosaic (Shum and He 1999;\nShum, Wang, Chai et al. 2002) or a layered depth panorama (Zheng, Kang, Cohen et al.\n2007). The term “concentric mosaic” comes from a particular structure that can be used to\nre-bin all of the sampled rays, essentially associating each column of pixels with the “radius”\nof the concentric circle to which it is tangent (Shum and He 1999; Peleg, Ben-Ezra, and Pritch\n2001).\nRendering from such data structures is fast and straightforward. If we assume that the\nscene is far enough away, for any virtual camera location, we can associate each column of\npixels in the virtual camera with the nearest column of pixels in the input image set. (For\na regularly captured set of images, this computation can be performed analytically.) If we\nhave some rough knowledge of the depth of such pixels, columns can be stretched vertically\nto compensate for the change in depth between the two cameras. If we have an even more\ndetailed depth map (Peleg, Ben-Ezra, and Pritch 2001; Li, Shum, Tang et al. 2004; Zheng,\nKang, Cohen et al. 2007), we can perform pixel-by-pixel depth corrections.\nWhile the virtual camera’s motion is constrained to lie in the plane of the original cameras\nand within the radius of the original capture ring, the resulting experience can exhibit complex\nrendering phenomena, such as reﬂections and translucencies, which cannot be captured using\na texture-mapped 3D model of the world. Exercise 13.10 has you construct a concentric\nmosaic rendering system from a series of hand-held photos or video.\n13.4 Environment mattes\nSo far in this chapter, we have dealt with view interpolation and light ﬁelds, which are tech-\nniques for modeling and rendering complex static scenes seen from different viewpoints.\nWhat if instead of moving around a virtual camera, we take a complex, refractive object,\nsuch as the water goblet shown in Figure 13.10, and place it in front of a new background?",
  "image_path": "page_655.jpg",
  "pages": [
    654,
    655,
    656
  ]
}