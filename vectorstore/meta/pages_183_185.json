{
  "doc_id": "pages_183_185",
  "text": "3.5 Pyramids and wavelets\n161\n(a)\n(b)\n(c)\n(d)\n(e)\n(f)\n(g)\n(h)\n(i)\n(j)\n(k)\n(l)\nFigure 3.42 Laplacian pyramid blending details (Burt and Adelson 1983b) c⃝1983 ACM.\nThe ﬁrst three rows show the high, medium, and low frequency parts of the Laplacian pyramid\n(taken from levels 0, 2, and 4). The left and middle columns show the original apple and\norange images weighted by the smooth interpolation functions, while the right column shows\nthe averaged contributions.\n162\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\n(d)\nFigure 3.43 Laplacian pyramid blend of two images of arbitrary shape (Burt and Adelson\n1983b) c⃝1983 ACM: (a) ﬁrst input image; (b) second input image; (c) region mask; (d)\nblended image.\nmultiplied by its corresponding Gaussian mask and the sum of these two weighted pyramids\nis then used to construct the ﬁnal image (Figure 3.42, right column).\nFigure 3.43 shows that this process can be applied to arbitrary mask images with sur-\nprising results. It is also straightforward to extend the pyramid blend to an arbitrary number\nof images whose pixel provenance is indicated by an integer-valued label image (see Exer-\ncise 3.20). This is particularly useful in image stitching and compositing applications, where\nthe exposures may vary between different images, as described in Section 9.3.4.\n3.6 Geometric transformations\nIn the previous sections, we saw how interpolation and decimation could be used to change\nthe resolution of an image. In this section, we look at how to perform more general transfor-\nmations, such as image rotations or general warps. In contrast to the point processes we saw\nin Section 3.1, where the function applied to an image transforms the range of the image,\ng(x) = h(f(x)),\n(3.87)\n3.6 Geometric transformations\n163\nf\nx\nh\nf\nf\ng\nh\ng\nh\nh\ng\nx\nf\nx\ng\nx\nFigure 3.44 Image warping involves modifying the domain of an image function rather than\nits range.\ny\nx\nsimilarity\nEuclidean\naffine\nprojective\ntranslation\nFigure 3.45 Basic set of 2D geometric image transformations.\nhere we look at functions that transform the domain,\ng(x) = f(h(x))\n(3.88)\n(see Figure 3.44).\nWe begin by studying the global parametric 2D transformation ﬁrst introduced in Sec-\ntion 2.1.2. (Such a transformation is called parametric because it is controlled by a small\nnumber of parameters.) We then turn our attention to more local general deformations such as\nthose deﬁned on meshes (Section 3.6.2). Finally, we show how image warps can be combined\nwith cross-dissolves to create interesting morphs (in-between animations) in Section 3.6.3.\nFor readers interested in more details on these topics, there is an excellent survey by Heck-\nbert (1986) as well as very accessible textbooks by Wolberg (1990), Gomes, Darsa, Costa\net al. (1999) and Akenine-M¨oller and Haines (2002). Note that Heckbert’s survey is on tex-\nture mapping, which is how the computer graphics community refers to the topic of warping\nimages onto surfaces.\n3.6.1 Parametric transformations\nParametric transformations apply a global deformation to an image, where the behavior of the\ntransformation is controlled by a small number of parameters. Figure 3.45 shows a few ex-",
  "image_path": "page_184.jpg",
  "pages": [
    183,
    184,
    185
  ]
}