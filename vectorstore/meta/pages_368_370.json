{
  "doc_id": "pages_368_370",
  "text": "346\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\np\nx1\nx0\nR0\nc0\nc1\nR1\nv0\nv1\nd0\nd1\nq0\n^\n^\nq1\nFigure 7.2\n3D point triangulation by ﬁnding the point p that lies nearest to all of the optical\nrays cj + djˆvj.\nwhich has a minimum at dj = ˆvj · (p −cj). Hence,\nqj = cj + (ˆvjˆvT\nj )(p −cj) = cj + (p −cj)∥,\n(7.2)\nin the notation of Equation (2.29), and the squared distance between p and qj is\nr2\nj = ∥(I −ˆvjˆvT\nj )(p −cj)∥2 = ∥(p −cj)⊥∥2.\n(7.3)\nThe optimal value for p, which lies closest to all of the rays, can be computed as a regular\nleast squares problem by summing over all the r2\nj and ﬁnding the optimal value of p,\np =\n\nX\nj\n(I −ˆvjˆvT\nj )\n\n\n−1 \nX\nj\n(I −ˆvjˆvT\nj )cj\n\n.\n(7.4)\nAn alternative formulation, which is more statistically optimal and which can produce\nsigniﬁcantly better estimates if some of the cameras are closer to the 3D point than others, is\nto minimize the residual in the measurement equations\nxj\n=\np(j)\n00 X + p(j)\n01 Y + p(j)\n02 Z + p(j)\n03 W\np(j)\n20 X + p(j)\n21 Y + p(j)\n22 Z + p(j)\n23 W\n(7.5)\nyj\n=\np(j)\n10 X + p(j)\n11 Y + p(j)\n12 Z + p(j)\n13 W\np(j)\n20 X + p(j)\n21 Y + p(j)\n22 Z + p(j)\n23 W\n,\n(7.6)\nwhere (xj, yj) are the measured 2D feature locations and {p(j)\n00 . . . p(j)\n23 } are the known entries\nin camera matrix P j (Sutherland 1974).\nAs with Equations (6.21, 6.33, and 6.34), this set of non-linear equations can be converted\ninto a linear least squares problem by multiplying both sides of the denominator. Note that if\n7.2 Two-frame structure from motion\n347\nwe use homogeneous coordinates p = (X, Y, Z, W), the resulting set of equations is homo-\ngeneous and is best solved as a singular value decomposition (SVD) or eigenvalue problem\n(looking for the smallest singular vector or eigenvector). If we set W = 1, we can use regular\nlinear least squares, but the resulting system may be singular or poorly conditioned, i.e., if all\nof the viewing rays are parallel, as occurs for points far away from the camera.\nFor this reason, it is generally preferable to parameterize 3D points using homogeneous\ncoordinates, especially if we know that there are likely to be points at greatly varying dis-\ntances from the cameras. Of course, minimizing the set of observations (7.5–7.6) using non-\nlinear least squares, as described in (6.14 and 6.23), is preferable to using linear least squares,\nregardless of the representation chosen.\nFor the case of two observations, it turns out that the location of the point p that exactly\nminimizes the true reprojection error (7.5–7.6) can be computed using the solution of degree\nsix equations (Hartley and Sturm 1997). Another problem to watch out for with triangulation\nis the issue of chirality, i.e., ensuring that the reconstructed points lie in front of all the\ncameras (Hartley 1998). While this cannot always be guaranteed, a useful heuristic is to take\nthe points that lie behind the cameras because their rays are diverging (imagine Figure 7.2\nwhere the rays were pointing away from each other) and to place them on the plane at inﬁnity\nby setting their W values to 0.\n7.2 Two-frame structure from motion\nSo far in our study of 3D reconstruction, we have always assumed that either the 3D point\npositions or the 3D camera poses are known in advance. In this section, we take our ﬁrst look\nat structure from motion, which is the simultaneous recovery of 3D structure and pose from\nimage correspondences.\nConsider Figure 7.3, which shows a 3D point p being viewed from two cameras whose\nrelative position can be encoded by a rotation R and a translation t. Since we do not know\nanything about the camera positions, without loss of generality, we can set the ﬁrst camera at\nthe origin c0 = 0 and at a canonical orientation R0 = I.\nNow notice that the observed location of point p in the ﬁrst image, p0 = d0ˆx0 is mapped\ninto the second image by the transformation\nd1ˆx1 = p1 = Rp0 + t = R(d0ˆx0) + t,\n(7.7)\nwhere ˆxj = K−1\nj xj are the (local) ray direction vectors. Taking the cross product of both\nsides with t in order to annihilate it on the right hand side yields1\nd1[t]×ˆx1 = d0[t]×Rˆx0.\n(7.8)\n1 The cross-product operator [ ]× was introduced in (2.32).\n348\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n       epipolar plane\np∞\np\n(R,t)\nc0\nc1\nepipolar\nlines\nx\n0\ne0\ne1\nx1\nl1\nl0\nFigure 7.3 Epipolar geometry: The vectors t = c1 −c0, p −c0 and p −c1 are co-planar\nand deﬁne the basic epipolar constraint expressed in terms of the pixel measurements x0 and\nx1.\nTaking the dot product of both sides with ˆx1 yields\nd0ˆxT\n1 ([t]×R)ˆx0 = d1ˆxT\n1 [t]×ˆx1 = 0,\n(7.9)\nsince the right hand side is a triple product with two identical entries. (Another way to say\nthis is that the cross product matrix [t]× is skew symmetric and returns 0 when pre- and\npost-multiplied by the same vector.)\nWe therefore arrive at the basic epipolar constraint\nˆxT\n1 E ˆx0 = 0,\n(7.10)\nwhere\nE = [t]×R\n(7.11)\nis called the essential matrix (Longuet-Higgins 1981).\nAn alternative way to derive the epipolar constraint is to notice that in order for the cam-\neras to be oriented so that the rays ˆx0 and ˆx1 intersect in 3D at point p, the vectors connecting\nthe two camera centers c1 −c0 = −R−1\n1 t and the rays corresponding to pixels x0 and x1,\nnamely R−1\nj\nˆxj, must be co-planar. This requires that the triple product\n(ˆx0, R−1ˆx1, −R−1t) = (Rˆx0, ˆx1, −t) = ˆx1 · (t × Rˆx0) = ˆxT\n1 ([t]×R)ˆx0 = 0.\n(7.12)\nNotice that the essential matrix E maps a point ˆx0 in image 0 into a line l1 = Eˆx0\nin image 1, since ˆxT\n1 l1 = 0 (Figure 7.3). All such lines must pass through the second\nepipole e1, which is therefore deﬁned as the left singular vector of E with a 0 singular value,\nor, equivalently, the projection of the vector t into image 1. The dual (transpose) of these",
  "image_path": "page_369.jpg",
  "pages": [
    368,
    369,
    370
  ]
}