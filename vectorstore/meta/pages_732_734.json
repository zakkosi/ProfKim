{
  "doc_id": "pages_732_734",
  "text": "710\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\n(d)\n(e)\nFigure 14.47\nAutomatic photo pop-up (Hoiem, Efros, and Hebert 2005a) c⃝2005 ACM:\n(a) input image; (b) superpixels are grouped into (c) multiple regions; (d) labelings indicating\nground (green), vertical (red), and sky (blue); (e) novel view of resulting piecewise-planar 3D\nmodel.\nralba 2001; Torralba, Murphy, Freeman et al. 2003) to ﬁnd images with similar colors and\ncomposition. They then run a graph cut algorithm that minimizes image gradient differences\nand composite the new replacement piece into the original image using Poisson image blend-\ning (Section 9.3.4) (P´erez, Gangnet, and Blake 2003). Figure 14.46d shows the resulting\nimage with the erased foreground rooftops region replaced with sailboats.\nA different application of image recognition and segmentation is to infer 3D structure\nfrom a single photo by recognizing certain scene structures. For example, Criminisi, Reid,\nand Zisserman (2000) detect vanishing points and have the user draw basic structures, such\nas walls, in order infer the 3D geometry (Section 6.3.3). Hoiem, Efros, and Hebert (2005a)\non the other hand, work with more “organic” scenes such as the one shown in Figure 14.47.\nTheir system uses a variety of classiﬁers and statistics learned from labeled images to classify\neach pixel as either ground, vertical, or sky (Figure 14.47d). To do this, they begin by com-\nputing superpixels (Figure 14.47b) and then group them into plausible regions that are likely\nto share similar geometric labels (Figure 14.47c). After all the pixels have been labeled, the\nboundaries between the vertical and ground pixels can be used to infer 3D lines along which\nthe image can be folded into a “pop-up” (after removing the sky pixels), as shown in Fig-\nure 14.47e. In related work, Saxena, Sun, and Ng (2009) develop a system that directly infers\nthe depth and orientation of each pixel instead of using just three geometric class labels.\nFace detection and localization can also be used in a variety of photo editing applications\n(in addition to being used in-camera to provide better focus, exposure, and ﬂash settings).\nZanella and Fuentes (2004) use active shape models (Section 14.2.2) to register facial features\nfor creating automated morphs. Rother, Bordeaux, Hamadi et al. (2006) use face and sky\ndetection to determine regions of interest in order to decide which pieces from a collection\nof images to stitch into a collage. Bitouk, Kumar, Dhillon et al. (2008) describe a system\nthat matches a given face image to a large collection of Internet face images, which can\nthen be used (with careful relighting algorithms) to replace the face in the original image.\nApplications they describe include de-identiﬁcation and getting the best possible smile from\n14.4 Category recognition\n711\n(a)\n(b)\n(c)\n(d)\n(e)\nFigure 14.48\nThe importance of context (images courtesy of Antonio Torralba). Can you\nname all of the objects in images (a–b), especially those that are circled in (c–d). Look\ncarefully at the circled objects. Did you notice that they all have the same shape (after being\nrotated), as shown in column (e)?\neveryone in a “burst mode” group shot. Leyvand, Cohen-Or, Dror et al. (2008) show how\naccurately locating facial features using an active shape model (Cootes, Edwards, and Taylor\n2001; Zhou, Gu, and Zhang 2003) can be used to warp such features (and hence the image)\ntowards conﬁgurations resembling those found in images whose facial attractiveness was\nhighly rated, thereby “beautifying” the image without completely losing a person’s identity.\nMost of these techniques rely either on a set of labeled training images, which is an\nessential component of all learning techniques, or the even more recent explosion in images\navailable on the Internet. The assumption in some of this work (and in recognition systems\nbased on such very large databases (Section 14.5.1)) is that as the collection of accessible (and\npotentially partially labeled) images gets larger, ﬁnding a close match gets easier. As Hays\nand Efros (2007) state in their abstract “Our chief insight is that while the space of images is\neffectively inﬁnite, the space of semantically differentiable scenes is actually not that large.”\nIn an interesting commentary on their paper, Levoy (2008) disputes this assertion, claiming\nthat “features in natural scenes form a heavy-tailed distribution, meaning that while some\nfeatures in photographs are more common than others, the relative occurrence of less common\nfeatures drops slowly. In other words, there are many unusual photographs in the world.” He\ndoes, however agree that in computational photography, as in many other applications such\nas speech recognition, synthesis, and translation, “simple machine learning algorithms often\noutperform more sophisticated ones if trained on large enough databases.” He also goes on\nto point out both the potential advantages of such systems, such as better automatic color\nbalancing, and potential issues and pitfalls with the kind of image fakery that these new\napproaches enable.\nFor additional examples of photo editing and computational photography applications\n712\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nFigure 14.49 More examples of context: read the letters in the ﬁrst group, the numbers in\nthe second, and the letters and numbers in the third. (Images courtesy of Antonio Torralba.)\nenabled by Internet computer vision, please see recent workshops on this topic,19 as well as\nthe special journal issue (Avidan, Baker, and Shan 2010), and the course on Internet Vision\nby Tamara Berg (2008).\n14.5 Context and scene understanding\nThus far, we have mostly considered the task of recognizing and localizing objects in isolation\nfrom that of understanding the scene (context) in which the object occur. This is a severe\nlimitation, as context plays a very important role in human object recognition (Oliva and\nTorralba 2007). As we will see in this section, it can greatly improve the performance of\nobject recognition algorithms (Divvala, Hoiem, Hays et al. 2009), as well as providing useful\nsemantic clues for general scene understanding (Torralba 2008).\nConsider the two photographs in Figure 14.48a–b. Can you name all of the objects,\nespecially those circled in images (c–d)? Now have a closer look at the circled objects.\nDo see any similarity in their shapes? In fact, if you rotate them by 90◦, they are all the\nsame as the “blob” shown in Figure 14.48e. So much for our ability to recognize object by\ntheir shape! Another (perhaps more artiﬁcial) example of recognition in context is shown in\nFigure 14.49. Try to name all of the letters and numbers, and then see if you guessed right.\nEven though we have not addressed context explicitly earlier in this chapter, we have\nalready seen several instances of this general idea being used. A simple way to incorporate\nspatial information into a recognition algorithm is to compute feature statistics over different\nregions, as in the spatial pyramid system of Lazebnik, Schmid, and Ponce (2006). Part-based\nmodels (Section 14.4.2, Figures 14.40–14.43), use a kind of local context, where various parts\nneed to be arranged in a proper geometric relationship to constitute an object.\nThe biggest difference between part-based and context models is that the latter combine\nobjects into scenes and the number of constituent objects from each class is not known in\nadvance. In fact, it is possible to combine part-based and context models into the same\n19 http://www.internetvisioner.org/.",
  "image_path": "page_733.jpg",
  "pages": [
    732,
    733,
    734
  ]
}