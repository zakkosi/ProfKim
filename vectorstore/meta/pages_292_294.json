{
  "doc_id": "pages_292_294",
  "text": "270\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n5.1 Active contours\nWhile lines, vanishing points, and rectangles are commonplace in the man-made world,\ncurves corresponding to object boundaries are even more common, especially in the natural\nenvironment. In this section, we describe three related approaches to locating such boundary\ncurves in images.\nThe ﬁrst, originally called snakes by its inventors (Kass, Witkin, and Terzopoulos 1988)\n(Section 5.1.1), is an energy-minimizing, two-dimensional spline curve that evolves (moves)\ntowards image features such as strong edges. The second, intelligent scissors (Mortensen\nand Barrett 1995) (Section 5.1.3), allow the user to sketch in real time a curve that clings to\nobject boundaries. Finally, level set techniques (Section 5.1.4) evolve the curve as the zero-\nset of a characteristic function, which allows them to easily change topology and incorporate\nregion-based statistics.\nAll three of these are examples of active contours (Blake and Isard 1998; Mortensen\n1999), since these boundary detectors iteratively move towards their ﬁnal solution under the\ncombination of image and optional user-guidance forces.\n5.1.1 Snakes\nSnakes are a two-dimensional generalization of the 1D energy-minimizing splines ﬁrst intro-\nduced in Section 3.7.1,\nEint =\nZ\nα(s)∥f s(s)∥2 + β(s)∥f ss(s)∥2 ds,\n(5.1)\nwhere s is the arc-length along the curve f(s) = (x(s), y(s)) and α(s) and β(s) are ﬁrst-\nand second-order continuity weighting functions analogous to the s(x, y) and c(x, y) terms\nintroduced in (3.100–3.101). We can discretize this energy by sampling the initial curve\nposition evenly along its length (Figure 4.35) to obtain\nEint\n=\nX\ni\nα(i)∥f(i + 1) −f(i)∥2/h2\n(5.2)\n+ β(i)∥f(i + 1) −2f(i) + f(i −1)∥2/h4,\nwhere h is the step size, which can be neglected if we resample the curve along its arc-length\nafter each iteration.\nIn addition to this internal spline energy, a snake simultaneously minimizes external\nimage-based and constraint-based potentials. The image-based potentials are the sum of sev-\neral terms\nEimage = wlineEline + wedgeEedge + wtermEterm,\n(5.3)\n5.1 Active contours\n271\n(a)\n(b)\nFigure 5.2 Snakes (Kass, Witkin, and Terzopoulos 1988) c⃝1988 Springer: (a) the “snake\npit” for interactively controlling shape; (b) lip tracking.\nwhere the line term attracts the snake to dark ridges, the edge term attracts it to strong gradi-\nents (edges), and the term term attracts it to line terminations. In practice, most systems only\nuse the edge term, which can either be directly proportional to the image gradients,\nEedge =\nX\ni\n−∥∇I(f(i))∥2,\n(5.4)\nor to a smoothed version of the image Laplacian,\nEedge =\nX\ni\n−|(Gσ ∗∇2I)(f(i))|2.\n(5.5)\nPeople also sometimes extract edges and then use a distance map to the edges as an alternative\nto these two originally proposed potentials.\nIn interactive applications, a variety of user-placed constraints can also be added, e.g.,\nattractive (spring) forces towards anchor points d(i),\nEspring = ki∥f(i) −d(i)∥2,\n(5.6)\nas well as repulsive 1/r (“volcano”) forces (Figure 5.2a). As the snakes evolve by minimiz-\ning their energy, they often “wiggle” and “slither”, which accounts for their popular name.\nFigure 5.2b shows snakes being used to track a person’s lips.\nBecause regular snakes have a tendency to shrink (Exercise 5.1), it is usually better to\ninitialize them by drawing the snake outside the object of interest to be tracked. Alterna-\ntively, an expansion ballooning force can be added to the dynamics (Cohen and Cohen 1993),\nessentially moving each point outwards along its normal.\nTo efﬁciently solve the sparse linear system arising from snake energy minimization, a\nsparse direct solver (Appendix A.4) can be used, since the linear system is essentially penta-\ndiagonal.4 Snake evolution is usually implemented as an alternation between this linear sys-\n4 A closed snake has a Toeplitz matrix form, which can still be factored and solved in O(N) time.\n272\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nFigure 5.3 Elastic net: The open squares indicate the cities and the closed squares linked by\nstraight line segments are the tour points. The blue circles indicate the approximate extent of\nthe attraction force of each city, which is reduced over time. Under the Bayesian interpretation\nof the elastic net, the blue circles correspond to one standard deviation of the circular Gaussian\nthat generates each city from some unknown tour point.\ntem solution and the linearization of non-linear constraints such as edge energy. A more direct\nway to ﬁnd a global energy minimum is to use dynamic programming (Amini, Weymouth,\nand Jain 1990; Williams and Shah 1992), but this is not often used in practice, since it has\nbeen superseded by even more efﬁcient or interactive algorithms such as intelligent scissors\n(Section 5.1.3) and GrabCut (Section 5.5).\nElastic nets and slippery springs\nAn interesting variant on snakes, ﬁrst proposed by Durbin and Willshaw (1987) and later\nre-formulated in an energy-minimizing framework by Durbin, Szeliski, and Yuille (1989), is\nthe elastic net formulation of the Traveling Salesman Problem (TSP). Recall that in a TSP,\nthe salesman must visit each city once while minimizing the total distance traversed. A snake\nthat is constrained to pass through each city could solve this problem (without any optimality\nguarantees) but it is impossible to tell ahead of time which snake control point should be\nassociated with each city.\nInstead of having a ﬁxed constraint between snake nodes and cities, as in (5.6), a city is\nassumed to pass near some point along the tour (Figure 5.3). In a probabilistic interpretation,\neach city is generated as a mixture of Gaussians centered at each tour point,\np(d(j)) =\nX\ni\npij with pij = e−d2\nij/(2σ2)\n(5.7)\nwhere σ is the standard deviation of the Gaussian and\ndij = ∥f(i) −d(j)∥\n(5.8)",
  "image_path": "page_293.jpg",
  "pages": [
    292,
    293,
    294
  ]
}