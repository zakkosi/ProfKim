{
  "doc_id": "pages_122_124",
  "text": "100\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\n(d)\n(e)\n(f)\nFigure 3.1\nSome common image processing operations: (a) original image; (b) increased\ncontrast; (c) change in hue; (d) “posterized” (quantized colors); (e) blurred; (f) rotated.\n3.1 Point operators\n101\nNow that we have seen how images are formed through the interaction of 3D scene elements,\nlighting, and camera optics and sensors, let us look at the ﬁrst stage in most computer vision\napplications, namely the use of image processing to preprocess the image and convert it into\na form suitable for further analysis. Examples of such operations include exposure correction\nand color balancing, the reduction of image noise, increasing sharpness, or straightening the\nimage by rotating it (Figure 3.1). While some may consider image processing to be outside\nthe purview of computer vision, most computer vision applications, such as computational\nphotography and even recognition, require care in designing the image processing stages in\norder to achieve acceptable results.\nIn this chapter, we review standard image processing operators that map pixel values from\none image to another. Image processing is often taught in electrical engineering departments\nas a follow-on course to an introductory course in signal processing (Oppenheim and Schafer\n1996; Oppenheim, Schafer, and Buck 1999). There are several popular textbooks for image\nprocessing (Crane 1997; Gomes and Velho 1997; J¨ahne 1997; Pratt 2007; Russ 2007; Burger\nand Burge 2008; Gonzales and Woods 2008).\nWe begin this chapter with the simplest kind of image transforms, namely those that\nmanipulate each pixel independently of its neighbors (Section 3.1). Such transforms are of-\nten called point operators or point processes. Next, we examine neighborhood (area-based)\noperators, where each new pixel’s value depends on a small number of neighboring input\nvalues (Sections 3.2 and 3.3). A convenient tool to analyze (and sometimes accelerate) such\nneighborhood operations is the Fourier Transform, which we cover in Section 3.4. Neighbor-\nhood operators can be cascaded to form image pyramids and wavelets, which are useful for\nanalyzing images at a variety of resolutions (scales) and for accelerating certain operations\n(Section 3.5). Another important class of global operators are geometric transformations,\nsuch as rotations, shears, and perspective deformations (Section 3.6). Finally, we introduce\nglobal optimization approaches to image processing, which involve the minimization of an\nenergy functional or, equivalently, optimal estimation using Bayesian Markov random ﬁeld\nmodels (Section 3.7).\n3.1 Point operators\nThe simplest kinds of image processing transforms are point operators, where each output\npixel’s value depends on only the corresponding input pixel value (plus, potentially, some\nglobally collected information or parameters). Examples of such operators include brightness\nand contrast adjustments (Figure 3.2) as well as color correction and transformations. In the\nimage processing literature, such operations are also known as point processes (Crane 1997).\nWe begin this section with a quick review of simple point operators such as brightness\n102\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\n(d)\n(e)\n(f)\nFigure 3.2 Some local image processing operations: (a) original image along with its three\ncolor (per-channel) histograms; (b) brightness increased (additive offset, b = 16); (c) contrast\nincreased (multiplicative gain, a = 1.1); (d) gamma (partially) linearized (γ = 1.2); (e) full\nhistogram equalization; (f) partial histogram equalization.",
  "image_path": "page_123.jpg",
  "pages": [
    122,
    123,
    124
  ]
}