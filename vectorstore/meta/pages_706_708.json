{
  "doc_id": "pages_706_708",
  "text": "684\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\nFigure 14.25\nPerson detection and re-recognition using a combined face, hair, and torso\nmodel (Sivic, Zitnick, and Szeliski 2006) c⃝2006 Springer. (a) Using face detection alone,\nseveral of the heads are missed. (b) The combined face and clothing model successfully\nre-ﬁnds all the people.\nSuch models can be constructed either from monocular video sequences (Matthews, Xiao,\nand Baker 2007), as shown in Figure 14.24, or from multi-view video sequences (Ramnath,\nKoterba, Xiao et al. 2008), which provide even greater reliability and accuracy in reconstruc-\ntion and tracking. (For a recent review of progress in head pose estimation, please see the\nsurvey paper by Murphy-Chutorian and Trivedi (2009).)\n14.2.3 Application: Personal photo collections\nIn addition to digital cameras automatically ﬁnding faces to aid in auto-focusing and video\ncameras ﬁnding faces in video conferencing to center on the speaker (either mechanically\nor digitally), face detection has found its way into most consumer-level photo organization\npackages, such as iPhoto, Picasa, and Windows Live Photo Gallery. Finding faces and al-\nlowing users to tag them makes it easier to ﬁnd photos of selected people at a later date or to\nautomatically share them with friends. In fact, the ability to tag friends in photos is one of the\nmore popular features on Facebook.\nSometimes, however, faces can be hard to ﬁnd and recognize, especially if they are small,\n14.3 Instance recognition\n685\nFigure 14.26 Recognizing objects in a cluttered scene (Lowe 2004) c⃝2004 Springer. Two\nof the training images in the database are shown on the left. They are matched to the cluttered\nscene in the middle using SIFT features, shown as small squares in the right image. The afﬁne\nwarp of each recognized database image onto the scene is shown as a larger parallelogram in\nthe right image.\nturned away from the camera, or otherwise occluded. In such cases, combining face recog-\nnition with person detection and clothes recognition can be very effective, as illustrated in\nFigure 14.25 (Sivic, Zitnick, and Szeliski 2006). Combining person recognition with other\nkinds of context, such as location recognition (Section 14.3.3) or activity or event recognition,\ncan also help boost performance (Lin, Kapoor, Hua et al. 2010).\n14.3 Instance recognition\nGeneral object recognition falls into two broad categories, namely instance recognition and\nclass recognition. The former involves re-recognizing a known 2D or 3D rigid object, poten-\ntially being viewed from a novel viewpoint, against a cluttered background, and with partial\nocclusions. The latter, which is also known as category-level or generic object recognition\n(Ponce, Hebert, Schmid et al. 2006), is the much more challenging problem of recognizing\nany instance of a particular general class such as “cat”, “car”, or “bicycle”.\nOver the years, many different algorithms have been developed for instance recognition.\nMundy (2006) surveys earlier approaches, which focused on extracting lines, contours, or\n3D surfaces from images and matching them to known 3D object models. Another popu-\nlar approach was to acquire images from a large set of viewpoints and illuminations and to\nrepresent them using an eigenspace decomposition (Murase and Nayar 1995). More recent\napproaches (Lowe 2004; Rothganger, Lazebnik, Schmid et al. 2006; Ferrari, Tuytelaars, and\nVan Gool 2006b; Gordon and Lowe 2006; Obdrˇz´alek and Matas 2006; Sivic and Zisserman\n2009) tend to use viewpoint-invariant 2D features, such as those we saw in Section 4.1.2. Af-\n686\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nter extracting informative sparse 2D features from both the new image and the images in the\ndatabase, image features are matched against the object database, using one of the sparse fea-\nture matching strategies described in Section 4.1.3. Whenever a sufﬁcient number of matches\nhave been found, they are veriﬁed by ﬁnding a geometric transformation that aligns the two\nsets of features (Figure 14.26).\nBelow, we describe some of the techniques that have been proposed for representing the\ngeometric relationships between such features (Section 14.3.1). We also discuss how to make\nthe feature matching process more efﬁcient using ideas from text and information retrieval\n(Section 14.3.2).\n14.3.1 Geometric alignment\nTo recognize one or more instances of some known objects, such as those shown in the left\ncolumn of Figure 14.26, the recognition system ﬁrst extracts a set of interest points in each\ndatabase image and stores the associated descriptors (and original positions) in an indexing\nstructure such as a search tree (Section 4.1.3). At recognition time, features are extracted\nfrom the new image and compared against the stored object features. Whenever a sufﬁcient\nnumber of matching features (say, three or more) are found for a given object, the system then\ninvokes a match veriﬁcation stage, whose job is to determine whether the spatial arrangement\nof matching features is consistent with those in the database image.\nBecause images can be highly cluttered and similar features may belong to several objects,\nthe original set of feature matches can have a large number of outliers. For this reason, Lowe\n(2004) suggests using a Hough transform (Section 4.3.2) to accumulate votes for likely geo-\nmetric transformations. In his system, he uses an afﬁne transformation between the database\nobject and the collection of scene features, which works well for objects that are mostly pla-\nnar, or where at least several corresponding features share a quasi-planar geometry.16\nSince SIFT features carry with them their own location, scale, and orientation, Lowe uses\na four-dimensional similarity transformation as the original Hough binning structure, i.e.,\neach bin denotes a particular location for the object center, scale, and in-plane rotation. Each\nmatching feature votes for the nearest 24 bins and peaks in the transform are then selected for\na more careful afﬁne motion ﬁt. Figure 14.26 (right image) shows three instances of the two\nobjects on the left that were recognized by the system. Obdrˇz´alek and Matas (2006) general-\nize Lowe’s approach to use feature descriptors with full local afﬁne frames and evaluate their\napproach on a number of object recognition databases.\nAnother system that uses local afﬁne frames is the one developed by Rothganger, Lazeb-\n16 When a larger number of features is available, a full fundamental matrix can be used (Brown and Lowe 2002;\nGordon and Lowe 2006). When image stitching is being performed (Brown and Lowe 2007), the motion models\ndiscussed in Section 9.1 can be used instead.",
  "image_path": "page_707.jpg",
  "pages": [
    706,
    707,
    708
  ]
}