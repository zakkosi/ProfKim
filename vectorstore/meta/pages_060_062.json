{
  "doc_id": "pages_060_062",
  "text": "38\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nTransformation\nMatrix\n# DoF\nPreserves\nIcon\ntranslation\nh\nI\nt\ni\n2×3\n2\norientation\nrigid (Euclidean)\nh\nR\nt\ni\n2×3\n3\nlengths\n\u001a\n\u001a\n\u001a\u001a\nS\nS S\nS\nsimilarity\nh\nsR\nt\ni\n2×3\n4\nangles\n\u001a\n\u001a\nS S\nafﬁne\nh\nA\ni\n2×3\n6\nparallelism\n\u0002\u0002\n\u0002\u0002\nprojective\nh\n˜\nH\ni\n3×3\n8\nstraight lines\n``\n  \nTable 2.1 Hierarchy of 2D coordinate transformations. Each transformation also preserves\nthe properties listed in the rows below it, i.e., similarity preserves not only angles but also\nparallelism and straight lines. The 2×3 matrices are extended with a third [0T 1] row to form\na full 3 × 3 matrix for homogeneous coordinate transformations.\nBlinn (1998) describes (in Chapters 9 and 10) the ins and outs of notating and manipulating\nco-vectors.\nWhile the above transformations are the ones we use most extensively, a number of addi-\ntional transformations are sometimes used.\nStretch/squash.\nThis transformation changes the aspect ratio of an image,\nx′\n=\nsxx + tx\ny′\n=\nsyy + ty,\nand is a restricted form of an afﬁne transformation. Unfortunately, it does not nest cleanly\nwith the groups listed in Table 2.1.\nPlanar surface ﬂow.\nThis eight-parameter transformation (Horn 1986; Bergen, Anandan,\nHanna et al. 1992; Girod, Greiner, and Niemann 2000),\nx′\n=\na0 + a1x + a2y + a6x2 + a7xy\ny′\n=\na3 + a4x + a5y + a7x2 + a6xy,\narises when a planar surface undergoes a small 3D motion. It can thus be thought of as a\nsmall motion approximation to a full homography. Its main attraction is that it is linear in the\nmotion parameters, ak, which are often the quantities being estimated.\n2.1 Geometric primitives and transformations\n39\nTransformation\nMatrix\n# DoF\nPreserves\nIcon\ntranslation\nh\nI\nt\ni\n3×4\n3\norientation\nrigid (Euclidean)\nh\nR\nt\ni\n3×4\n6\nlengths\n\u001a\n\u001a\n\u001a\u001a\nS\nS S\nS\nsimilarity\nh\nsR\nt\ni\n3×4\n7\nangles\n\u001a\n\u001a\nS S\nafﬁne\nh\nA\ni\n3×4\n12\nparallelism\n\u0002\u0002\n\u0002\u0002\nprojective\nh\n˜\nH\ni\n4×4\n15\nstraight lines\n``\n  \nTable 2.2 Hierarchy of 3D coordinate transformations. Each transformation also preserves\nthe properties listed in the rows below it, i.e., similarity preserves not only angles but also\nparallelism and straight lines. The 3 × 4 matrices are extended with a fourth [0T 1] row to\nform a full 4 × 4 matrix for homogeneous coordinate transformations. The mnemonic icons\nare drawn in 2D but are meant to suggest transformations occurring in a full 3D cube.\nBilinear interpolant.\nThis eight-parameter transform (Wolberg 1990),\nx′\n=\na0 + a1x + a2y + a6xy\ny′\n=\na3 + a4x + a5y + a7xy,\ncan be used to interpolate the deformation due to the motion of the four corner points of\na square. (In fact, it can interpolate the motion of any four non-collinear points.) While\nthe deformation is linear in the motion parameters, it does not generally preserve straight\nlines (only lines parallel to the square axes). However, it is often quite useful, e.g., in the\ninterpolation of sparse grids using splines (Section 8.3).\n2.1.3 3D transformations\nThe set of three-dimensional coordinate transformations is very similar to that available for\n2D transformations and is summarized in Table 2.2. As in 2D, these transformations form a\nnested set of groups. Hartley and Zisserman (2004, Section 2.4) give a more detailed descrip-\ntion of this hierarchy.\nTranslation.\n3D translations can be written as x′ = x + t or\nx′ =\nh\nI\nt\ni\n¯x\n(2.23)\n40\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nwhere I is the (3 × 3) identity matrix and 0 is the zero vector.\nRotation + translation.\nAlso known as 3D rigid body motion or the 3D Euclidean trans-\nformation, it can be written as x′ = Rx + t or\nx′ =\nh\nR\nt\ni\n¯x\n(2.24)\nwhere R is a 3 × 3 orthonormal rotation matrix with RRT = I and |R| = 1. Note that\nsometimes it is more convenient to describe a rigid motion using\nx′ = R(x −c) = Rx −Rc,\n(2.25)\nwhere c is the center of rotation (often the camera center).\nCompactly parameterizing a 3D rotation is a non-trivial task, which we describe in more\ndetail below.\nScaled rotation.\nThe 3D similarity transform can be expressed as x′ = sRx + t where s\nis an arbitrary scale factor. It can also be written as\nx′ =\nh\nsR\nt\ni\n¯x.\n(2.26)\nThis transformation preserves angles between lines and planes.\nAfﬁne.\nThe afﬁne transform is written as x′ = A¯x, where A is an arbitrary 3 × 4 matrix,\ni.e.,\nx′ =\n\n\na00\na01\na02\na03\na10\na11\na12\na13\na20\na21\na22\na23\n\n¯x.\n(2.27)\nParallel lines and planes remain parallel under afﬁne transformations.\nProjective.\nThis transformation, variously known as a 3D perspective transform, homogra-\nphy, or collineation, operates on homogeneous coordinates,\n˜x′ = ˜\nH ˜x,\n(2.28)\nwhere ˜\nH is an arbitrary 4 × 4 homogeneous matrix. As in 2D, the resulting homogeneous\ncoordinate ˜x′ must be normalized in order to obtain an inhomogeneous result x. Perspective\ntransformations preserve straight lines (i.e., they remain straight after the transformation).",
  "image_path": "page_061.jpg",
  "pages": [
    60,
    61,
    62
  ]
}