{
  "doc_id": "pages_068_070",
  "text": "46\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nprocedure slerp(q0, q1, α):\n1. qr = q1/q0 = (vr, wr)\n2. if wr < 0 then qr ←−qr\n3. θr = 2 tan−1(∥vr∥/wr)\n4. ˆnr = N(vr) = vr/∥vr∥\n5. θα = α θr\n6. qα = (sin θα\n2 ˆnr, cos θα\n2 )\n7. return q2 = qαq0\nAlgorithm 2.1 Spherical linear interpolation (slerp). The axis and total angle are ﬁrst com-\nputed from the quaternion ratio. (This computation can be lifted outside an inner loop that\ngenerates a set of interpolated position for animation.) An incremental quaternion is then\ncomputed and multiplied by the starting rotation quaternion.\n2.1.5 3D to 2D projections\nNow that we know how to represent 2D and 3D geometric primitives and how to transform\nthem spatially, we need to specify how 3D primitives are projected onto the image plane. We\ncan do this using a linear 3D to 2D projection matrix. The simplest model is orthography,\nwhich requires no division to get the ﬁnal (inhomogeneous) result. The more commonly used\nmodel is perspective, since this more accurately models the behavior of real cameras.\nOrthography and para-perspective\nAn orthographic projection simply drops the z component of the three-dimensional coordi-\nnate p to obtain the 2D point x. (In this section, we use p to denote 3D points and x to denote\n2D points.) This can be written as\nx = [I2×2|0] p.\n(2.46)\nIf we are using homogeneous (projective) coordinates, we can write\n˜x =\n\n\n1\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n1\n\n˜p,\n(2.47)\n2.1 Geometric primitives and transformations\n47\n(a) 3D view\n(b) orthography\n(c) scaled orthography\n(d) para-perspective\n(e) perspective\n(f) object-centered\nFigure 2.7 Commonly used projection models: (a) 3D view of world, (b) orthography, (c)\nscaled orthography, (d) para-perspective, (e) perspective, (f) object-centered. Each diagram\nshows a top-down view of the projection. Note how parallel lines on the ground plane and\nbox sides remain parallel in the non-perspective projections.\n48\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\ni.e., we drop the z component but keep the w component. Orthography is an approximate\nmodel for long focal length (telephoto) lenses and objects whose depth is shallow relative\nto their distance to the camera (Sawhney and Hanson 1991). It is exact only for telecentric\nlenses (Baker and Nayar 1999, 2001).\nIn practice, world coordinates (which may measure dimensions in meters) need to be\nscaled to ﬁt onto an image sensor (physically measured in millimeters, but ultimately mea-\nsured in pixels). For this reason, scaled orthography is actually more commonly used,\nx = [sI2×2|0] p.\n(2.48)\nThis model is equivalent to ﬁrst projecting the world points onto a local fronto-parallel image\nplane and then scaling this image using regular perspective projection. The scaling can be the\nsame for all parts of the scene (Figure 2.7b) or it can be different for objects that are being\nmodeled independently (Figure 2.7c). More importantly, the scaling can vary from frame to\nframe when estimating structure from motion, which can better model the scale change that\noccurs as an object approaches the camera.\nScaled orthography is a popular model for reconstructing the 3D shape of objects far away\nfrom the camera, since it greatly simpliﬁes certain computations. For example, pose (camera\norientation) can be estimated using simple least squares (Section 6.2.1). Under orthography,\nstructure and motion can simultaneously be estimated using factorization (singular value de-\ncomposition), as discussed in Section 7.3 (Tomasi and Kanade 1992).\nA closely related projection model is para-perspective (Aloimonos 1990; Poelman and\nKanade 1997). In this model, object points are again ﬁrst projected onto a local reference\nparallel to the image plane. However, rather than being projected orthogonally to this plane,\nthey are projected parallel to the line of sight to the object center (Figure 2.7d). This is\nfollowed by the usual projection onto the ﬁnal image plane, which again amounts to a scaling.\nThe combination of these two projections is therefore afﬁne and can be written as\n˜x =\n\n\na00\na01\na02\na03\na10\na11\na12\na13\n0\n0\n0\n1\n\n˜p.\n(2.49)\nNote how parallel lines in 3D remain parallel after projection in Figure 2.7b–d. Para-perspective\nprovides a more accurate projection model than scaled orthography, without incurring the\nadded complexity of per-pixel perspective division, which invalidates traditional factoriza-\ntion methods (Poelman and Kanade 1997).\nPerspective\nThe most commonly used projection in computer graphics and computer vision is true 3D\nperspective (Figure 2.7e). Here, points are projected onto the image plane by dividing them",
  "image_path": "page_069.jpg",
  "pages": [
    68,
    69,
    70
  ]
}