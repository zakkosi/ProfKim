{
  "doc_id": "pages_771_773",
  "text": "A.5 Iterative techniques\n749\nprocedure SparseCholeskySolve(C, d):\n1. Determine symbolically the structure of C, i.e., the adjacency graph.\n2. (Optional) Compute a reordering for the variables, taking into ac-\ncount any block structure inherent in the problem.\n3. Determine the ﬁll-in pattern for R and allocate the compressed stor-\nage for R as well as storage for the permuted right hand side ˆd.\n4. Copy the elements of C and d into R and ˆd, permuting the values\naccording to the computed ordering.\n5. Perform the numerical factorization of R using Algorithm A.1.\n6. Solve the factored system (A.33), i.e.,\nRT z = ˆd,\nRx = z.\n7. Return the solution x, after undoing the permutation.\nAlgorithm A.2\nSparse least squares using a sparse Cholesky decomposition of the matrix\nC.\nthe case with image processing problems deﬁned on pixel grids, since, even with the optimal\nreordering (nested dissection) the amount of ﬁll can still be large.\nA preferable approach to solving such linear systems is to use iterative techniques, which\ncompute a series of estimates that converge to the ﬁnal solution, e.g., by taking a series of\ndownhill steps in an energy function such as (A.29).\nA large number of iterative techniques have been developed over the years, including such\nwell-known algorithms as successive overrelaxation and multi-grid. These are described in\nspecialized textbooks on iterative solution techniques (Axelsson 1996; Saad 2003) as well as\nin more general books on numerical linear algebra and least squares techniques (Bj¨orck 1996;\nGolub and Van Loan 1996; Trefethen and Bau 1997; Nocedal and Wright 2006; Bj¨orck and\nDahlquist 2010).\nA.5.1 Conjugate gradient\nThe iterative solution technique that often performs best is conjugate gradient descent, which\ntakes a series of downhill steps that are conjugate to each other with respect to the C matrix,\n750\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\ni.e., if the u and v descent directions satisfy uT Cv = 0. In practice, conjugate gradient\ndescent outperforms other kinds of gradient descent algorithm because its convergence rate\nis proportional to the square root of the condition number of C instead of the condition\nnumber itself.9 Shewchuk (1994) provides a nice introduction to this topic, with clear intuitive\nexplanations of the reasoning behind the conjugate gradient algorithm and its performance.\nAlgorithm A.3 describes the conjugate gradient algorithm and its related least squares\ncounterpart, which can be used when the original set of least squares linear equations are\navailable in the form of Ax = b (A.28). While it is easy to convince yourself that the two\nforms are mathematically equivalent, the least squares form is preferable if rounding errors\nstart to affect the results because of poor conditioning. It may also be preferable if, due to\nthe sparsity structure of A, multiplies with the original A matrix are faster or more space\nefﬁcient than multiplies with C.\nThe conjugate gradient algorithm starts by computing the current residual r0 = d−Cx0,\nwhich is the direction of steepest descent of the energy function (A.28). It sets the original\ndescent direction p0 = r0. Next, it multiplies the descent direction by the quadratic form\n(Hessian) matrix C and combines this with the residual to estimate the optimal step size αk.\nThe solution vector xk and the residual vector rk are then updated using this step size. (No-\ntice how the least squares variant of the conjugate gradient algorithm splits the multiplication\nby the C = AT A matrix across steps 4 and 8.) Finally, a new search direction is calculated\nby ﬁrst computing a factor β as the ratio of current to previous residual magnitudes. The\nnew search direction pk+1 is then set to the residual plus β times the old search direction pk,\nwhich keeps the directions conjugate with respect to C.\nIt turns out that conjugate gradient descent can also be directly applied to non-quadratic\nenergy functions, e.g., those arising from non-linear least squares (Appendix A.3). Instead\nof explicitly forming a local quadratic approximation C and then computing residuals rk,\nnon-linear conjugate gradient descent computes the gradient of the energy function E (A.45)\ndirectly inside each iteration and uses it to set the search direction (Nocedal and Wright 2006).\nSince the quadratic approximation to the energy function may not exist or may be inaccurate,\nline search is often used to determine the step size αk. Furthermore, to compensate for errors\nin ﬁnding the true function minimum, alternative formulas for βk+1 such as Polak–Ribi`ere,\nβk+1 = ∇E(xk+1)[∇E(xk+1) −∇E(xk)]\n∥∇E(xk)∥2\n(A.51)\nare often used (Nocedal and Wright 2006).\n9 The condition number κ(C) is the ratio of the largest and smallest eigenvalues of C. The actual convergence\nrate depends on the clustering of the eigenvalues, as discussed in the references cited in this section.\nA.5 Iterative techniques\n751\nConjugateGradient(C, d, x0)\n1. r0 = d −Cx0\n2. p0 = r0\n3. for k = 0 . . .\n4.\nwk = Cpk\n5.\nαk = ∥rk∥2/(pk · wk)\n6.\nxk+1 = xk + αkpk\n7.\nrk+1 = rk −αkwk\n8.\n9.\nβk+1 = ∥rk+1∥2/∥rk∥2\n10.\npk+1 = rk+1 + βkpk\nConjugateGradientLS(A, b, x0)\n1. q0 = b −Ax0, r0 = AT q0\n2. p0 = r0\n3. for k = 0 . . .\n4.\nvk = Apk\n5.\nαk = ∥rk∥2/∥vk∥2\n6.\nxk+1 = xk + αkpk\n7.\nqk+1 = qk −αkvk\n8.\nrk+1 = AT qk+1\n9.\nβk+1 = ∥rk+1∥2/∥rk∥2\n10.\npk+1 = rk+1 + βkpk\nAlgorithm A.3\nConjugate gradient and conjugate gradient least squares algorithms. The\nalgorithm is described in more detail in the text, but in brief, they choose descent directions\npk that are conjugate to each other with respect to C by computing a factor β by which to\ndiscount the previous search direction pk−1. They then ﬁnd the optimal step size α and take\na downhill step by an amount αkpk.\nA.5.2 Preconditioning\nAs we mentioned previously, the rate of convergence of the conjugate gradient algorithm\nis governed in large part by the condition number κ(C). Its effectiveness can therefore be\nincreased dramatically by reducing this number, e.g., by rescaling elements in x, which cor-\nresponds to rescaling rows and columns in C.\nIn general, preconditioning is usually thought of as a change of basis from the vector x to\na new vector\nˆx = Sx.\n(A.52)\nThe corresponding linear system being solved then becomes\nAS−1ˆx = S−1b\nor\nˆ\nAˆx = ˆb,\n(A.53)",
  "image_path": "page_772.jpg",
  "pages": [
    771,
    772,
    773
  ]
}