{
  "doc_id": "pages_064_066",
  "text": "42\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nWe can rotate this vector by 90◦using the cross product,\nv× = ˆn × v = [ˆn]×v,\n(2.31)\nwhere [ˆn]× is the matrix form of the cross product operator with the vector ˆn = (ˆnx, ˆny, ˆnz),\n[ˆn]× =\n\n\n0\n−ˆnz\nˆny\nˆnz\n0\n−ˆnx\n−ˆny\nˆnx\n0\n\n.\n(2.32)\nNote that rotating this vector by another 90◦is equivalent to taking the cross product again,\nv×× = ˆn × v× = [ˆn]2\n×v = −v⊥,\nand hence\nv∥= v −v⊥= v + v×× = (I + [ˆn]2\n×)v.\nWe can now compute the in-plane component of the rotated vector u as\nu⊥= cos θv⊥+ sin θv× = (sin θ[ˆn]× −cos θ[ˆn]2\n×)v.\nPutting all these terms together, we obtain the ﬁnal rotated vector as\nu = u⊥+ v∥= (I + sin θ[ˆn]× + (1 −cos θ)[ˆn]2\n×)v.\n(2.33)\nWe can therefore write the rotation matrix corresponding to a rotation by θ around an axis ˆn\nas\nR(ˆn, θ) = I + sin θ[ˆn]× + (1 −cos θ)[ˆn]2\n×,\n(2.34)\nwhich is known as Rodriguez’s formula (Ayache 1989).\nThe product of the axis ˆn and angle θ, ω = θˆn = (ωx, ωy, ωz), is a minimal represen-\ntation for a 3D rotation. Rotations through common angles such as multiples of 90◦can be\nrepresented exactly (and converted to exact matrices) if θ is stored in degrees. Unfortunately,\nthis representation is not unique, since we can always add a multiple of 360◦(2π radians) to\nθ and get the same rotation matrix. As well, (ˆn, θ) and (−ˆn, −θ) represent the same rotation.\nHowever, for small rotations (e.g., corrections to rotations), this is an excellent choice.\nIn particular, for small (inﬁnitesimal or instantaneous) rotations and θ expressed in radians,\nRodriguez’s formula simpliﬁes to\nR(ω) ≈I + sin θ[ˆn]× ≈I + [θˆn]× =\n\n\n1\n−ωz\nωy\nωz\n1\n−ωx\n−ωy\nωx\n1\n\n,\n(2.35)\n2.1 Geometric primitives and transformations\n43\nwhich gives a nice linearized relationship between the rotation parameters ω and R. We can\nalso write R(ω)v ≈v + ω × v, which is handy when we want to compute the derivative of\nRv with respect to ω,\n∂Rv\n∂ωT = −[v]× =\n\n\n0\nz\n−y\n−z\n0\nx\ny\n−x\n0\n\n.\n(2.36)\nAnother way to derive a rotation through a ﬁnite angle is called the exponential twist\n(Murray, Li, and Sastry 1994). A rotation by an angle θ is equivalent to k rotations through\nθ/k. In the limit as k →∞, we obtain\nR(ˆn, θ) = lim\nk→∞(I + 1\nk [θˆn]×)k = exp [ω]×.\n(2.37)\nIf we expand the matrix exponential as a Taylor series (using the identity [ˆn]k+2\n×\n= −[ˆn]k\n×,\nk > 0, and again assuming θ is in radians),\nexp [ω]×\n=\nI + θ[ˆn]× + θ2\n2 [ˆn]2\n× + θ3\n3! [ˆn]3\n× + · · ·\n=\nI + (θ −θ3\n3! + · · ·)[ˆn]× + (θ2\n2 −θ3\n4! + · · ·)[ˆn]2\n×\n=\nI + sin θ[ˆn]× + (1 −cos θ)[ˆn]2\n×,\n(2.38)\nwhich yields the familiar Rodriguez’s formula.\nUnit quaternions\nThe unit quaternion representation is closely related to the angle/axis representation. A unit\nquaternion is a unit length 4-vector whose components can be written as q = (qx, qy, qz, qw)\nor q = (x, y, z, w) for short. Unit quaternions live on the unit sphere ∥q∥= 1 and antipodal\n(opposite sign) quaternions, q and −q, represent the same rotation (Figure 2.6). Other than\nthis ambiguity (dual covering), the unit quaternion representation of a rotation is unique.\nFurthermore, the representation is continuous, i.e., as rotation matrices vary continuously,\none can ﬁnd a continuous quaternion representation, although the path on the quaternion\nsphere may wrap all the way around before returning to the “origin” qo = (0, 0, 0, 1). For\nthese and other reasons given below, quaternions are a very popular representation for pose\nand for pose interpolation in computer graphics (Shoemake 1985).\nQuaternions can be derived from the axis/angle representation through the formula\nq = (v, w) = (sin θ\n2 ˆn, cos θ\n2),\n(2.39)\n44\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nz\nx\nw\n║q║=1\ny\nq0\nq1\nq2\n-q2\nFigure 2.6 Unit quaternions live on the unit sphere ∥q∥= 1. This ﬁgure shows a smooth\ntrajectory through the three quaternions q0, q1, and q2. The antipodal point to q2, namely\n−q2, represents the same rotation as q2.\nwhere ˆn and θ are the rotation axis and angle. Using the trigonometric identities sin θ =\n2 sin θ\n2 cos θ\n2 and (1 −cos θ) = 2 sin2 θ\n2, Rodriguez’s formula can be converted to\nR(ˆn, θ)\n=\nI + sin θ[ˆn]× + (1 −cos θ)[ˆn]2\n×\n=\nI + 2w[v]× + 2[v]2\n×.\n(2.40)\nThis suggests a quick way to rotate a vector v by a quaternion using a series of cross products,\nscalings, and additions. To obtain a formula for R(q) as a function of (x, y, z, w), recall that\n[v]× =\n\n\n0\n−z\ny\nz\n0\n−x\n−y\nx\n0\n\nand [v]2\n× =\n\n\n−y2 −z2\nxy\nxz\nxy\n−x2 −z2\nyz\nxz\nyz\n−x2 −y2\n\n.\nWe thus obtain\nR(q) =\n\n\n1 −2(y2 + z2)\n2(xy −zw)\n2(xz + yw)\n2(xy + zw)\n1 −2(x2 + z2)\n2(yz −xw)\n2(xz −yw)\n2(yz + xw)\n1 −2(x2 + y2)\n\n.\n(2.41)\nThe diagonal terms can be made more symmetrical by replacing 1 −2(y2 + z2) with (x2 +\nw2 −y2 −z2), etc.\nThe nicest aspect of unit quaternions is that there is a simple algebra for composing rota-\ntions expressed as unit quaternions. Given two quaternions q0 = (v0, w0) and q1 = (v1, w1),\nthe quaternion multiply operator is deﬁned as\nq2 = q0q1 = (v0 × v1 + w0v1 + w1v0, w0w1 −v0 · v1),\n(2.42)",
  "image_path": "page_065.jpg",
  "pages": [
    64,
    65,
    66
  ]
}