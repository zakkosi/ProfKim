{
  "doc_id": "pages_139_141",
  "text": "3.2 Linear ﬁltering\n117\nkernels (Perona 1995). For example, the Laplacian of Gaussian kernel (3.26 and 4.23) can be\nimplemented as the sum of two separable ﬁlters (4.24) (Wiejak, Buxton, and Buxton 1985).\nWhat if your kernel is not separable and yet you still want a faster way to implement\nit? Perona (1995), who ﬁrst made the link between kernel separability and SVD, suggests\nusing more terms in the (3.21) series, i.e., summing up a number of separable convolutions.\nWhether this is worth doing or not depends on the relative sizes of K and the number of sig-\nniﬁcant singular values, as well as other considerations, such as cache coherency and memory\nlocality.\n3.2.2 Examples of linear ﬁltering\nNow that we have described the process for performing linear ﬁltering, let us examine a\nnumber of frequently used ﬁlters.\nThe simplest ﬁlter to implement is the moving average or box ﬁlter, which simply averages\nthe pixel values in a K ×K window. This is equivalent to convolving the image with a kernel\nof all ones and then scaling (Figure 3.14a). For large kernels, a more efﬁcient implementation\nis to slide a moving window across each scanline (in a separable ﬁlter) while adding the\nnewest pixel and subtracting the oldest pixel from the running sum. This is related to the\nconcept of summed area tables, which we describe shortly.\nA smoother image can be obtained by separably convolving the image with a piecewise\nlinear “tent” function (also known as a Bartlett ﬁlter). Figure 3.14b shows a 3 × 3 version\nof this ﬁlter, which is called the bilinear kernel, since it is the outer product of two linear\n(ﬁrst-order) splines (see Section 3.5.2).\nConvolving the linear tent function with itself yields the cubic approximating spline,\nwhich is called the “Gaussian” kernel (Figure 3.14c) in Burt and Adelson’s (1983a) Lapla-\ncian pyramid representation (Section 3.5). Note that approximate Gaussian kernels can also\nbe obtained by iterated convolution with box ﬁlters (Wells 1986). In applications where the\nﬁlters really need to be rotationally symmetric, carefully tuned versions of sampled Gaussians\nshould be used (Freeman and Adelson 1991) (Exercise 3.10).\nThe kernels we just discussed are all examples of blurring (smoothing) or low-pass ker-\nnels (since they pass through the lower frequencies while attenuating higher frequencies).\nHow good are they at doing this? In Section 3.4, we use frequency-space Fourier analysis to\nexamine the exact frequency response of these ﬁlters. We also introduce the sinc ((sin x)/x)\nﬁlter, which performs ideal low-pass ﬁltering.\nIn practice, smoothing kernels are often used to reduce high-frequency noise. We have\nmuch more to say about using variants on smoothing to remove noise later (see Sections 3.3.1,\n3.4, and 3.7).\nSurprisingly, smoothing kernels can also be used to sharpen images using a process called\n118\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nunsharp masking.\nSince blurring the image reduces high frequencies, adding some of the\ndifference between the original and the blurred image makes it sharper,\ngsharp = f + γ(f −hblur ∗f).\n(3.22)\nIn fact, before the advent of digital photography, this was the standard way to sharpen images\nin the darkroom: create a blurred (“positive”) negative from the original negative by mis-\nfocusing, then overlay the two negatives before printing the ﬁnal image, which corresponds\nto\ngunsharp = f(1 −γhblur ∗f).\n(3.23)\nThis is no longer a linear ﬁlter but it still works well.\nLinear ﬁltering can also be used as a pre-processing stage to edge extraction (Section 4.2)\nand interest point detection (Section 4.1) algorithms. Figure 3.14d shows a simple 3 × 3 edge\nextractor called the Sobel operator, which is a separable combination of a horizontal central\ndifference (so called because the horizontal derivative is centered on the pixel) and a vertical\ntent ﬁlter (to smooth the results). As you can see in the image below the kernel, this ﬁlter\neffectively emphasizes horizontal edges.\nThe simple corner detector (Figure 3.14e) looks for simultaneous horizontal and vertical\nsecond derivatives. As you can see however, it responds not only to the corners of the square,\nbut also along diagonal edges. Better corner detectors, or at least interest point detectors that\nare more rotationally invariant, are described in Section 4.1.\n3.2.3 Band-pass and steerable ﬁlters\nThe Sobel and corner operators are simple examples of band-pass and oriented ﬁlters. More\nsophisticated kernels can be created by ﬁrst smoothing the image with a (unit area) Gaussian\nﬁlter,\nG(x, y; σ) =\n1\n2πσ2 e−x2+y2\n2σ2 ,\n(3.24)\nand then taking the ﬁrst or second derivatives (Marr 1982; Witkin 1983; Freeman and Adelson\n1991). Such ﬁlters are known collectively as band-pass ﬁlters, since they ﬁlter out both low\nand high frequencies.\nThe (undirected) second derivative of a two-dimensional image,\n∇2f = ∂2f\n∂x2 + ∂2y\n∂y2 ,\n(3.25)\nis known as the Laplacian operator. Blurring an image with a Gaussian and then taking its\nLaplacian is equivalent to convolving directly with the Laplacian of Gaussian (LoG) ﬁlter,\n∇2G(x, y; σ) =\n\u0012x2 + y2\nσ4\n−2\nσ2\n\u0013\nG(x, y; σ),\n(3.26)\n3.2 Linear ﬁltering\n119\n(a)\n(b)\n(c)\nFigure 3.15 Second-order steerable ﬁlter (Freeman 1992) c⃝1992 IEEE: (a) original image\nof Einstein; (b) orientation map computed from the second-order oriented energy; (c) original\nimage with oriented structures enhanced.\nwhich has certain nice scale-space properties (Witkin 1983; Witkin, Terzopoulos, and Kass\n1986). The ﬁve-point Laplacian is just a compact approximation to this more sophisticated\nﬁlter.\nLikewise, the Sobel operator is a simple approximation to a directional or oriented ﬁlter,\nwhich can obtained by smoothing with a Gaussian (or some other ﬁlter) and then taking a\ndirectional derivative ∇ˆu =\n∂\n∂ˆu, which is obtained by taking the dot product between the\ngradient ﬁeld ∇and a unit direction ˆu = (cos θ, sin θ),\nˆu · ∇(G ∗f) = ∇ˆu(G ∗f) = (∇ˆuG) ∗f.\n(3.27)\nThe smoothed directional derivative ﬁlter,\nGˆu = uGx + vGy = u∂G\n∂x + v ∂G\n∂y ,\n(3.28)\nwhere ˆu = (u, v), is an example of a steerable ﬁlter, since the value of an image convolved\nwith Gˆu can be computed by ﬁrst convolving with the pair of ﬁlters (Gx, Gy) and then\nsteering the ﬁlter (potentially locally) by multiplying this gradient ﬁeld with a unit vector ˆu\n(Freeman and Adelson 1991). The advantage of this approach is that a whole family of ﬁlters\ncan be evaluated with very little cost.\nHow about steering a directional second derivative ﬁlter ∇ˆu · ∇ˆuGˆu, which is the result\nof taking a (smoothed) directional derivative and then taking the directional derivative again?\nFor example, Gxx is the second directional derivative in the x direction.\nAt ﬁrst glance, it would appear that the steering trick will not work, since for every di-\nrection ˆu, we need to compute a different ﬁrst directional derivative. Somewhat surprisingly,\nFreeman and Adelson (1991) showed that, for directional Gaussian derivatives, it is possible",
  "image_path": "page_140.jpg",
  "pages": [
    139,
    140,
    141
  ]
}