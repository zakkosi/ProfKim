{
  "doc_id": "pages_270_272",
  "text": "248\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\nFigure 4.37 Curve smoothing with a Gaussian kernel (Lowe 1988) c⃝1998 IEEE: (a) with-\nout a shrinkage correction term; (b) with a shrinkage correction term.\nFigure 4.38 Changing the character of a curve without affecting its sweep (Finkelstein and\nSalesin 1994) c⃝1994 ACM: higher frequency wavelets can be replaced with exemplars from\na style library to effect different local appearances.\nnormalized descriptor, treating each x = (x, y) value as a complex number. If the original\ncurves are the same (up to an unknown scale and rotation), the resulting Fourier transforms\nshould differ only by a scale change in magnitude plus a constant complex phase shift, due\nto rotation, and a linear phase shift in the domain, due to different starting points for s (see\nExercise 4.9).\nArc-length parameterization can also be used to smooth curves in order to remove digiti-\nzation noise. However, if we just apply a regular smoothing ﬁlter, the curve tends to shrink\non itself (Figure 4.37a). Lowe (1989) and Taubin (1995) describe techniques that compensate\nfor this shrinkage by adding an offset term based on second derivative estimates or a larger\nsmoothing kernel (Figure 4.37b). An alternative approach, based on selectively modifying\ndifferent frequencies in a wavelet decomposition, is presented by Finkelstein and Salesin\n(1994). In addition to controlling shrinkage without affecting its “sweep”, wavelets allow the\n“character” of a curve to be interactively modiﬁed, as shown in Figure 4.38.\nThe evolution of curves as they are smoothed and simpliﬁed is related to “grassﬁre” (dis-\n4.2 Edges\n249\n(a)\n(b)\n(c)\n(d)\n(e)\n(f)\nFigure 4.39 Image editing in the contour domain (Elder and Goldberg 2001) c⃝2001 IEEE:\n(a) and (d) original images; (b) and (e) extracted edges (edges to be deleted are marked in\nwhite); (c) and (f) reconstructed edited images.\ntance) transforms and region skeletons (Section 3.3.3) (Tek and Kimia 2003), and can be used\nto recognize objects based on their contour shape (Sebastian and Kimia 2005). More local de-\nscriptors of curve shape such as shape contexts (Belongie, Malik, and Puzicha 2002) can also\nbe used for recognition and are potentially more robust to missing parts due to occlusions.\nThe ﬁeld of contour detection and linking continues to evolve rapidly and now includes\ntechniques for global contour grouping, boundary completion, and junction detection (Maire,\nArbelaez, Fowlkes et al. 2008), as well as grouping contours into likely regions (Arbel´aez,\nMaire, Fowlkes et al. 2010) and wide-baseline correspondence (Meltzer and Soatto 2008).\n4.2.3 Application: Edge editing and enhancement\nWhile edges can serve as components for object recognition or features for matching, they\ncan also be used directly for image editing.\nIn fact, if the edge magnitude and blur estimate are kept along with each edge, a visually\nsimilar image can be reconstructed from this information (Elder 1999). Based on this princi-\nple, Elder and Goldberg (2001) propose a system for “image editing in the contour domain”.\nTheir system allows users to selectively remove edges corresponding to unwanted features\nsuch as specularities, shadows, or distracting visual elements. After reconstructing the image\nfrom the remaining edges, the undesirable visual features have been removed (Figure 4.39).\n250\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\nFigure 4.40 Approximating a curve (shown in black) as a polyline or B-spline: (a) original\ncurve and a polyline approximation shown in red; (b) successive approximation by recursively\nﬁnding points furthest away from the current approximation; (c) smooth interpolating spline,\nshown in dark blue, ﬁt to the polyline vertices.\nAnother potential application is to enhance perceptually salient edges while simplifying\nthe underlying image to produce a cartoon-like or “pen-and-ink” stylized image (DeCarlo and\nSantella 2002). This application is discussed in more detail in Section 10.5.2.\n4.3 Lines\nWhile edges and general curves are suitable for describing the contours of natural objects,\nthe man-made world is full of straight lines. Detecting and matching these lines can be\nuseful in a variety of applications, including architectural modeling, pose estimation in urban\nenvironments, and the analysis of printed document layouts.\nIn this section, we present some techniques for extracting piecewise linear descriptions\nfrom the curves computed in the previous section. We begin with some algorithms for approx-\nimating a curve as a piecewise-linear polyline. We then describe the Hough transform, which\ncan be used to group edgels into line segments even across gaps and occlusions. Finally, we\ndescribe how 3D lines with common vanishing points can be grouped together. These van-\nishing points can be used to calibrate a camera and to determine its orientation relative to a\nrectahedral scene, as described in Section 6.3.2.\n4.3.1 Successive approximation\nAs we saw in Section 4.2.2, describing a curve as a series of 2D locations xi = x(si) provides\na general representation suitable for matching and further processing. In many applications,\nhowever, it is preferable to approximate such a curve with a simpler representation, e.g., as a\npiecewise-linear polyline or as a B-spline curve (Farin 1996), as shown in Figure 4.40.\nMany techniques have been developed over the years to perform this approximation,\nwhich is also known as line simpliﬁcation. One of the oldest, and simplest, is the one proposed",
  "image_path": "page_271.jpg",
  "pages": [
    270,
    271,
    272
  ]
}