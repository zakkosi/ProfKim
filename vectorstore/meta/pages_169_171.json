{
  "doc_id": "pages_169_171",
  "text": "3.5 Pyramids and wavelets\n147\n(a)\n(b)\n(c)\n(d)\nFigure 3.28\nTwo-dimensional image interpolation: (a) bilinear; (b) bicubic (a = −1); (c)\nbicubic (a = −0.5); (d) windowed sinc (nine taps).\n-0.5\n0.0\n0.5\n1.0\n-4\n-3\n-2\n-1\n0\n1\n2\n3\n4\nwindowed-sinc\ntent\ncubic a=-0.5\ncubic a=-1\n-200\n-180\n-160\n-140\n-120\n-100\n-80\n-60\n-40\n-20\n0\n-0.5\n0.0\n0.5\nwindowed-sinc\ncubic a=-0.5\ntent\ncubic a=-1\n(a)\n(b)\nFigure 3.29 (a) Some windowed sinc functions and (b) their log Fourier transforms: raised-\ncosine windowed sinc in blue, cubic interpolators (a = −1 and a = −0.5) in green and\npurple, and tent function in brown. They are often used to perform high-accuracy low-pass\nﬁltering operations.\n148\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nstarted being displaced by subdivision surfaces (Zorin, Schr¨oder, and Sweldens 1996; Peters\nand Reif 2008). In computer vision, splines are often used for elastic image deformations\n(Section 3.6.2), motion estimation (Section 8.3), and surface interpolation (Section 12.3). In\nfact, it is possible to carry out most image processing operations by representing images as\nsplines and manipulating them in a multi-resolution framework (Unser 1999).\nThe highest quality interpolator is generally believed to be the windowed sinc function\nbecause it both preserves details in the lower resolution image and avoids aliasing. (It is also\npossible to construct a C1 piecewise-cubic approximation to the windowed sinc by matching\nits derivatives at zero crossing (Szeliski and Ito 1986).) However, some people object to the\nexcessive ringing that can be introduced by the windowed sinc and to the repetitive nature\nof the ringing frequencies (see Figure 3.28d). For this reason, some photographers prefer\nto repeatedly interpolate images by a small fractional amount (this tends to de-correlate the\noriginal pixel grid with the ﬁnal image).\nAdditional possibilities include using the bilat-\neral ﬁlter as an interpolator (Kopf, Cohen, Lischinski et al. 2007), using global optimization\n(Section 3.6) or hallucinating details (Section 10.3).\n3.5.2 Decimation\nWhile interpolation can be used to increase the resolution of an image, decimation (downsam-\npling) is required to reduce the resolution.15 To perform decimation, we ﬁrst (conceptually)\nconvolve the image with a low-pass ﬁlter (to avoid aliasing) and then keep every rth sample.\nIn practice, we usually only evaluate the convolution at every rth sample,\ng(i, j) =\nX\nk,l\nf(k, l)h(ri −k, rj −l),\n(3.80)\nas shown in Figure 3.30. Note that the smoothing kernel h(k, l), in this case, is often a\nstretched and re-scaled version of an interpolation kernel. Alternatively, we can write\ng(i, j) = 1\nr\nX\nk,l\nf(k, l)h(i −k/r, j −l/r)\n(3.81)\nand keep the same kernel h(k, l) for both interpolation and decimation.\nOne commonly used (r = 2) decimation ﬁlter is the binomial ﬁlter introduced by Burt\nand Adelson (1983a). As shown in Table 3.3, this kernel does a decent job of separating\nthe high and low frequencies, but still leaves a fair amount of high-frequency detail, which\ncan lead to aliasing after downsampling. However, for applications such as image blending\n(discussed later in this section), this aliasing is of little concern.\n15 The term “decimation” has a gruesome etymology relating to the practice of killing every tenth soldier in\na Roman unit guilty of cowardice. It is generally used in signal processing to mean any downsampling or rate\nreduction operation.\n3.5 Pyramids and wavelets\n149\n(a)\n(b)\nFigure 3.30 Signal decimation: (a) the original samples are (b) convolved with a low-pass\nﬁlter before being downsampled.\nIf, however, the downsampled images will be displayed directly to the user or, perhaps,\nblended with other resolutions (as in MIP-mapping, Section 3.5.3), a higher-quality ﬁlter is\ndesired. For high downsampling rates, the windowed sinc pre-ﬁlter is a good choice (Fig-\nure 3.29). However, for small downsampling rates, e.g., r = 2, more careful ﬁlter design is\nrequired.\nTable 3.4 shows a number of commonly used r = 2 downsampling ﬁlters, while Fig-\nure 3.31 shows their corresponding frequency responses. These ﬁlters include:\n• the linear [1, 2, 1] ﬁlter gives a relatively poor response;\n• the binomial [1, 4, 6, 4, 1] ﬁlter cuts off a lot of frequencies but is useful for computer\nvision analysis pyramids;\n• the cubic ﬁlters from (3.79); the a = −1 ﬁlter has a sharper fall-off than the a = −0.5\nﬁlter (Figure 3.31);\n|n|\nLinear\nBinomial\nCubic\na = −1\nCubic\na = −0.5\nWindowed\nsinc\nQMF-9\nJPEG\n2000\n0\n0.50\n0.3750\n0.5000\n0.50000\n0.4939\n0.5638\n0.6029\n1\n0.25\n0.2500\n0.3125\n0.28125\n0.2684\n0.2932\n0.2669\n2\n0.0625\n0.0000\n0.00000\n0.0000\n-0.0519\n-0.0782\n3\n-0.0625\n-0.03125\n-0.0153\n-0.0431\n-0.0169\n4\n0.0000\n0.0198\n0.0267\nTable 3.4\nFilter coefﬁcients for 2× decimation. These ﬁlters are of odd length, are sym-\nmetric, and are normalized to have unit DC gain (sum up to 1). See Figure 3.31 for their\nassociated frequency responses.",
  "image_path": "page_170.jpg",
  "pages": [
    169,
    170,
    171
  ]
}