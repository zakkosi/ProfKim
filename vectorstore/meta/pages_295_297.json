{
  "doc_id": "pages_295_297",
  "text": "5.1 Active contours\n273\nis the Euclidean distance between a tour point f(i) and a city location d(j). The correspond-\ning data ﬁtting energy (negative log likelihood) is\nEslippery = −\nX\nj\nlog p(d(j)) = −\nX\nj\nlog\nhX\ne−∥f (i)−d(j)∥2/2σ2i\n.\n(5.9)\nThis energy derives its name from the fact that, unlike a regular spring, which couples a\ngiven snake point to a given constraint (5.6), this alternative energy deﬁnes a slippery spring\nthat allows the association between constraints (cities) and curve (tour) points to evolve over\ntime (Szeliski 1989). Note that this is a soft variant of the popular iterated closest point\ndata constraint that is often used in ﬁtting or aligning surfaces to data points or to each other\n(Section 12.2.1) (Besl and McKay 1992; Zhang 1994).\nTo compute a good solution to the TSP, the slippery spring data association energy is\ncombined with a regular ﬁrst-order internal smoothness energy (5.3) to deﬁne the cost of a\ntour. The tour f(s) is initialized as a small circle around the mean of the city points and σ is\nprogressively lowered (Figure 5.3). For large σ values, the tour tries to stay near the centroid\nof the points but as σ decreases each city pulls more and more strongly on its closest tour\npoints (Durbin, Szeliski, and Yuille 1989). In the limit as σ →0, each city is guaranteed to\ncapture at least one tour point and the tours between subsequent cites become straight lines.\nSplines and shape priors\nWhile snakes can be very good at capturing the ﬁne and irregular detail in many real-world\ncontours, they sometimes exhibit too many degrees of freedom, making it more likely that\nthey can get trapped in local minima during their evolution.\nOne solution to this problem is to control the snake with fewer degrees of freedom through\nthe use of B-spline approximations (Menet, Saint-Marc, and Medioni 1990b,a; Cipolla and\nBlake 1990). The resulting B-snake can be written as\nf(s) =\nX\nk\nBk(s)xk\n(5.10)\nor in discrete form as\nF = BX\n(5.11)\nwith\nF =\n\n\nf T (0)\n...\nf T (N)\n\n, B =\n\n\nB0(s0)\n. . .\nBK(s0)\n...\n...\n...\nB0(sN)\n. . .\nBK(sN)\n\n, and X =\n\n\nxT (0)\n...\nxT (K)\n\n.\n(5.12)\n274\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\n(d)\nFigure 5.4\nPoint distribution model for a set of resistors (Cootes, Cooper, Taylor et al.\n1995) c⃝1995 Elsevier: (a) set of input resistor shapes; (b) assignment of control points\nto the boundary; (c) distribution (scatter plot) of point locations; (d) ﬁrst (largest) mode of\nvariation in the ensemble shapes.\nIf the object being tracked or recognized has large variations in location, scale, or ori-\nentation, these can be modeled as an additional transformation on the control points, e.g.,\nx′\nk = sRxk + t (2.18), which can be estimated at the same time as the values of the control\npoints. Alternatively, separate detection and alignment stages can be run to ﬁrst localize and\norient the objects of interest (Cootes, Cooper, Taylor et al. 1995).\nIn a B-snake, because the snake is controlled by fewer degrees of freedom, there is less\nneed for the internal smoothness forces used with the original snakes, although these can still\nbe derived and implemented using ﬁnite element analysis, i.e., taking derivatives and integrals\nof the B-spline basis functions (Terzopoulos 1983; Bathe 2007).\nIn practice, it is more common to estimate a set of shape priors on the typical distribution\nof the control points {xk} (Cootes, Cooper, Taylor et al. 1995). Consider the set of resistor\nshapes shown in Figure 5.4a. If we describe each contour with the set of control points\nshown in Figure 5.4b, we can plot the distribution of each point in a scatter plot, as shown in\nFigure 5.4c.\nOne potential way of describing this distribution would be by the location ¯xk and 2D\ncovariance Ck of each individual point xk. These could then be turned into a quadratic\npenalty (prior energy) on the point location,\nEloc(xk) = 1\n2(xk −¯xk)T C−1\nk (xk −¯xk).\n(5.13)\nIn practice, however, the variation in point locations is usually highly correlated.\nA preferable approach is to estimate the joint covariance of all the points simultaneously.\nFirst, concatenate all of the point locations {xk} into a single vector x, e.g., by interleaving\nthe x and y locations of each point. The distribution of these vectors across all training\n5.1 Active contours\n275\n(a)\n(b)\nFigure 5.5 Active Shape Model (ASM): (a) the effect of varying the ﬁrst four shape param-\neters for a set of faces (Cootes, Taylor, Lanitis et al. 1993) c⃝1993 IEEE; (b) searching for\nthe strongest gradient along the normal to each control point (Cootes, Cooper, Taylor et al.\n1995) c⃝1995 Elsevier.\nexamples (Figure 5.4a) can be described with a mean ¯x and a covariance\nC = 1\nP\nX\np\n(xp −¯x)(xp −¯x)T ,\n(5.14)\nwhere xp are the P training examples. Using eigenvalue analysis (Appendix A.1.2), which is\nalso known as Principal Component Analysis (PCA) (Appendix B.1.1), the covariance matrix\ncan be written as,\nC = Φ diag(λ0 . . . λK−1) ΦT .\n(5.15)\nIn most cases, the likely appearance of the points can be modeled using only a few eigen-\nvectors with the largest eigenvalues. The resulting point distribution model (Cootes, Taylor,\nLanitis et al. 1993; Cootes, Cooper, Taylor et al. 1995) can be written as\nx = ¯x + ˆΦ b,\n(5.16)\nwhere b is an M ≪K element shape parameter vector and ˆΦ are the ﬁrst m columns of Φ.\nTo constrain the shape parameters to reasonable values, we can use a quadratic penalty of the\nform\nEshape = 1\n2bT diag(λ0 . . . λM−1) b =\nX\nm\nb2\nm/2λm.\n(5.17)\nAlternatively, the range of allowable bm values can be limited to some range, e.g., |bm| ≤\n3√λm (Cootes, Cooper, Taylor et al. 1995). Alternative approaches for deriving a set of\nshape vectors are reviewed by Isard and Blake (1998).",
  "image_path": "page_296.jpg",
  "pages": [
    295,
    296,
    297
  ]
}