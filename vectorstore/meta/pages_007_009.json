{
  "doc_id": "pages_007_009",
  "text": "Preface\nThe seeds for this book were ﬁrst planted in 2001 when Steve Seitz at the University of Wash-\nington invited me to co-teach a course called “Computer Vision for Computer Graphics”. At\nthat time, computer vision techniques were increasingly being used in computer graphics to\ncreate image-based models of real-world objects, to create visual effects, and to merge real-\nworld imagery using computational photography techniques. Our decision to focus on the\napplications of computer vision to fun problems such as image stitching and photo-based 3D\nmodeling from personal photos seemed to resonate well with our students.\nSince that time, a similar syllabus and project-oriented course structure has been used to\nteach general computer vision courses both at the University of Washington and at Stanford.\n(The latter was a course I co-taught with David Fleet in 2003.) Similar curricula have been\nadopted at a number of other universities and also incorporated into more specialized courses\non computational photography. (For ideas on how to use this book in your own course, please\nsee Table 1.1 in Section 1.4.)\nThis book also reﬂects my 20 years’ experience doing computer vision research in corpo-\nrate research labs, mostly at Digital Equipment Corporation’s Cambridge Research Lab and\nat Microsoft Research. In pursuing my work, I have mostly focused on problems and solu-\ntion techniques (algorithms) that have practical real-world applications and that work well in\npractice. Thus, this book has more emphasis on basic techniques that work under real-world\nconditions and less on more esoteric mathematics that has intrinsic elegance but less practical\napplicability.\nThis book is suitable for teaching a senior-level undergraduate course in computer vision\nto students in both computer science and electrical engineering. I prefer students to have\neither an image processing or a computer graphics course as a prerequisite so that they can\nspend less time learning general background mathematics and more time studying computer\nvision techniques. The book is also suitable for teaching graduate-level courses in computer\nvision (by delving into the more demanding application and algorithmic areas) and as a gen-\neral reference to fundamental techniques and the recent research literature. To this end, I have\nattempted wherever possible to at least cite the newest research in each sub-ﬁeld, even if the\nviii\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\ntechnical details are too complex to cover in the book itself.\nIn teaching our courses, we have found it useful for the students to attempt a number of\nsmall implementation projects, which often build on one another, in order to get them used to\nworking with real-world images and the challenges that these present. The students are then\nasked to choose an individual topic for each of their small-group, ﬁnal projects. (Sometimes\nthese projects even turn into conference papers!) The exercises at the end of each chapter\ncontain numerous suggestions for smaller mid-term projects, as well as more open-ended\nproblems whose solutions are still active research topics. Wherever possible, I encourage\nstudents to try their algorithms on their own personal photographs, since this better motivates\nthem, often leads to creative variants on the problems, and better acquaints them with the\nvariety and complexity of real-world imagery.\nIn formulating and solving computer vision problems, I have often found it useful to draw\ninspiration from three high-level approaches:\n• Scientiﬁc: build detailed models of the image formation process and develop mathe-\nmatical techniques to invert these in order to recover the quantities of interest (where\nnecessary, making simplifying assumption to make the mathematics more tractable).\n• Statistical: use probabilistic models to quantify the prior likelihood of your unknowns\nand the noisy measurement processes that produce the input images, then infer the best\npossible estimates of your desired quantities and analyze their resulting uncertainties.\nThe inference algorithms used are often closely related to the optimization techniques\nused to invert the (scientiﬁc) image formation processes.\n• Engineering: develop techniques that are simple to describe and implement but that\nare also known to work well in practice. Test these techniques to understand their\nlimitation and failure modes, as well as their expected computational costs (run-time\nperformance).\nThese three approaches build on each other and are used throughout the book.\nMy personal research and development philosophy (and hence the exercises in the book)\nhave a strong emphasis on testing algorithms. It’s too easy in computer vision to develop an\nalgorithm that does something plausible on a few images rather than something correct. The\nbest way to validate your algorithms is to use a three-part strategy.\nFirst, test your algorithm on clean synthetic data, for which the exact results are known.\nSecond, add noise to the data and evaluate how the performance degrades as a function of\nnoise level. Finally, test the algorithm on real-world data, preferably drawn from a wide\nvariety of sources, such as photos found on the Web. Only then can you truly know if your\nalgorithm can deal with real-world complexity, i.e., images that do not ﬁt some simpliﬁed\nmodel or assumptions.\nPreface\nix\nIn order to help students in this process, this books comes with a large amount of supple-\nmentary material, which can be found on the book’s Web site http://szeliski.org/Book. This\nmaterial, which is described in Appendix C, includes:\n• pointers to commonly used data sets for the problems, which can be found on the Web\n• pointers to software libraries, which can help students get started with basic tasks such\nas reading/writing images or creating and manipulating images\n• slide sets corresponding to the material covered in this book\n• a BibTeX bibliography of the papers cited in this book.\nThe latter two resources may be of more interest to instructors and researchers publishing\nnew papers in this ﬁeld, but they will probably come in handy even with regular students.\nSome of the software libraries contain implementations of a wide variety of computer vision\nalgorithms, which can enable you to tackle more ambitious projects (with your instructor’s\nconsent).\nAcknowledgements\nI would like to gratefully acknowledge all of the people whose passion for research and\ninquiry as well as encouragement have helped me write this book.\nSteve Zucker at McGill University ﬁrst introduced me to computer vision, taught all of\nhis students to question and debate research results and techniques, and encouraged me to\npursue a graduate career in this area.\nTakeo Kanade and Geoff Hinton, my Ph. D. thesis advisors at Carnegie Mellon University,\ntaught me the fundamentals of good research, writing, and presentation. They ﬁred up my\ninterest in visual processing, 3D modeling, and statistical methods, while Larry Matthies\nintroduced me to Kalman ﬁltering and stereo matching.\nDemetri Terzopoulos was my mentor at my ﬁrst industrial research job and taught me the\nropes of successful publishing. Yvan Leclerc and Pascal Fua, colleagues from my brief in-\nterlude at SRI International, gave me new perspectives on alternative approaches to computer\nvision.\nDuring my six years of research at Digital Equipment Corporation’s Cambridge Research\nLab, I was fortunate to work with a great set of colleagues, including Ingrid Carlbom, Gudrun\nKlinker, Keith Waters, Richard Weiss, St´ephane Lavall´ee, and Sing Bing Kang, as well as to\nsupervise the ﬁrst of a long string of outstanding summer interns, including David Tonnesen,\nSing Bing Kang, James Coughlan, and Harry Shum. This is also where I began my long-term\ncollaboration with Daniel Scharstein, now at Middlebury College.",
  "image_path": "page_008.jpg",
  "pages": [
    7,
    8,
    9
  ]
}