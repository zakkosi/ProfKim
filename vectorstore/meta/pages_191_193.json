{
  "doc_id": "pages_191_193",
  "text": "3.6 Geometric transformations\n169\nH2\ni\nf\nx\nx\nx\ni\nf’\ng1\ng2\ng3\nu\nF\nu\nG1\nu\nG2\nu\nG3\nu\nF’\nH1\ninterpolate\n* h1(x)\nwarp\nax+t\nfilter\n* h2(x)\nsample\n* δ(x)\n(f)\n(g)\n(h)\n(i)\n(j)\n(a)\n(b)\n(c)\n(d)\n(e)\nFigure 3.49 One-dimensional signal resampling (Szeliski, Winder, and Uyttendaele 2010):\n(a) original sampled signal f(i); (b) interpolated signal g1(x); (c) warped signal g2(x); (d)\nﬁltered signal g3(x); (e) sampled signal f ′(i). The corresponding spectra are shown below\nthe signals, with the aliased portions shown in red.\nMulti-pass transforms\nThe optimal approach to warping images without excessive blurring or aliasing is to adap-\ntively pre-ﬁlter the source image at each pixel using an ideal low-pass ﬁlter, i.e., an oriented\nskewed sinc or low-order (e.g., cubic) approximation (Figure 3.48a). Figure 3.49 shows how\nthis works in one dimension. The signal is ﬁrst (theoretically) interpolated to a continuous\nwaveform, (ideally) low-pass ﬁltered to below the new Nyquist rate, and then re-sampled to\nthe ﬁnal desired resolution. In practice, the interpolation and decimation steps are concate-\nnated into a single polyphase digital ﬁltering operation (Szeliski, Winder, and Uyttendaele\n2010).\nFor parametric transforms, the oriented two-dimensional ﬁltering and resampling opera-\ntions can be approximated using a series of one-dimensional resampling and shearing trans-\nforms (Catmull and Smith 1980; Heckbert 1989; Wolberg 1990; Gomes, Darsa, Costa et al.\n1999; Szeliski, Winder, and Uyttendaele 2010). The advantage of using a series of one-\ndimensional transforms is that they are much more efﬁcient (in terms of basic arithmetic\noperations) than large, non-separable, two-dimensional ﬁlter kernels.\nIn order to prevent aliasing, however, it may be necessary to upsample in the opposite di-\nrection before applying a shearing transformation (Szeliski, Winder, and Uyttendaele 2010).\nFigure 3.50 shows this process for a rotation, where a vertical upsampling stage is added be-\nfore the horizontal shearing (and upsampling) stage. The upper image shows the appearance\nof the letter being rotated, while the lower image shows its corresponding Fourier transform.\n170\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nvertical shear\n+ downsample\n(a)\n(b)\n(c)\n(d)\nvertical \nupsample\nhorizontal shear\n+ upsample\nhorizontal  \ndownsample\n(e)\nFigure 3.50 Four-pass rotation (Szeliski, Winder, and Uyttendaele 2010): (a) original pixel\ngrid, image, and its Fourier transform; (b) vertical upsampling; (c) horizontal shear and up-\nsampling; (d) vertical shear and downsampling; (e) horizontal downsampling. The general\nafﬁne case looks similar except that the ﬁrst two stages perform general resampling.\n3.6.2 Mesh-based warping\nWhile parametric transforms speciﬁed by a small number of global parameters have many\nuses, local deformations with more degrees of freedom are often required.\nConsider, for example, changing the appearance of a face from a frown to a smile (Fig-\nure 3.51a). What is needed in this case is to curve the corners of the mouth upwards while\nleaving the rest of the face intact.19 To perform such a transformation, different amounts of\nmotion are required in different parts of the image. Figure 3.51 shows some of the commonly\nused approaches.\nThe ﬁrst approach, shown in Figure 3.51a–b, is to specify a sparse set of corresponding\npoints. The displacement of these points can then be interpolated to a dense displacement ﬁeld\n(Chapter 8) using a variety of techniques (Nielson 1993). One possibility is to triangulate\nthe set of points in one image (de Berg, Cheong, van Kreveld et al. 2006; Litwinowicz and\nWilliams 1994; Buck, Finkelstein, Jacobs et al. 2000) and to use an afﬁne motion model\n(Table 3.5), speciﬁed by the three triangle vertices, inside each triangle. If the destination\n19 Rowland and Perrett (1995); Pighin, Hecker, Lischinski et al. (1998); Blanz and Vetter (1999); Leyvand, Cohen-\nOr, Dror et al. (2008) show more sophisticated examples of changing facial expression and appearance.\n3.6 Geometric transformations\n171\n(a)\n(b)\n(c)\n(d)\nFigure 3.51 Image warping alternatives (Gomes, Darsa, Costa et al. 1999) c⃝1999 Morgan\nKaufmann: (a) sparse control points −→deformation grid; (b) denser set of control point\ncorrespondences; (c) oriented line correspondences; (d) uniform quadrilateral grid.\nimage is triangulated according to the new vertex locations, an inverse warping algorithm\n(Figure 3.47) can be used. If the source image is triangulated and used as a texture map,\ncomputer graphics rendering algorithms can be used to draw the new image (but care must\nbe taken along triangle edges to avoid potential aliasing).\nAlternative methods for interpolating a sparse set of displacements include moving nearby\nquadrilateral mesh vertices, as shown in Figure 3.51a, using variational (energy minimizing)\ninterpolants such as regularization (Litwinowicz and Williams 1994), see Section 3.7.1, or\nusing locally weighted (radial basis function) combinations of displacements (Nielson 1993).\n(See (Section 12.3.1) for additional scattered data interpolation techniques.) If quadrilateral\nmeshes are used, it may be desirable to interpolate displacements down to individual pixel\nvalues using a smooth interpolant such as a quadratic B-spline (Farin 1996; Lee, Wolberg,\nChwa et al. 1996).20\nIn some cases, e.g., if a dense depth map has been estimated for an image (Shade, Gortler,\nHe et al. 1998), we only know the forward displacement for each pixel. As mentioned before,\ndrawing source pixels at their destination location, i.e., forward warping (Figure 3.46), suffers\nfrom several potential problems, including aliasing and the appearance of small cracks. An\nalternative technique in this case is to forward warp the displacement ﬁeld (or depth map) to\n20 Note that the block-based motion models used by many video compression standards (Le Gall 1991) can be\nthought of as a 0th-order (piecewise-constant) displacement ﬁeld.",
  "image_path": "page_192.jpg",
  "pages": [
    191,
    192,
    193
  ]
}