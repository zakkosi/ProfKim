{
  "doc_id": "pages_058_060",
  "text": "36\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\ny\nx\nsimilarity\nEuclidean\naffine\nprojective\ntranslation\nFigure 2.4 Basic set of 2D planar transformations.\nTranslation.\n2D translations can be written as x′ = x + t or\nx′ =\nh\nI\nt\ni\n¯x\n(2.14)\nwhere I is the (2 × 2) identity matrix or\n¯x′ =\n\"\nI\nt\n0T\n1\n#\n¯x\n(2.15)\nwhere 0 is the zero vector. Using a 2 × 3 matrix results in a more compact notation, whereas\nusing a full-rank 3 × 3 matrix (which can be obtained from the 2 × 3 matrix by appending a\n[0T 1] row) makes it possible to chain transformations using matrix multiplication. Note that\nin any equation where an augmented vector such as ¯x appears on both sides, it can always be\nreplaced with a full homogeneous vector ˜x.\nRotation + translation.\nThis transformation is also known as 2D rigid body motion or the\n2D Euclidean transformation (since Euclidean distances are preserved). It can be written as\nx′ = Rx + t or\nx′ =\nh\nR\nt\ni\n¯x\n(2.16)\nwhere\nR =\n\"\ncos θ\n−sin θ\nsin θ\ncos θ\n#\n(2.17)\nis an orthonormal rotation matrix with RRT = I and |R| = 1.\nScaled rotation.\nAlso known as the similarity transform, this transformation can be ex-\npressed as x′ = sRx + t where s is an arbitrary scale factor. It can also be written as\nx′ =\nh\nsR\nt\ni\n¯x =\n\"\na\n−b\ntx\nb\na\nty\n#\n¯x,\n(2.18)\nwhere we no longer require that a2 + b2 = 1. The similarity transform preserves angles\nbetween lines.\n2.1 Geometric primitives and transformations\n37\nAfﬁne.\nThe afﬁne transformation is written as x′ = A¯x, where A is an arbitrary 2 × 3\nmatrix, i.e.,\nx′ =\n\"\na00\na01\na02\na10\na11\na12\n#\n¯x.\n(2.19)\nParallel lines remain parallel under afﬁne transformations.\nProjective.\nThis transformation, also known as a perspective transform or homography,\noperates on homogeneous coordinates,\n˜x′ = ˜\nH ˜x,\n(2.20)\nwhere ˜\nH is an arbitrary 3 × 3 matrix. Note that ˜\nH is homogeneous, i.e., it is only deﬁned\nup to a scale, and that two ˜\nH matrices that differ only by scale are equivalent. The resulting\nhomogeneous coordinate ˜x′ must be normalized in order to obtain an inhomogeneous result\nx, i.e.,\nx′ = h00x + h01y + h02\nh20x + h21y + h22\nand y′ = h10x + h11y + h12\nh20x + h21y + h22\n.\n(2.21)\nPerspective transformations preserve straight lines (i.e., they remain straight after the trans-\nformation).\nHierarchy of 2D transformations.\nThe preceding set of transformations are illustrated\nin Figure 2.4 and summarized in Table 2.1. The easiest way to think of them is as a set\nof (potentially restricted) 3 × 3 matrices operating on 2D homogeneous coordinate vectors.\nHartley and Zisserman (2004) contains a more detailed description of the hierarchy of 2D\nplanar transformations.\nThe above transformations form a nested set of groups, i.e., they are closed under com-\nposition and have an inverse that is a member of the same group. (This will be important\nlater when applying these transformations to images in Section 3.6.) Each (simpler) group is\na subset of the more complex group below it.\nCo-vectors.\nWhile the above transformations can be used to transform points in a 2D plane,\ncan they also be used directly to transform a line equation? Consider the homogeneous equa-\ntion ˜l · ˜x = 0. If we transform x′ = ˜\nHx, we obtain\n˜l\n′ · ˜x′ = ˜l\n′T ˜\nH ˜x = ( ˜\nH\nT˜l\n′)T ˜x = ˜l · ˜x = 0,\n(2.22)\ni.e., ˜l\n′ = ˜\nH\n−T˜l. Thus, the action of a projective transformation on a co-vector such as a 2D\nline or 3D normal can be represented by the transposed inverse of the matrix, which is equiv-\nalent to the adjoint of ˜\nH, since projective transformation matrices are homogeneous. Jim\n38\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nTransformation\nMatrix\n# DoF\nPreserves\nIcon\ntranslation\nh\nI\nt\ni\n2×3\n2\norientation\nrigid (Euclidean)\nh\nR\nt\ni\n2×3\n3\nlengths\n\u001a\n\u001a\n\u001a\u001a\nS\nS S\nS\nsimilarity\nh\nsR\nt\ni\n2×3\n4\nangles\n\u001a\n\u001a\nS S\nafﬁne\nh\nA\ni\n2×3\n6\nparallelism\n\u0002\u0002\n\u0002\u0002\nprojective\nh\n˜\nH\ni\n3×3\n8\nstraight lines\n``\n  \nTable 2.1 Hierarchy of 2D coordinate transformations. Each transformation also preserves\nthe properties listed in the rows below it, i.e., similarity preserves not only angles but also\nparallelism and straight lines. The 2×3 matrices are extended with a third [0T 1] row to form\na full 3 × 3 matrix for homogeneous coordinate transformations.\nBlinn (1998) describes (in Chapters 9 and 10) the ins and outs of notating and manipulating\nco-vectors.\nWhile the above transformations are the ones we use most extensively, a number of addi-\ntional transformations are sometimes used.\nStretch/squash.\nThis transformation changes the aspect ratio of an image,\nx′\n=\nsxx + tx\ny′\n=\nsyy + ty,\nand is a restricted form of an afﬁne transformation. Unfortunately, it does not nest cleanly\nwith the groups listed in Table 2.1.\nPlanar surface ﬂow.\nThis eight-parameter transformation (Horn 1986; Bergen, Anandan,\nHanna et al. 1992; Girod, Greiner, and Niemann 2000),\nx′\n=\na0 + a1x + a2y + a6x2 + a7xy\ny′\n=\na3 + a4x + a5y + a7x2 + a6xy,\narises when a planar surface undergoes a small 3D motion. It can thus be thought of as a\nsmall motion approximation to a full homography. Its main attraction is that it is linear in the\nmotion parameters, ak, which are often the quantities being estimated.",
  "image_path": "page_059.jpg",
  "pages": [
    58,
    59,
    60
  ]
}