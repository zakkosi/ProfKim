{
  "doc_id": "pages_427_429",
  "text": "8.3 Spline-based motion\n405\nFigure 8.7 Spline motion ﬁeld: the displacement vectors ui = (ui, vi) are shown as pluses\n(+) and are controlled by the smaller number of control vertices ˆuj = (ˆui, ˆvj), which are\nshown as circles (◦).\nNotice how in the above equation, the number of variables {ui} is twice the number of\nmeasurements, so the problem is underconstrained.\nThe two classic approaches to this problem, which we study in Section 8.4, are to perform\nthe summation over overlapping regions (the patch-based or window-based approach) or to\nadd smoothness terms on the {ui} ﬁeld using regularization or Markov random ﬁelds (Sec-\ntion 3.7). In this section, we describe an alternative approach that lies somewhere between\ngeneral optical ﬂow (independent ﬂow at each pixel) and parametric ﬂow (a small number of\nglobal parameters). The approach is to represent the motion ﬁeld as a two-dimensional spline\ncontrolled by a smaller number of control vertices {ˆuj} (Figure 8.7),\nui =\nX\nj\nˆujBj(xi) =\nX\nj\nˆujwi,j,\n(8.68)\nwhere the Bj(xi) are called the basis functions and are only non-zero over a small ﬁnite sup-\nport interval (Szeliski and Coughlan 1997). We call the wij = Bj(xi) weights to emphasize\nthat the {ui} are known linear combinations of the {ˆuj}. Some commonly used spline basis\nfunctions are shown in Figure 8.8.\nSubstituting the formula for the individual per-pixel ﬂow vectors ui (8.68) into the SSD\nerror metric (8.67) yields a parametric motion formula similar to Equation (8.50). The biggest\ndifference is that the Jacobian J1(x′\ni) (8.52) now consists of the sparse entries in the weight\nmatrix W = [wij].\nIn situations where we know something more about the motion ﬁeld, e.g., when the mo-\ntion is due to a camera moving in a static scene, we can use more specialized motion models.\nFor example, the plane plus parallax model (Section 2.1.5) can be naturally combined with\na spline-based motion representation, where the in-plane motion is represented by a homog-\nraphy (6.19) and the out-of-plane parallax d is represented by a scalar variable at each spline\n406\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nFigure 8.8 Sample spline basis functions (Szeliski and Coughlan 1997) c⃝1997 Springer.\nThe block (constant) interpolator/basis corresponds to block-based motion estimation\n(Le Gall 1991). See Section 3.5.1 for more details on spline functions.\n8.3 Spline-based motion\n407\n(a)\n(b)\n(c)\n(d)\nFigure 8.9\nQuadtree spline-based motion estimation (Szeliski and Shum 1996) c⃝1996\nIEEE: (a) quadtree spline representation, (b) which can lead to cracks, unless the white nodes\nare constrained to depend on their parents; (c) deformed quadtree spline mesh overlaid on\ngrayscale image; (d) ﬂow ﬁeld visualized as a needle diagram.\ncontrol point (Szeliski and Kang 1995; Szeliski and Coughlan 1997).\nIn many cases, the small number of spline vertices results in a motion estimation problem\nthat is well conditioned. However, if large textureless regions (or elongated edges subject\nto the aperture problem) persist across several spline patches, it may be necessary to add a\nregularization term to make the problem well posed (Section 3.7.1). The simplest way to\ndo this is to directly add squared difference penalties between adjacent vertices in the spline\ncontrol mesh {ˆuj}, as in (3.100). If a multi-resolution (coarse-to-ﬁne) strategy is being used,\nit is important to re-scale these smoothness terms while going from level to level.\nThe linear system corresponding to the spline-based motion estimator is sparse and regu-\nlar. Because it is usually of moderate size, it can often be solved using direct techniques such\nas Cholesky decomposition (Appendix A.4). Alternatively, if the problem becomes too large\nand subject to excessive ﬁll-in, iterative techniques such as hierarchically preconditioned con-\njugate gradient (Szeliski 1990b, 2006b) can be used instead (Appendix A.5).\nBecause of its robustness, spline-based motion estimation has been used for a number\nof applications, including visual effects (Roble 1999) and medical image registration (Sec-\ntion 8.3.1) (Szeliski and Lavall´ee 1996; Kybic and Unser 2003).\nOne disadvantage of the basic technique, however, is that the model does a poor job\nnear motion discontinuities, unless an excessive number of nodes is used. To remedy this\nsituation, Szeliski and Shum (1996) propose using a quadtree representation embedded in the\nspline control grid (Figure 8.9a). Large cells are used to present regions of smooth motion,\nwhile smaller cells are added in regions of motion discontinuities (Figure 8.9c).\nTo estimate the motion, a coarse-to-ﬁne strategy is used. Starting with a regular spline\nimposed over a lower-resolution image, an initial motion estimate is obtained. Spline patches\nwhere the motion is inconsistent, i.e., the squared residual (8.67) is above a threshold, are\nsubdivided into smaller patches. In order to avoid cracks in the resulting motion ﬁeld (Fig-",
  "image_path": "page_428.jpg",
  "pages": [
    427,
    428,
    429
  ]
}