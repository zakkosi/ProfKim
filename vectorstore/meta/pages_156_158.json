{
  "doc_id": "pages_156_158",
  "text": "134\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nThe Fourier transform is simply a tabulation of the magnitude and phase response at each\nfrequency,\nH(ω) = F {h(x)} = Aejφ,\n(3.51)\ni.e., it is the response to a complex sinusoid of frequency ω passed through the ﬁlter h(x).\nThe Fourier transform pair is also often written as\nh(x) F\n↔H(ω).\n(3.52)\nUnfortunately, (3.51) does not give an actual formula for computing the Fourier transform.\nInstead, it gives a recipe, i.e., convolve the ﬁlter with a sinusoid, observe the magnitude and\nphase shift, repeat. Fortunately, closed form equations for the Fourier transform exist both in\nthe continuous domain,\nH(ω) =\nZ ∞\n−∞\nh(x)e−jωxdx,\n(3.53)\nand in the discrete domain,\nH(k) = 1\nN\nN−1\nX\nx=0\nh(x)e−j 2πkx\nN ,\n(3.54)\nwhere N is the length of the signal or region of analysis. These formulas apply both to ﬁlters,\nsuch as h(x), and to signals or images, such as s(x) or g(x).\nThe discrete form of the Fourier transform (3.54) is known as the Discrete Fourier Trans-\nform (DFT). Note that while (3.54) can be evaluated for any value of k, it only makes sense\nfor values in the range k ∈[−N\n2 , N\n2 ]. This is because larger values of k alias with lower\nfrequencies and hence provide no additional information, as explained in the discussion on\naliasing in Section 2.3.1.\nAt face value, the DFT takes O(N 2) operations (multiply-adds) to evaluate. Fortunately,\nthere exists a faster algorithm called the Fast Fourier Transform (FFT), which requires only\nO(N log2 N) operations (Bracewell 1986; Oppenheim, Schafer, and Buck 1999). We do not\nexplain the details of the algorithm here, except to say that it involves a series of log2 N\nstages, where each stage performs small 2×2 transforms (matrix multiplications with known\ncoefﬁcients) followed by some semi-global permutations. (You will often see the term but-\nterﬂy applied to these stages because of the pictorial shape of the signal processing graphs\ninvolved.) Implementations for the FFT can be found in most numerical and signal processing\nlibraries.\nNow that we have deﬁned the Fourier transform, what are some of its properties and how\ncan they be used? Table 3.1 lists a number of useful properties, which we describe in a little\nmore detail below:\n3.4 Fourier transforms\n135\nProperty\nSignal\nTransform\nsuperposition\nf1(x) + f2(x)\nF1(ω) + F2(ω)\nshift\nf(x −x0)\nF(ω)e−jωx0\nreversal\nf(−x)\nF ∗(ω)\nconvolution\nf(x) ∗h(x)\nF(ω)H(ω)\ncorrelation\nf(x) ⊗h(x)\nF(ω)H∗(ω)\nmultiplication\nf(x)h(x)\nF(ω) ∗H(ω)\ndifferentiation\nf ′(x)\njωF(ω)\ndomain scaling\nf(ax)\n1/aF(ω/a)\nreal images\nf(x) = f ∗(x)\n⇔\nF(ω) = F(−ω)\nParseval’s Theorem\nP\nx[f(x)]2\n=\nP\nω[F(ω)]2\nTable 3.1\nSome useful properties of Fourier transforms. The original transform pair is\nF(ω) = F{f(x)}.\n• Superposition: The Fourier transform of a sum of signals is the sum of their Fourier\ntransforms. Thus, the Fourier transform is a linear operator.\n• Shift: The Fourier transform of a shifted signal is the transform of the original signal\nmultiplied by a linear phase shift (complex sinusoid).\n• Reversal: The Fourier transform of a reversed signal is the complex conjugate of the\nsignal’s transform.\n• Convolution: The Fourier transform of a pair of convolved signals is the product of\ntheir transforms.\n• Correlation: The Fourier transform of a correlation is the product of the ﬁrst transform\ntimes the complex conjugate of the second one.\n• Multiplication: The Fourier transform of the product of two signals is the convolution\nof their transforms.\n• Differentiation: The Fourier transform of the derivative of a signal is that signal’s\ntransform multiplied by the frequency. In other words, differentiation linearly empha-\nsizes (magniﬁes) higher frequencies.\n• Domain scaling: The Fourier transform of a stretched signal is the equivalently com-\npressed (and scaled) version of the original transform and vice versa.\n136\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n• Real images: The Fourier transform of a real-valued signal is symmetric around the\norigin. This fact can be used to save space and to double the speed of image FFTs\nby packing alternating scanlines into the real and imaginary parts of the signal being\ntransformed.\n• Parseval’s Theorem: The energy (sum of squared values) of a signal is the same as\nthe energy of its Fourier transform.\nAll of these properties are relatively straightforward to prove (see Exercise 3.15) and they will\ncome in handy later in the book, e.g., when designing optimum Wiener ﬁlters (Section 3.4.3)\nor performing fast image correlations (Section 8.1.2).\n3.4.1 Fourier transform pairs\nNow that we have these properties in place, let us look at the Fourier transform pairs of some\ncommonly occurring ﬁlters and signals, as listed in Table 3.2. In more detail, these pairs are\nas follows:\n• Impulse: The impulse response has a constant (all frequency) transform.\n• Shifted impulse: The shifted impulse has unit magnitude and linear phase.\n• Box ﬁlter: The box (moving average) ﬁlter\nbox(x) =\n(\n1\nif |x| ≤1\n0\nelse\n(3.55)\nhas a sinc Fourier transform,\nsinc(ω) = sin ω\nω\n,\n(3.56)\nwhich has an inﬁnite number of side lobes. Conversely, the sinc ﬁlter is an ideal low-\npass ﬁlter. For a non-unit box, the width of the box a and the spacing of the zero\ncrossings in the sinc 1/a are inversely proportional.\n• Tent: The piecewise linear tent function,\ntent(x) = max(0, 1 −|x|),\n(3.57)\nhas a sinc2 Fourier transform.\n• Gaussian: The (unit area) Gaussian of width σ,\nG(x; σ) =\n1\n√\n2πσ e−x2\n2σ2 ,\n(3.58)\nhas a (unit height) Gaussian of width σ−1 as its Fourier transform.",
  "image_path": "page_157.jpg",
  "pages": [
    156,
    157,
    158
  ]
}