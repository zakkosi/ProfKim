{
  "doc_id": "pages_302_304",
  "text": "280\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\nFigure 5.9\nIntelligent scissors: (a) as the mouse traces the white path, the scissors follow\nthe orange path along the object boundary (the green curves show intermediate positions)\n(Mortensen and Barrett 1995) c⃝1995 ACM; (b) regular scissors can sometimes jump to a\nstronger (incorrect) boundary; (c) after training to the previous segment, similar edge proﬁles\nare preferred (Mortensen and Barrett 1998) c⃝1995 Elsevier.\n5.1.3 Scissors\nActive contours allow a user to roughly specify a boundary of interest and have the system\nevolve the contour towards a more accurate location as well as track it over time. The results\nof this curve evolution, however, may be unpredictable and may require additional user-based\nhints to achieve the desired result.\nAn alternative approach is to have the system optimize the contour in real time as the\nuser is drawing (Mortensen 1999). The intelligent scissors system developed by Mortensen\nand Barrett (1995) does just that. As the user draws a rough outline (the white curve in\nFigure 5.9a), the system computes and draws a better curve that clings to high-contrast edges\n(the orange curve).\nTo compute the optimal curve path (live-wire), the image is ﬁrst pre-processed to associate\nlow costs with edges (links between neighboring horizontal, vertical, and diagonal, i.e., N8\nneighbors) that are likely to be boundary elements. Their system uses a combination of zero-\ncrossing, gradient magnitudes, and gradient orientations to compute these costs.\nNext, as the user traces a rough curve, the system continuously recomputes the lowest-\ncost path between the starting seed point and the current mouse location using Dijkstra’s al-\ngorithm, a breadth-ﬁrst dynamic programming algorithm that terminates at the current target\nlocation.\nIn order to keep the system from jumping around unpredictably, the system will “freeze”\nthe curve to date (reset the seed point) after a period of inactivity. To prevent the live wire\nfrom jumping onto adjacent higher-contrast contours, the system also “learns” the intensity\n5.1 Active contours\n281\n-1\n+1\nϕ = 0\nϕ∆\ng(I)\nFigure 5.10\nLevel set evolution for a geodesic active contour. The embedding function φ\nis updated based on the curvature of the underlying surface modulated by the edge/speed\nfunction g(I), as well as the gradient of g(I), thereby attracting it to strong edges.\nproﬁle under the current optimized curve, and uses this to preferentially keep the wire moving\nalong the same (or a similar looking) boundary (Figure 5.9b–c).\nSeveral extensions have been proposed to the basic algorithm, which works remarkably\nwell even in its original form. Mortensen and Barrett (1999) use tobogganing, which is a\nsimple form of watershed region segmentation, to pre-segment the image into regions whose\nboundaries become candidates for optimized curve paths. The resulting region boundaries\nare turned into a much smaller graph, where nodes are located wherever three or four regions\nmeet. The Dijkstra algorithm is then run on this reduced graph, resulting in much faster (and\noften more stable) performance. Another extension to intelligent scissors is to use a proba-\nbilistic framework that takes into account the current trajectory of the boundary, resulting in\na system called JetStream (P´erez, Blake, and Gangnet 2001).\nInstead of re-computing an optimal curve at each time instant, a simpler system can be\ndeveloped by simply “snapping” the current mouse position to the nearest likely boundary\npoint (Gleicher 1995). Applications of these boundary extraction techniques to image cutting\nand pasting are presented in Section 10.4.\n5.1.4 Level Sets\nA limitation of active contours based on parametric curves of the form f(s), e.g., snakes, B-\nsnakes, and CONDENSATION, is that it is challenging to change the topology of the curve\nas it evolves. (McInerney and Terzopoulos (1999, 2000) describe one approach to doing\nthis.) Furthermore, if the shape changes dramatically, curve reparameterization may also be\nrequired.\nAn alternative representation for such closed contours is to use a level set, where the zero-\ncrossing(s) of a characteristic (or signed distance (Section 3.3.3)) function deﬁne the curve.\n282\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nLevel sets evolve to ﬁt and track objects of interest by modifying the underlying embedding\nfunction (another name for this 2D function) φ(x, y) instead of the curve f(s) (Malladi,\nSethian, and Vemuri 1995; Sethian 1999; Sapiro 2001; Osher and Paragios 2003). To reduce\nthe amount of computation required, only a small strip (frontier) around the locations of the\ncurrent zero-crossing needs to updated at each step, which results in what are called fast\nmarching methods (Sethian 1999).\nAn example of an evolution equation is the geodesic active contour proposed by Caselles,\nKimmel, and Sapiro (1997) and Yezzi, Kichenassamy, Kumar et al. (1997),\ndφ\ndt\n=\n|∇φ|div\n\u0012\ng(I) ∇φ\n|∇φ|\n\u0013\n=\ng(I)|∇φ|div\n\u0012 ∇φ\n|∇φ|\n\u0013\n+ ∇g(I) · ∇φ,\n(5.19)\nwhere g(I) is a generalized version of the snake edge potential (5.5). To get an intuitive sense\nof the curve’s behavior, assume that the embedding function φ is a signed distance function\naway from the curve (Figure 5.10), in which case |φ| = 1. The ﬁrst term in Equation (5.19)\nmoves the curve in the direction of its curvature, i.e., it acts to straighten the curve, under\nthe inﬂuence of the modulation function g(I). The second term moves the curve down the\ngradient of g(I), encouraging the curve to migrate towards minima of g(I).\nWhile this level-set formulation can readily change topology, it is still susceptible to lo-\ncal minima, since it is based on local measurements such as image gradients. An alternative\napproach is to re-cast the problem in a segmentation framework, where the energy measures\nthe consistency of the image statistics (e.g., color, texture, motion) inside and outside the seg-\nmented regions (Cremers, Rousson, and Deriche 2007; Rousson and Paragios 2008; Houhou,\nThiran, and Bresson 2008). These approaches build on earlier energy-based segmentation\nframeworks introduced by Leclerc (1989), Mumford and Shah (1989), and Chan and Vese\n(1992), which are discussed in more detail in Section 5.5. Examples of such level-set seg-\nmentations are shown in Figure 5.11, which shows the evolution of the level sets from a series\nof distributed circles towards the ﬁnal binary segmentation.\nFor more information on level sets and their applications, please see the collection of\npapers edited by Osher and Paragios (2003) as well as the series of Workshops on Variational\nand Level Set Methods in Computer Vision (Paragios, Faugeras, Chan et al. 2005) and Special\nIssues on Scale Space and Variational Methods in Computer Vision (Paragios and Sgallari\n2009).\n5.1.5 Application: Contour tracking and rotoscoping\nActive contours can be used in a wide variety of object-tracking applications (Blake and Isard\n1998; Yilmaz, Javed, and Shah 2006). For example, they can be used to track facial features",
  "image_path": "page_303.jpg",
  "pages": [
    302,
    303,
    304
  ]
}