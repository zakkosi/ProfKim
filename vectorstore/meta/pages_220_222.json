{
  "doc_id": "pages_220_222",
  "text": "198\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nEx 3.12: Steerable ﬁlters\nImplement Freeman and Adelson’s (1991) steerable ﬁlter algo-\nrithm. The input should be a grayscale or color image and the output should be a multi-banded\nimage consisting of G0◦\n1 and G90◦\n1\n. The coefﬁcients for the ﬁlters can be found in the paper\nby Freeman and Adelson (1991).\nTest the various order ﬁlters on a number of images of your choice and see if you can\nreliably ﬁnd corner and intersection features. These ﬁlters will be quite useful later to detect\nelongated structures, such as lines (Section 4.3).\nEx 3.13: Distance transform\nImplement some (raster-scan) algorithms for city block and\nEuclidean distance transforms. Can you do it without peeking at the literature (Danielsson\n1980; Borgefors 1986)? If so, what problems did you come across and resolve?\nLater on, you can use the distance functions you compute to perform feathering during\nimage stitching (Section 9.3.2).\nEx 3.14: Connected components\nImplement one of the connected component algorithms\nfrom Section 3.3.4 or Section 2.3 from Haralick and Shapiro’s book (1992) and discuss its\ncomputational complexity.\n• Threshold or quantize an image to obtain a variety of input labels and then compute the\narea statistics for the regions that you ﬁnd.\n• Use the connected components that you have found to track or match regions in differ-\nent images or video frames.\nEx 3.15: Fourier transform\nProve the properties of the Fourier transform listed in Ta-\nble 3.1 and derive the formulas for the Fourier transforms listed in Tables 3.2 and 3.3. These\nexercises are very useful if you want to become comfortable working with Fourier transforms,\nwhich is a very useful skill when analyzing and designing the behavior and efﬁciency of many\ncomputer vision algorithms.\nEx 3.16: Wiener ﬁltering\nEstimate the frequency spectrum of your personal photo collec-\ntion and use it to perform Wiener ﬁltering on a few images with varying degrees of noise.\n1. Collect a few hundred of your images by re-scaling them to ﬁt within a 512 × 512\nwindow and cropping them.\n2. Take their Fourier transforms, throw away the phase information, and average together\nall of the spectra.\n3. Pick two of your favorite images and add varying amounts of Gaussian noise, σn ∈\n{1, 2, 5, 10, 20} gray levels.\n3.9 Exercises\n199\n4. For each combination of image and noise, determine by eye which width of a Gaussian\nblurring ﬁlter σs gives the best denoised result. You will have to make a subjective\ndecision between sharpness and noise.\n5. Compute the Wiener ﬁltered version of all the noised images and compare them against\nyour hand-tuned Gaussian-smoothed images.\n6. (Optional) Do your image spectra have a lot of energy concentrated along the horizontal\nand vertical axes (fx = 0 and fy = 0)? Can you think of an explanation for this? Does\nrotating your image samples by 45◦move this energy to the diagonals? If not, could it\nbe due to edge effects in the Fourier transform? Can you suggest some techniques for\nreducing such effects?\nEx 3.17: Deblurring using Wiener ﬁltering\nUse Wiener ﬁltering to deblur some images.\n1. Modify the Wiener ﬁlter derivation (3.66–3.74) to incorporate blur (3.75).\n2. Discuss the resulting Wiener ﬁlter in terms of its noise suppression and frequency\nboosting characteristics.\n3. Assuming that the blur kernel is Gaussian and the image spectrum follows an inverse\nfrequency law, compute the frequency response of the Wiener ﬁlter, and compare it to\nthe unsharp mask.\n4. Synthetically blur two of your sample images with Gaussian blur kernels of different\nradii, add noise, and then perform Wiener ﬁltering.\n5. Repeat the above experiment with a “pillbox” (disc) blurring kernel, which is charac-\nteristic of a ﬁnite aperture lens (Section 2.2.3). Compare these results to Gaussian blur\nkernels (be sure to inspect your frequency plots).\n6. It has been suggested that regular apertures are anathema to de-blurring because they\nintroduce zeros in the sensed frequency spectrum (Veeraraghavan, Raskar, Agrawal et\nal. 2007). Show that this is indeed an issue if no prior model is assumed for the signal,\ni.e., P −1\ns\nl1. If a reasonable power spectrum is assumed, is this still a problem (do we\nstill get banding or ringing artifacts)?\nEx 3.18: High-quality image resampling\nImplement several of the low-pass ﬁlters pre-\nsented in Section 3.5.2 and also the discussion of the windowed sinc shown in Table 3.2 and\nFigure 3.29. Feel free to implement other ﬁlters (Wolberg 1990; Unser 1999).\nApply your ﬁlters to continuously resize an image, both magnifying (interpolating) and\nminifying (decimating) it; compare the resulting animations for several ﬁlters. Use both a\n200\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\nFigure 3.65 Sample images for testing the quality of resampling algorithms: (a) a synthetic\nchirp; (b) and (c) some high-frequency images from the image compression community.\nsynthetic chirp image (Figure 3.65a) and natural images with lots of high-frequency detail\n(Figure 3.65b-c).27\nYou may ﬁnd it helpful to write a simple visualization program that continuously plays the\nanimations for two or more ﬁlters at once and that let you “blink” between different results.\nDiscuss the merits and deﬁciencies of each ﬁlter, as well as its tradeoff between speed and\nquality.\nEx 3.19: Pyramids\nConstruct an image pyramid. The inputs should be a grayscale or color\nimage, a separable ﬁlter kernel, and the number of desired levels. Implement at least the\nfollowing kernels:\n• 2 × 2 block ﬁltering;\n• Burt and Adelson’s binomial kernel 1/16(1, 4, 6, 4, 1) (Burt and Adelson 1983a);\n• a high-quality seven- or nine-tap ﬁlter.\nCompare the visual quality of the various decimation ﬁlters. Also, shift your input image by\n1 to 4 pixels and compare the resulting decimated (quarter size) image sequence.\nEx 3.20: Pyramid blending\nWrite a program that takes as input two color images and a\nbinary mask image and produces the Laplacian pyramid blend of the two images.\n1. Construct the Laplacian pyramid for each image.\n2. Construct the Gaussian pyramid for the two mask images (the input image and its\ncomplement).\n27 These particular images are available on the book’s Web site.",
  "image_path": "page_221.jpg",
  "pages": [
    220,
    221,
    222
  ]
}