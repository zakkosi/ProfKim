{
  "doc_id": "pages_192_194",
  "text": "170\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nvertical shear\n+ downsample\n(a)\n(b)\n(c)\n(d)\nvertical \nupsample\nhorizontal shear\n+ upsample\nhorizontal  \ndownsample\n(e)\nFigure 3.50 Four-pass rotation (Szeliski, Winder, and Uyttendaele 2010): (a) original pixel\ngrid, image, and its Fourier transform; (b) vertical upsampling; (c) horizontal shear and up-\nsampling; (d) vertical shear and downsampling; (e) horizontal downsampling. The general\nafﬁne case looks similar except that the ﬁrst two stages perform general resampling.\n3.6.2 Mesh-based warping\nWhile parametric transforms speciﬁed by a small number of global parameters have many\nuses, local deformations with more degrees of freedom are often required.\nConsider, for example, changing the appearance of a face from a frown to a smile (Fig-\nure 3.51a). What is needed in this case is to curve the corners of the mouth upwards while\nleaving the rest of the face intact.19 To perform such a transformation, different amounts of\nmotion are required in different parts of the image. Figure 3.51 shows some of the commonly\nused approaches.\nThe ﬁrst approach, shown in Figure 3.51a–b, is to specify a sparse set of corresponding\npoints. The displacement of these points can then be interpolated to a dense displacement ﬁeld\n(Chapter 8) using a variety of techniques (Nielson 1993). One possibility is to triangulate\nthe set of points in one image (de Berg, Cheong, van Kreveld et al. 2006; Litwinowicz and\nWilliams 1994; Buck, Finkelstein, Jacobs et al. 2000) and to use an afﬁne motion model\n(Table 3.5), speciﬁed by the three triangle vertices, inside each triangle. If the destination\n19 Rowland and Perrett (1995); Pighin, Hecker, Lischinski et al. (1998); Blanz and Vetter (1999); Leyvand, Cohen-\nOr, Dror et al. (2008) show more sophisticated examples of changing facial expression and appearance.\n3.6 Geometric transformations\n171\n(a)\n(b)\n(c)\n(d)\nFigure 3.51 Image warping alternatives (Gomes, Darsa, Costa et al. 1999) c⃝1999 Morgan\nKaufmann: (a) sparse control points −→deformation grid; (b) denser set of control point\ncorrespondences; (c) oriented line correspondences; (d) uniform quadrilateral grid.\nimage is triangulated according to the new vertex locations, an inverse warping algorithm\n(Figure 3.47) can be used. If the source image is triangulated and used as a texture map,\ncomputer graphics rendering algorithms can be used to draw the new image (but care must\nbe taken along triangle edges to avoid potential aliasing).\nAlternative methods for interpolating a sparse set of displacements include moving nearby\nquadrilateral mesh vertices, as shown in Figure 3.51a, using variational (energy minimizing)\ninterpolants such as regularization (Litwinowicz and Williams 1994), see Section 3.7.1, or\nusing locally weighted (radial basis function) combinations of displacements (Nielson 1993).\n(See (Section 12.3.1) for additional scattered data interpolation techniques.) If quadrilateral\nmeshes are used, it may be desirable to interpolate displacements down to individual pixel\nvalues using a smooth interpolant such as a quadratic B-spline (Farin 1996; Lee, Wolberg,\nChwa et al. 1996).20\nIn some cases, e.g., if a dense depth map has been estimated for an image (Shade, Gortler,\nHe et al. 1998), we only know the forward displacement for each pixel. As mentioned before,\ndrawing source pixels at their destination location, i.e., forward warping (Figure 3.46), suffers\nfrom several potential problems, including aliasing and the appearance of small cracks. An\nalternative technique in this case is to forward warp the displacement ﬁeld (or depth map) to\n20 Note that the block-based motion models used by many video compression standards (Le Gall 1991) can be\nthought of as a 0th-order (piecewise-constant) displacement ﬁeld.\n172\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\nFigure 3.52 Line-based image warping (Beier and Neely 1992) c⃝1992 ACM: (a) distance\ncomputation and position transfer; (b) rendering algorithm; (c) two intermediate warps used\nfor morphing.\nits new location, ﬁll small holes in the resulting map, and then use inverse warping to perform\nthe resampling (Shade, Gortler, He et al. 1998). The reason that this generally works better\nthan forward warping is that displacement ﬁelds tend to be much smoother than images, so\nthe aliasing introduced during the forward warping of the displacement ﬁeld is much less\nnoticeable.\nA second approach to specifying displacements for local deformations is to use corre-\nsponding oriented line segments (Beier and Neely 1992), as shown in Figures 3.51c and 3.52.\nPixels along each line segment are transferred from source to destination exactly as speciﬁed,\nand other pixels are warped using a smooth interpolation of these displacements. Each line\nsegment correspondence speciﬁes a translation, rotation, and scaling, i.e., a similarity trans-\nform (Table 3.5), for pixels in its vicinity, as shown in Figure 3.52a. Line segments inﬂuence\nthe overall displacement of the image using a weighting function that depends on the mini-\nmum distance to the line segment (v in Figure 3.52a if u ∈[0, 1], else the shorter of the two\ndistances to P and Q).\nFor each pixel X, the target location X′ for each line correspondence is computed along\nwith a weight that depends on the distance and the line segment length (Figure 3.52b). The\nweighted average of all target locations X′\ni then becomes the ﬁnal destination location. Note\nthat while Beier and Neely describe this algorithm as a forward warp, an equivalent algorithm\ncan be written by sequencing through the destination pixels. The resulting warps are not\nidentical because line lengths or distances to lines may be different. Exercise 3.23 has you\nimplement the Beier–Neely (line-based) warp and compare it to a number of other local\ndeformation methods.\nYet another way of specifying correspondences in order to create image warps is to use\nsnakes (Section 5.1.1) combined with B-splines (Lee, Wolberg, Chwa et al. 1996). This tech-\nnique is used in Apple’s Shake software and is popular in the medical imaging community.",
  "image_path": "page_193.jpg",
  "pages": [
    192,
    193,
    194
  ]
}