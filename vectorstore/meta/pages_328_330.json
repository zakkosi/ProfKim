{
  "doc_id": "pages_328_330",
  "text": "306\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nused active contour methods.\nTechniques for segmenting images based on local pixel similarities combined with ag-\ngregation or splitting methods include watersheds (Vincent and Soille 1991; Beare 2006;\nArbel´aez, Maire, Fowlkes et al. 2010), region splitting (Ohlander, Price, and Reddy 1978),\nregion merging (Brice and Fennema 1970; Pavlidis and Liow 1990; Jain, Topchy, Law et al.\n2004), as well as graph-based and probabilistic multi-scale approaches (Felzenszwalb and\nHuttenlocher 2004b; Alpert, Galun, Basri et al. 2007).\nMean-shift algorithms, which ﬁnd modes (peaks) in a density function representation of\nthe pixels, are presented by Comaniciu and Meer (2002); Paris and Durand (2007). Parametric\nmixtures of Gaussians can also be used to represent and segment such pixel densities (Bishop\n2006; Ma, Derksen, Hong et al. 2007).\nThe seminal work on spectral (eigenvalue) methods for image segmentation is the nor-\nmalized cut algorithm of Shi and Malik (2000). Related work includes that by Weiss (1999);\nMeil˘a and Shi (2000, 2001); Malik, Belongie, Leung et al. (2001); Ng, Jordan, and Weiss\n(2001); Yu and Shi (2003); Cour, B´en´ezit, and Shi (2005); Sharon, Galun, Sharon et al.\n(2006); Tolliver and Miller (2006); Wang and Oliensis (2010).\nContinuous-energy-based (variational) approaches to interactive segmentation include Leclerc\n(1989); Mumford and Shah (1989); Chan and Vese (1992); Zhu and Yuille (1996); Tabb and\nAhuja (1997). Discrete variants of such problems are usually optimized using binary graph\ncuts or other combinatorial energy minimization methods (Boykov and Jolly 2001; Boykov\nand Kolmogorov 2003; Rother, Kolmogorov, and Blake 2004; Kolmogorov and Boykov 2005;\nCui, Yang, Wen et al. 2008; Vicente, Kolmogorov, and Rother 2008; Lempitsky and Boykov\n2007; Lempitsky, Blake, and Rother 2008), although continuous optimization techniques fol-\nlowed by thresholding can also be used (Grady 2006; Grady and Ali 2008; Singaraju, Grady,\nand Vidal 2008; Criminisi, Sharp, and Blake 2008; Grady 2008; Bai and Sapiro 2009; Cou-\nprie, Grady, Najman et al. 2009). Boykov and Funka-Lea (2006) present a good survey of\nvarious energy-based techniques for binary object segmentation.\n5.7 Exercises\nEx 5.1: Snake evolution\nProve that, in the absence of external forces, a snake will always\nshrink to a small circle and eventually a single point, regardless of whether ﬁrst- or second-\norder smoothness (or some combination) is used.\n(Hint: If you can show that the evolution of the x(s) and y(s) components are indepen-\ndent, you can analyze the 1D case more easily.)\nEx 5.2: Snake tracker\nImplement a snake-based contour tracker:\n5.7 Exercises\n307\n1. Decide whether to use a large number of contour points or a smaller number interpo-\nlated with a B-spline.\n2. Deﬁne your internal smoothness energy function and decide what image-based attrac-\ntive forces to use.\n3. At each iteration, set up the banded linear system of equations (quadratic energy func-\ntion) and solve it using banded Cholesky factorization (Appendix A.4).\nEx 5.3: Intelligent scissors\nImplement the intelligent scissors (live-wire) interactive seg-\nmentation algorithm (Mortensen and Barrett 1995) and design a graphical user interface\n(GUI) to let you draw such curves over an image and use them for segmentation.\nEx 5.4: Region segmentation\nImplement one of the region segmentation algorithms de-\nscribed in this chapter. Some popular segmentation algorithms include:\n• k-means (Section 5.3.1);\n• mixtures of Gaussians (Section 5.3.1);\n• mean shift (Section 5.3.2) and Exercise 5.5;\n• normalized cuts (Section 5.4);\n• similarity graph-based segmentation (Section 5.2.4);\n• binary Markov random ﬁelds solved using graph cuts (Section 5.5).\nApply your region segmentation to a video sequence and use it to track moving regions\nfrom frame to frame.\nAlternatively, test out your segmentation algorithm on the Berkeley segmentation database\n(Martin, Fowlkes, Tal et al. 2001).\nEx 5.5: Mean shift\nDevelop a mean-shift segmentation algorithm for color images (Co-\nmaniciu and Meer 2002).\n1. Convert your image to L*a*b* space, or keep the original RGB colors, and augment\nthem with the pixel (x, y) locations.\n2. For every pixel (L, a, b, x, y), compute the weighted mean of its neighbors using either\na unit ball (Epanechnikov kernel) or ﬁnite-radius Gaussian, or some other kernel of\nyour choosing. Weight the color and spatial scales differently, e.g., using values of\n(hs, hr, M) = (16, 19, 40) as shown in Figure 5.18.\n308\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n3. Replace the current value with this weighted mean and iterate until either the motion is\nbelow a threshold or a ﬁnite number of steps has been taken.\n4. Cluster all ﬁnal values (modes) that are within a threshold, i.e., ﬁnd the connected\ncomponents. Since each pixel is associated with a ﬁnal mean-shift (mode) value, this\nresults in an image segmentation, i.e., each pixel is labeled with its ﬁnal component.\n5. (Optional) Use a random subset of the pixels as starting points and ﬁnd which com-\nponent each unlabeled pixel belongs to, either by ﬁnding its nearest neighbor or by\niterating the mean shift until it ﬁnds a neighboring track of mean-shift values. Describe\nthe data structures you use to make this efﬁcient.\n6. (Optional) Mean shift divides the kernel density function estimate by the local weight-\ning to obtain a step size that is guaranteed to converge but may be slow. Use an alter-\nnative step size estimation algorithm from the optimization literature to see if you can\nmake the algorithm converge faster.",
  "image_path": "page_329.jpg",
  "pages": [
    328,
    329,
    330
  ]
}