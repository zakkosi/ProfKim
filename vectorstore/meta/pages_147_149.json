{
  "doc_id": "pages_147_149",
  "text": "3.3 More neighborhood operators\n125\nWhile we could try to use the α-trimmed mean or weighted median, these techniques still\nhave a tendency to round sharp corners, since the majority of pixels in the smoothing area\ncome from the background distribution.\nBilateral ﬁltering\nWhat if we were to combine the idea of a weighted ﬁlter kernel with a better version of outlier\nrejection? What if instead of rejecting a ﬁxed percentage α, we simply reject (in a soft way)\npixels whose values differ too much from the central pixel value? This is the essential idea in\nbilateral ﬁltering, which was ﬁrst popularized in the computer vision community by Tomasi\nand Manduchi (1998). Chen, Paris, and Durand (2007) and Paris, Kornprobst, Tumblin et al.\n(2008) cite similar earlier work (Aurich and Weule 1995; Smith and Brady 1997) as well as\nthe wealth of subsequent applications in computer vision and computational photography.\nIn the bilateral ﬁlter, the output pixel value depends on a weighted combination of neigh-\nboring pixel values\ng(i, j) =\nP\nk,l f(k, l)w(i, j, k, l)\nP\nk,l w(i, j, k, l)\n.\n(3.34)\nThe weighting coefﬁcient w(i, j, k, l) depends on the product of a domain kernel (Figure 3.19c),\nd(i, j, k, l) = exp\n\u0012\n−(i −k)2 + (j −l)2\n2σ2\nd\n\u0013\n,\n(3.35)\nand a data-dependent range kernel (Figure 3.19d),\nr(i, j, k, l) = exp\n\u0012\n−∥f(i, j) −f(k, l)∥2\n2σ2r\n\u0013\n.\n(3.36)\nWhen multiplied together, these yield the data-dependent bilateral weight function\nw(i, j, k, l) = exp\n\u0012\n−(i −k)2 + (j −l)2\n2σ2\nd\n−∥f(i, j) −f(k, l)∥2\n2σ2r\n\u0013\n.\n(3.37)\nFigure 3.20 shows an example of the bilateral ﬁltering of a noisy step edge. Note how the do-\nmain kernel is the usual Gaussian, the range kernel measures appearance (intensity) similarity\nto the center pixel, and the bilateral ﬁlter kernel is a product of these two.\nNotice that the range ﬁlter (3.36) uses the vector distance between the center and the\nneighboring pixel. This is important in color images, since an edge in any one of the color\nbands signals a change in material and hence the need to downweight a pixel’s inﬂuence.5\n5 Tomasi and Manduchi (1998) show that using the vector distance (as opposed to ﬁltering each color band\nseparately) reduces color fringing effects. They also recommend taking the color difference in the more perceptually\nuniform CIELAB color space (see Section 2.3.2).\n126\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\n(d)\n(e)\n(f)\nFigure 3.20\nBilateral ﬁltering (Durand and Dorsey 2002) c⃝2002 ACM: (a) noisy step\nedge input; (b) domain ﬁlter (Gaussian); (c) range ﬁlter (similarity to center pixel value); (d)\nbilateral ﬁlter; (e) ﬁltered step edge output; (f) 3D distance between pixels.\nSince bilateral ﬁltering is quite slow compared to regular separable ﬁltering, a number\nof acceleration techniques have been developed (Durand and Dorsey 2002; Paris and Durand\n2006; Chen, Paris, and Durand 2007; Paris, Kornprobst, Tumblin et al. 2008). Unfortunately,\nthese techniques tend to use more memory than regular ﬁltering and are hence not directly\napplicable to ﬁltering full-color images.\nIterated adaptive smoothing and anisotropic diffusion\nBilateral (and other) ﬁlters can also be applied in an iterative fashion, especially if an appear-\nance more like a “cartoon” is desired (Tomasi and Manduchi 1998). When iterated ﬁltering\nis applied, a much smaller neighborhood can often be used.\nConsider, for example, using only the four nearest neighbors, i.e., restricting |k −i|+|l −\nj| ≤1 in (3.34). Observe that\nd(i, j, k, l)\n=\nexp\n\u0012\n−(i −k)2 + (j −l)2\n2σ2\nd\n\u0013\n(3.38)\n=\n(\n1,\n|k −i| + |l −j| = 0,\nλ = e−1/2σ2\nd,\n|k −i| + |l −j| = 1.\n(3.39)\n3.3 More neighborhood operators\n127\nWe can thus re-write (3.34) as\nf (t+1)(i, j)\n=\nf (t)(i, j) + η P\nk,l f (t)(k, l)r(i, j, k, l)\n1 + η P\nk,l r(i, j, k, l)\n(3.40)\n=\nf (t)(i, j) +\nη\n1 + ηR\nX\nk,l\nr(i, j, k, l)[f (t)(k, l) −f (t)(i, j)],\nwhere R = P\n(k,l) r(i, j, k, l), (k, l) are the N4 neighbors of (i, j), and we have made the\niterative nature of the ﬁltering explicit.\nAs Barash (2002) notes, (3.40) is the same as the discrete anisotropic diffusion equation\nﬁrst proposed by Perona and Malik (1990b).6 Since its original introduction, anisotropic dif-\nfusion has been extended and applied to a wide range of problems (Nielsen, Florack, and De-\nriche 1997; Black, Sapiro, Marimont et al. 1998; Weickert, ter Haar Romeny, and Viergever\n1998; Weickert 1998). It has also been shown to be closely related to other adaptive smooth-\ning techniques (Saint-Marc, Chen, and Medioni 1991; Barash 2002; Barash and Comaniciu\n2004) as well as Bayesian regularization with a non-linear smoothness term that can be de-\nrived from image statistics (Scharr, Black, and Haussecker 2003).\nIn its general form, the range kernel r(i, j, k, l) = r(∥f(i, j)−f(k, l)∥), which is usually\ncalled the gain or edge-stopping function, or diffusion coefﬁcient, can be any monotonically\nincreasing function with r′(x) →0 as x →∞. Black, Sapiro, Marimont et al. (1998) show\nhow anisotropic diffusion is equivalent to minimizing a robust penalty function on the image\ngradients, which we discuss in Sections 3.7.1 and 3.7.2). Scharr, Black, and Haussecker\n(2003) show how the edge-stopping function can be derived in a principled manner from\nlocal image statistics. They also extend the diffusion neighborhood from N4 to N8, which\nallows them to create a diffusion operator that is both rotationally invariant and incorporates\ninformation about the eigenvalues of the local structure tensor.\nNote that, without a bias term towards the original image, anisotropic diffusion and itera-\ntive adaptive smoothing converge to a constant image. Unless a small number of iterations is\nused (e.g., for speed), it is usually preferable to formulate the smoothing problem as a joint\nminimization of a smoothness term and a data ﬁdelity term, as discussed in Sections 3.7.1\nand 3.7.2 and by Scharr, Black, and Haussecker (2003), which introduce such a bias in a\nprincipled manner.\n3.3.2 Morphology\nWhile non-linear ﬁlters are often used to enhance grayscale and color images, they are also\nused extensively to process binary images. Such images often occur after a thresholding\n6 The 1/(1 + ηR) factor is not present in anisotropic diffusion but becomes negligible as η →0.",
  "image_path": "page_148.jpg",
  "pages": [
    147,
    148,
    149
  ]
}