{
  "doc_id": "pages_141_143",
  "text": "3.2 Linear ﬁltering\n119\n(a)\n(b)\n(c)\nFigure 3.15 Second-order steerable ﬁlter (Freeman 1992) c⃝1992 IEEE: (a) original image\nof Einstein; (b) orientation map computed from the second-order oriented energy; (c) original\nimage with oriented structures enhanced.\nwhich has certain nice scale-space properties (Witkin 1983; Witkin, Terzopoulos, and Kass\n1986). The ﬁve-point Laplacian is just a compact approximation to this more sophisticated\nﬁlter.\nLikewise, the Sobel operator is a simple approximation to a directional or oriented ﬁlter,\nwhich can obtained by smoothing with a Gaussian (or some other ﬁlter) and then taking a\ndirectional derivative ∇ˆu =\n∂\n∂ˆu, which is obtained by taking the dot product between the\ngradient ﬁeld ∇and a unit direction ˆu = (cos θ, sin θ),\nˆu · ∇(G ∗f) = ∇ˆu(G ∗f) = (∇ˆuG) ∗f.\n(3.27)\nThe smoothed directional derivative ﬁlter,\nGˆu = uGx + vGy = u∂G\n∂x + v ∂G\n∂y ,\n(3.28)\nwhere ˆu = (u, v), is an example of a steerable ﬁlter, since the value of an image convolved\nwith Gˆu can be computed by ﬁrst convolving with the pair of ﬁlters (Gx, Gy) and then\nsteering the ﬁlter (potentially locally) by multiplying this gradient ﬁeld with a unit vector ˆu\n(Freeman and Adelson 1991). The advantage of this approach is that a whole family of ﬁlters\ncan be evaluated with very little cost.\nHow about steering a directional second derivative ﬁlter ∇ˆu · ∇ˆuGˆu, which is the result\nof taking a (smoothed) directional derivative and then taking the directional derivative again?\nFor example, Gxx is the second directional derivative in the x direction.\nAt ﬁrst glance, it would appear that the steering trick will not work, since for every di-\nrection ˆu, we need to compute a different ﬁrst directional derivative. Somewhat surprisingly,\nFreeman and Adelson (1991) showed that, for directional Gaussian derivatives, it is possible\n120\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\n(a)\n(b)\n(c)\n(d)\nFigure 3.16\nFourth-order steerable ﬁlter (Freeman and Adelson 1991) c⃝1991 IEEE: (a)\ntest image containing bars (lines) and step edges at different orientations; (b) average oriented\nenergy; (c) dominant orientation; (d) oriented energy as a function of angle (polar plot).\nto steer any order of derivative with a relatively small number of basis functions. For example,\nonly three basis functions are required for the second-order directional derivative,\nGˆuˆu = u2Gxx + 2uvGxy + v2Gyy.\n(3.29)\nFurthermore, each of the basis ﬁlters, while not itself necessarily separable, can be computed\nusing a linear combination of a small number of separable ﬁlters (Freeman and Adelson\n1991).\nThis remarkable result makes it possible to construct directional derivative ﬁlters of in-\ncreasingly greater directional selectivity, i.e., ﬁlters that only respond to edges that have\nstrong local consistency in orientation (Figure 3.15). Furthermore, higher order steerable\nﬁlters can respond to potentially more than a single edge orientation at a given location, and\nthey can respond to both bar edges (thin lines) and the classic step edges (Figure 3.16). In\norder to do this, however, full Hilbert transform pairs need to be used for second-order and\nhigher ﬁlters, as described in (Freeman and Adelson 1991).\nSteerable ﬁlters are often used to construct both feature descriptors (Section 4.1.3) and\nedge detectors (Section 4.2). While the ﬁlters developed by Freeman and Adelson (1991)\nare best suited for detecting linear (edge-like) structures, more recent work by Koethe (2003)\nshows how a combined 2 × 2 boundary tensor can be used to encode both edge and junction\n(“corner”) features. Exercise 3.12 has you implement such steerable ﬁlters and apply them to\nﬁnding both edge and corner features.\nSummed area table (integral image)\nIf an image is going to be repeatedly convolved with different box ﬁlters (and especially ﬁlters\nof different sizes at different locations), you can precompute the summed area table (Crow\n3.2 Linear ﬁltering\n121\n3\n2\n7\n2\n3\n3\n5\n12\n14\n17\n3\n5\n12 14\n17\n1\n5\n1\n3\n4\n4\n11\n19\n24\n31\n4\n11\n19\n24\n31\n5\n1\n3\n5\n1\n9\n17\n28\n38\n46\n9\n17\n28\n38\n46\n4\n3\n2\n1\n6\n13\n24\n37\n48\n62\n13\n24\n37\n48\n62\n2\n4\n1\n4\n8\n15\n30\n44\n59\n81\n15\n30\n44\n59\n81\n (a)  S = 24\n (b)  s =\n28\n (c)  S = 24\nFigure 3.17 Summed area tables: (a) original image; (b) summed area table; (c) computation\nof area sum. Each value in the summed area table s(i, j) (red) is computed recursively from\nits three adjacent (blue) neighbors (3.31). Area sums S (green) are computed by combining\nthe four values at the rectangle corners (purple) (3.32). Positive values are shown in bold and\nnegative values in italics.\n1984), which is just the running sum of all the pixel values from the origin,\ns(i, j) =\ni\nX\nk=0\nj\nX\nl=0\nf(k, l).\n(3.30)\nThis can be efﬁciently computed using a recursive (raster-scan) algorithm,\ns(i, j) = s(i −1, j) + s(i, j −1) −s(i −1, j −1) + f(i, j).\n(3.31)\nThe image s(i, j) is also often called an integral image (see Figure 3.17) and can actually be\ncomputed using only two additions per pixel if separate row sums are used (Viola and Jones\n2004). To ﬁnd the summed area (integral) inside a rectangle [i0, i1] × [j0, j1], we simply\ncombine four samples from the summed area table,\nS(i0 . . . i1, j0 . . . j1) =\ni1\nX\ni=i0\nj1\nX\nj=j0\ns(i1, j1) −s(i1, j0 −1) −s(i0 −1, j1) + s(i0 −1, j0 −1).\n(3.32)\nA potential disadvantage of summed area tables is that they require log M + log N extra bits\nin the accumulation image compared to the original image, where M and N are the image\nwidth and height. Extensions of summed area tables can also be used to approximate other\nconvolution kernels (Wolberg (1990, Section 6.5.2) contains a review).\nIn computer vision, summed area tables have been used in face detection (Viola and\nJones 2004) to compute simple multi-scale low-level features. Such features, which consist of\nadjacent rectangles of positive and negative values, are also known as boxlets (Simard, Bottou,",
  "image_path": "page_142.jpg",
  "pages": [
    141,
    142,
    143
  ]
}