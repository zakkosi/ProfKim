{
  "doc_id": "pages_055_057",
  "text": "2.1 Geometric primitives and transformations\n33\ny\nx\nd\nθ\nn\nl\n^\nz\nx\nd\nn\nm\ny\n^\n(a)\n(b)\nFigure 2.2 (a) 2D line equation and (b) 3D plane equation, expressed in terms of the normal\nˆn and distance to the origin d.\nalgorithm, which is discussed in Section 4.3.2. The combination (θ, d) is also known as\npolar coordinates.\nWhen using homogeneous coordinates, we can compute the intersection of two lines as\n˜x = ˜l1 × ˜l2,\n(2.4)\nwhere × is the cross product operator. Similarly, the line joining two points can be written as\n˜l = ˜x1 × ˜x2.\n(2.5)\nWhen trying to ﬁt an intersection point to multiple lines or, conversely, a line to multiple\npoints, least squares techniques (Section 6.1.1 and Appendix A.2) can be used, as discussed\nin Exercise 2.1.\n2D conics.\nThere are other algebraic curves that can be expressed with simple polynomial\nhomogeneous equations. For example, the conic sections (so called because they arise as the\nintersection of a plane and a 3D cone) can be written using a quadric equation\n˜xT Q˜x = 0.\n(2.6)\nQuadric equations play useful roles in the study of multi-view geometry and camera calibra-\ntion (Hartley and Zisserman 2004; Faugeras and Luong 2001) but are not used extensively in\nthis book.\n3D points.\nPoint coordinates in three dimensions can be written using inhomogeneous co-\nordinates x = (x, y, z) ∈R3 or homogeneous coordinates ˜x = (˜x, ˜y, ˜z, ˜w) ∈P3. As before,\nit is sometimes useful to denote a 3D point using the augmented vector ¯x = (x, y, z, 1) with\n˜x = ˜w¯x.\n34\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nz\nx\nλ\np\nq\ny\nr=(1-λ)p+λq\nFigure 2.3 3D line equation, r = (1 −λ)p + λq.\n3D planes.\n3D planes can also be represented as homogeneous coordinates ˜\nm = (a, b, c, d)\nwith a corresponding plane equation\n¯x · ˜\nm = ax + by + cz + d = 0.\n(2.7)\nWe can also normalize the plane equation as m = (ˆnx, ˆny, ˆnz, d) = (ˆn, d) with ∥ˆn∥= 1.\nIn this case, ˆn is the normal vector perpendicular to the plane and d is its distance to the\norigin (Figure 2.2b). As with the case of 2D lines, the plane at inﬁnity ˜\nm = (0, 0, 0, 1),\nwhich contains all the points at inﬁnity, cannot be normalized (i.e., it does not have a unique\nnormal or a ﬁnite distance).\nWe can express ˆn as a function of two angles (θ, φ),\nˆn = (cos θ cos φ, sin θ cos φ, sin φ),\n(2.8)\ni.e., using spherical coordinates, but these are less commonly used than polar coordinates\nsince they do not uniformly sample the space of possible normal vectors.\n3D lines.\nLines in 3D are less elegant than either lines in 2D or planes in 3D. One possible\nrepresentation is to use two points on the line, (p, q). Any other point on the line can be\nexpressed as a linear combination of these two points\nr = (1 −λ)p + λq,\n(2.9)\nas shown in Figure 2.3. If we restrict 0 ≤λ ≤1, we get the line segment joining p and q.\nIf we use homogeneous coordinates, we can write the line as\n˜r = µ˜p + λ˜q.\n(2.10)\nA special case of this is when the second point is at inﬁnity, i.e., ˜q = ( ˆdx, ˆdy, ˆdz, 0) = ( ˆd, 0).\nHere, we see that ˆd is the direction of the line. We can then re-write the inhomogeneous 3D\nline equation as\nr = p + λ ˆd.\n(2.11)\n2.1 Geometric primitives and transformations\n35\nA disadvantage of the endpoint representation for 3D lines is that it has too many degrees\nof freedom, i.e., six (three for each endpoint) instead of the four degrees that a 3D line truly\nhas. However, if we ﬁx the two points on the line to lie in speciﬁc planes, we obtain a rep-\nresentation with four degrees of freedom. For example, if we are representing nearly vertical\nlines, then z = 0 and z = 1 form two suitable planes, i.e., the (x, y) coordinates in both\nplanes provide the four coordinates describing the line. This kind of two-plane parameteri-\nzation is used in the light ﬁeld and Lumigraph image-based rendering systems described in\nChapter 13 to represent the collection of rays seen by a camera as it moves in front of an\nobject. The two-endpoint representation is also useful for representing line segments, even\nwhen their exact endpoints cannot be seen (only guessed at).\nIf we wish to represent all possible lines without bias towards any particular orientation,\nwe can use Pl¨ucker coordinates (Hartley and Zisserman 2004, Chapter 2; Faugeras and Luong\n2001, Chapter 3). These coordinates are the six independent non-zero entries in the 4×4 skew\nsymmetric matrix\nL = ˜p˜qT −˜q˜pT ,\n(2.12)\nwhere ˜p and ˜q are any two (non-identical) points on the line. This representation has only\nfour degrees of freedom, since L is homogeneous and also satisﬁes det(L) = 0, which results\nin a quadratic constraint on the Pl¨ucker coordinates.\nIn practice, the minimal representation is not essential for most applications. An ade-\nquate model of 3D lines can be obtained by estimating their direction (which may be known\nahead of time, e.g., for architecture) and some point within the visible portion of the line\n(see Section 7.5.1) or by using the two endpoints, since lines are most often visible as ﬁnite\nline segments. However, if you are interested in more details about the topic of minimal\nline parameterizations, F¨orstner (2005) discusses various ways to infer and model 3D lines in\nprojective geometry, as well as how to estimate the uncertainty in such ﬁtted models.\n3D quadrics.\nThe 3D analog of a conic section is a quadric surface\n¯xT Q¯x = 0\n(2.13)\n(Hartley and Zisserman 2004, Chapter 2). Again, while quadric surfaces are useful in the\nstudy of multi-view geometry and can also serve as useful modeling primitives (spheres,\nellipsoids, cylinders), we do not study them in great detail in this book.\n2.1.2 2D transformations\nHaving deﬁned our basic primitives, we can now turn our attention to how they can be trans-\nformed. The simplest transformations occur in the 2D plane and are illustrated in Figure 2.4.",
  "image_path": "page_056.jpg",
  "pages": [
    55,
    56,
    57
  ]
}