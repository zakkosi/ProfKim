{
  "doc_id": "pages_065_067",
  "text": "2.1 Geometric primitives and transformations\n43\nwhich gives a nice linearized relationship between the rotation parameters ω and R. We can\nalso write R(ω)v ≈v + ω × v, which is handy when we want to compute the derivative of\nRv with respect to ω,\n∂Rv\n∂ωT = −[v]× =\n\n\n0\nz\n−y\n−z\n0\nx\ny\n−x\n0\n\n.\n(2.36)\nAnother way to derive a rotation through a ﬁnite angle is called the exponential twist\n(Murray, Li, and Sastry 1994). A rotation by an angle θ is equivalent to k rotations through\nθ/k. In the limit as k →∞, we obtain\nR(ˆn, θ) = lim\nk→∞(I + 1\nk [θˆn]×)k = exp [ω]×.\n(2.37)\nIf we expand the matrix exponential as a Taylor series (using the identity [ˆn]k+2\n×\n= −[ˆn]k\n×,\nk > 0, and again assuming θ is in radians),\nexp [ω]×\n=\nI + θ[ˆn]× + θ2\n2 [ˆn]2\n× + θ3\n3! [ˆn]3\n× + · · ·\n=\nI + (θ −θ3\n3! + · · ·)[ˆn]× + (θ2\n2 −θ3\n4! + · · ·)[ˆn]2\n×\n=\nI + sin θ[ˆn]× + (1 −cos θ)[ˆn]2\n×,\n(2.38)\nwhich yields the familiar Rodriguez’s formula.\nUnit quaternions\nThe unit quaternion representation is closely related to the angle/axis representation. A unit\nquaternion is a unit length 4-vector whose components can be written as q = (qx, qy, qz, qw)\nor q = (x, y, z, w) for short. Unit quaternions live on the unit sphere ∥q∥= 1 and antipodal\n(opposite sign) quaternions, q and −q, represent the same rotation (Figure 2.6). Other than\nthis ambiguity (dual covering), the unit quaternion representation of a rotation is unique.\nFurthermore, the representation is continuous, i.e., as rotation matrices vary continuously,\none can ﬁnd a continuous quaternion representation, although the path on the quaternion\nsphere may wrap all the way around before returning to the “origin” qo = (0, 0, 0, 1). For\nthese and other reasons given below, quaternions are a very popular representation for pose\nand for pose interpolation in computer graphics (Shoemake 1985).\nQuaternions can be derived from the axis/angle representation through the formula\nq = (v, w) = (sin θ\n2 ˆn, cos θ\n2),\n(2.39)\n44\nComputer Vision: Algorithms and Applications (September 3, 2010 draft)\nz\nx\nw\n║q║=1\ny\nq0\nq1\nq2\n-q2\nFigure 2.6 Unit quaternions live on the unit sphere ∥q∥= 1. This ﬁgure shows a smooth\ntrajectory through the three quaternions q0, q1, and q2. The antipodal point to q2, namely\n−q2, represents the same rotation as q2.\nwhere ˆn and θ are the rotation axis and angle. Using the trigonometric identities sin θ =\n2 sin θ\n2 cos θ\n2 and (1 −cos θ) = 2 sin2 θ\n2, Rodriguez’s formula can be converted to\nR(ˆn, θ)\n=\nI + sin θ[ˆn]× + (1 −cos θ)[ˆn]2\n×\n=\nI + 2w[v]× + 2[v]2\n×.\n(2.40)\nThis suggests a quick way to rotate a vector v by a quaternion using a series of cross products,\nscalings, and additions. To obtain a formula for R(q) as a function of (x, y, z, w), recall that\n[v]× =\n\n\n0\n−z\ny\nz\n0\n−x\n−y\nx\n0\n\nand [v]2\n× =\n\n\n−y2 −z2\nxy\nxz\nxy\n−x2 −z2\nyz\nxz\nyz\n−x2 −y2\n\n.\nWe thus obtain\nR(q) =\n\n\n1 −2(y2 + z2)\n2(xy −zw)\n2(xz + yw)\n2(xy + zw)\n1 −2(x2 + z2)\n2(yz −xw)\n2(xz −yw)\n2(yz + xw)\n1 −2(x2 + y2)\n\n.\n(2.41)\nThe diagonal terms can be made more symmetrical by replacing 1 −2(y2 + z2) with (x2 +\nw2 −y2 −z2), etc.\nThe nicest aspect of unit quaternions is that there is a simple algebra for composing rota-\ntions expressed as unit quaternions. Given two quaternions q0 = (v0, w0) and q1 = (v1, w1),\nthe quaternion multiply operator is deﬁned as\nq2 = q0q1 = (v0 × v1 + w0v1 + w1v0, w0w1 −v0 · v1),\n(2.42)\n2.1 Geometric primitives and transformations\n45\nwith the property that R(q2) = R(q0)R(q1). Note that quaternion multiplication is not\ncommutative, just as 3D rotations and matrix multiplications are not.\nTaking the inverse of a quaternion is easy: Just ﬂip the sign of v or w (but not both!).\n(You can verify this has the desired effect of transposing the R matrix in (2.41).) Thus, we\ncan also deﬁne quaternion division as\nq2 = q0/q1 = q0q−1\n1\n= (v0 × v1 + w0v1 −w1v0, −w0w1 −v0 · v1).\n(2.43)\nThis is useful when the incremental rotation between two rotations is desired.\nIn particular, if we want to determine a rotation that is partway between two given rota-\ntions, we can compute the incremental rotation, take a fraction of the angle, and compute the\nnew rotation. This procedure is called spherical linear interpolation or slerp for short (Shoe-\nmake 1985) and is given in Algorithm 2.1. Note that Shoemake presents two formulas other\nthan the one given here. The ﬁrst exponentiates qr by alpha before multiplying the original\nquaternion,\nq2 = qα\nr q0,\n(2.44)\nwhile the second treats the quaternions as 4-vectors on a sphere and uses\nq2 = sin(1 −α)θ\nsin θ\nq0 + sin αθ\nsin θ q1,\n(2.45)\nwhere θ = cos−1(q0 · q1) and the dot product is directly between the quaternion 4-vectors.\nAll of these formulas give comparable results, although care should be taken when q0 and q1\nare close together, which is why I prefer to use an arctangent to establish the rotation angle.\nWhich rotation representation is better?\nThe choice of representation for 3D rotations depends partly on the application.\nThe axis/angle representation is minimal, and hence does not require any additional con-\nstraints on the parameters (no need to re-normalize after each update). If the angle is ex-\npressed in degrees, it is easier to understand the pose (say, 90◦twist around x-axis), and also\neasier to express exact rotations. When the angle is in radians, the derivatives of R with\nrespect to ω can easily be computed (2.36).\nQuaternions, on the other hand, are better if you want to keep track of a smoothly moving\ncamera, since there are no discontinuities in the representation. It is also easier to interpolate\nbetween rotations and to chain rigid transformations (Murray, Li, and Sastry 1994; Bregler\nand Malik 1998).\nMy usual preference is to use quaternions, but to update their estimates using an incre-\nmental rotation, as described in Section 6.2.2.",
  "image_path": "page_066.jpg",
  "pages": [
    65,
    66,
    67
  ]
}